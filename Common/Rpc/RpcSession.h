// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `RpcSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RpcSession_h__
#define __RpcSession_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <RpcErrorCode.h>
#include <RpcTypedefs.h>
#include <RpcManagedObject.h>
#include <RpcDownloader.h>
#include <RpcUploader.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Rpc
{

class ContentBrowser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ContentBrowser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::ContentBrowser*);

class EngineVersionBrowser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionBrowser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::EngineVersionBrowser*);

class ExtraBrowser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ExtraBrowser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::ExtraBrowser*);

class UserBrowser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::UserBrowser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::UserBrowser*);

class ContentSubmitter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ContentSubmitter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::ContentSubmitter*);

class EngineVersionSubmitter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionSubmitter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::EngineVersionSubmitter*);

class ExtraSubmitter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ExtraSubmitter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::ExtraSubmitter*);

class ClientBrowser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ClientBrowser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::ClientBrowser*);

class ClientSubmitter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ClientSubmitter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::ClientSubmitter*);

class CommentBrowser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::CommentBrowser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::CommentBrowser*);

class Session;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Session>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::Session*);

}

}

namespace Rpc
{

class ContentBrowser;
::Ice::Object* upCast(::Rpc::ContentBrowser*);
typedef ::IceInternal::Handle< ::Rpc::ContentBrowser> ContentBrowserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ContentBrowser> ContentBrowserPrx;
void __patch(ContentBrowserPtr&, const ::Ice::ObjectPtr&);

class EngineVersionBrowser;
::Ice::Object* upCast(::Rpc::EngineVersionBrowser*);
typedef ::IceInternal::Handle< ::Rpc::EngineVersionBrowser> EngineVersionBrowserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionBrowser> EngineVersionBrowserPrx;
void __patch(EngineVersionBrowserPtr&, const ::Ice::ObjectPtr&);

class ExtraBrowser;
::Ice::Object* upCast(::Rpc::ExtraBrowser*);
typedef ::IceInternal::Handle< ::Rpc::ExtraBrowser> ExtraBrowserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ExtraBrowser> ExtraBrowserPrx;
void __patch(ExtraBrowserPtr&, const ::Ice::ObjectPtr&);

class UserBrowser;
::Ice::Object* upCast(::Rpc::UserBrowser*);
typedef ::IceInternal::Handle< ::Rpc::UserBrowser> UserBrowserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::UserBrowser> UserBrowserPrx;
void __patch(UserBrowserPtr&, const ::Ice::ObjectPtr&);

class ContentSubmitter;
::Ice::Object* upCast(::Rpc::ContentSubmitter*);
typedef ::IceInternal::Handle< ::Rpc::ContentSubmitter> ContentSubmitterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ContentSubmitter> ContentSubmitterPrx;
void __patch(ContentSubmitterPtr&, const ::Ice::ObjectPtr&);

class EngineVersionSubmitter;
::Ice::Object* upCast(::Rpc::EngineVersionSubmitter*);
typedef ::IceInternal::Handle< ::Rpc::EngineVersionSubmitter> EngineVersionSubmitterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionSubmitter> EngineVersionSubmitterPrx;
void __patch(EngineVersionSubmitterPtr&, const ::Ice::ObjectPtr&);

class ExtraSubmitter;
::Ice::Object* upCast(::Rpc::ExtraSubmitter*);
typedef ::IceInternal::Handle< ::Rpc::ExtraSubmitter> ExtraSubmitterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ExtraSubmitter> ExtraSubmitterPrx;
void __patch(ExtraSubmitterPtr&, const ::Ice::ObjectPtr&);

class ClientBrowser;
::Ice::Object* upCast(::Rpc::ClientBrowser*);
typedef ::IceInternal::Handle< ::Rpc::ClientBrowser> ClientBrowserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ClientBrowser> ClientBrowserPrx;
void __patch(ClientBrowserPtr&, const ::Ice::ObjectPtr&);

class ClientSubmitter;
::Ice::Object* upCast(::Rpc::ClientSubmitter*);
typedef ::IceInternal::Handle< ::Rpc::ClientSubmitter> ClientSubmitterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ClientSubmitter> ClientSubmitterPrx;
void __patch(ClientSubmitterPtr&, const ::Ice::ObjectPtr&);

class CommentBrowser;
::Ice::Object* upCast(::Rpc::CommentBrowser*);
typedef ::IceInternal::Handle< ::Rpc::CommentBrowser> CommentBrowserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::CommentBrowser> CommentBrowserPrx;
void __patch(CommentBrowserPtr&, const ::Ice::ObjectPtr&);

class Session;
::Ice::Object* upCast(::Rpc::Session*);
typedef ::IceInternal::Handle< ::Rpc::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Session> SessionPrx;
void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

}

namespace Rpc
{

struct ContentItem
{
    ::std::string id;
    ::std::string title;

    bool operator==(const ContentItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(title != __rhs.title)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ContentItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(title < __rhs.title)
        {
            return true;
        }
        else if(__rhs.title < title)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ContentItem& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ContentItem& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ContentItem& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ContentItem& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct ContentInfo
{
    ::std::string id;
    ::std::string parentId;
    ::std::string title;
    ::std::string page;
    ::std::string category;
    ::std::string engineName;
    ::std::string engineVersion;
    ::std::string startup;
    ::Ice::Int imageCount;
    ::std::string video;
    ::std::string desc;
    ::std::string user;
    ::std::string upTime;
    ::std::string state;

    bool operator==(const ContentInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(parentId != __rhs.parentId)
        {
            return false;
        }
        if(title != __rhs.title)
        {
            return false;
        }
        if(page != __rhs.page)
        {
            return false;
        }
        if(category != __rhs.category)
        {
            return false;
        }
        if(engineName != __rhs.engineName)
        {
            return false;
        }
        if(engineVersion != __rhs.engineVersion)
        {
            return false;
        }
        if(startup != __rhs.startup)
        {
            return false;
        }
        if(imageCount != __rhs.imageCount)
        {
            return false;
        }
        if(video != __rhs.video)
        {
            return false;
        }
        if(desc != __rhs.desc)
        {
            return false;
        }
        if(user != __rhs.user)
        {
            return false;
        }
        if(upTime != __rhs.upTime)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ContentInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(parentId < __rhs.parentId)
        {
            return true;
        }
        else if(__rhs.parentId < parentId)
        {
            return false;
        }
        if(title < __rhs.title)
        {
            return true;
        }
        else if(__rhs.title < title)
        {
            return false;
        }
        if(page < __rhs.page)
        {
            return true;
        }
        else if(__rhs.page < page)
        {
            return false;
        }
        if(category < __rhs.category)
        {
            return true;
        }
        else if(__rhs.category < category)
        {
            return false;
        }
        if(engineName < __rhs.engineName)
        {
            return true;
        }
        else if(__rhs.engineName < engineName)
        {
            return false;
        }
        if(engineVersion < __rhs.engineVersion)
        {
            return true;
        }
        else if(__rhs.engineVersion < engineVersion)
        {
            return false;
        }
        if(startup < __rhs.startup)
        {
            return true;
        }
        else if(__rhs.startup < startup)
        {
            return false;
        }
        if(imageCount < __rhs.imageCount)
        {
            return true;
        }
        else if(__rhs.imageCount < imageCount)
        {
            return false;
        }
        if(video < __rhs.video)
        {
            return true;
        }
        else if(__rhs.video < video)
        {
            return false;
        }
        if(desc < __rhs.desc)
        {
            return true;
        }
        else if(__rhs.desc < desc)
        {
            return false;
        }
        if(user < __rhs.user)
        {
            return true;
        }
        else if(__rhs.user < user)
        {
            return false;
        }
        if(upTime < __rhs.upTime)
        {
            return true;
        }
        else if(__rhs.upTime < upTime)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ContentInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ContentInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ContentInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ContentInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Rpc::ContentItem> ContentItemSeq;

struct EngineVersionInfo
{
    ::std::string name;
    ::std::string version;
    ::std::string setup;
    ::std::string unsetup;
    ::std::string uptime;
    ::std::string info;
    ::std::string state;

    bool operator==(const EngineVersionInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(version != __rhs.version)
        {
            return false;
        }
        if(setup != __rhs.setup)
        {
            return false;
        }
        if(unsetup != __rhs.unsetup)
        {
            return false;
        }
        if(uptime != __rhs.uptime)
        {
            return false;
        }
        if(info != __rhs.info)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const EngineVersionInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(version < __rhs.version)
        {
            return true;
        }
        else if(__rhs.version < version)
        {
            return false;
        }
        if(setup < __rhs.setup)
        {
            return true;
        }
        else if(__rhs.setup < setup)
        {
            return false;
        }
        if(unsetup < __rhs.unsetup)
        {
            return true;
        }
        else if(__rhs.unsetup < unsetup)
        {
            return false;
        }
        if(uptime < __rhs.uptime)
        {
            return true;
        }
        else if(__rhs.uptime < uptime)
        {
            return false;
        }
        if(info < __rhs.info)
        {
            return true;
        }
        else if(__rhs.info < info)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const EngineVersionInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const EngineVersionInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const EngineVersionInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const EngineVersionInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Rpc::EngineVersionInfo> EngineVersionSeq;

struct ExtraInfo
{
    ::std::string id;
    ::std::string title;
    ::std::string category;
    ::std::string setup;
    ::std::string user;
    ::std::string uptime;
    ::std::string info;
    ::std::string state;

    bool operator==(const ExtraInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(title != __rhs.title)
        {
            return false;
        }
        if(category != __rhs.category)
        {
            return false;
        }
        if(setup != __rhs.setup)
        {
            return false;
        }
        if(user != __rhs.user)
        {
            return false;
        }
        if(uptime != __rhs.uptime)
        {
            return false;
        }
        if(info != __rhs.info)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ExtraInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(title < __rhs.title)
        {
            return true;
        }
        else if(__rhs.title < title)
        {
            return false;
        }
        if(category < __rhs.category)
        {
            return true;
        }
        else if(__rhs.category < category)
        {
            return false;
        }
        if(setup < __rhs.setup)
        {
            return true;
        }
        else if(__rhs.setup < setup)
        {
            return false;
        }
        if(user < __rhs.user)
        {
            return true;
        }
        else if(__rhs.user < user)
        {
            return false;
        }
        if(uptime < __rhs.uptime)
        {
            return true;
        }
        else if(__rhs.uptime < uptime)
        {
            return false;
        }
        if(info < __rhs.info)
        {
            return true;
        }
        else if(__rhs.info < info)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ExtraInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ExtraInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ExtraInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ExtraInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Rpc::ExtraInfo> ExtraInfoSeq;

struct User
{
    ::std::string username;
    ::std::string group;
    ::std::string info;

    bool operator==(const User& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(username != __rhs.username)
        {
            return false;
        }
        if(group != __rhs.group)
        {
            return false;
        }
        if(info != __rhs.info)
        {
            return false;
        }
        return true;
    }

    bool operator<(const User& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(username < __rhs.username)
        {
            return true;
        }
        else if(__rhs.username < username)
        {
            return false;
        }
        if(group < __rhs.group)
        {
            return true;
        }
        else if(__rhs.group < group)
        {
            return false;
        }
        if(info < __rhs.info)
        {
            return true;
        }
        else if(__rhs.info < info)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const User& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const User& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const User& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const User& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Rpc::User> UserSeq;

struct ClientInfo
{
    ::std::string version;
    ::std::string uptime;
    ::std::string info;
    ::std::string state;

    bool operator==(const ClientInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(version != __rhs.version)
        {
            return false;
        }
        if(uptime != __rhs.uptime)
        {
            return false;
        }
        if(info != __rhs.info)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ClientInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(version < __rhs.version)
        {
            return true;
        }
        else if(__rhs.version < version)
        {
            return false;
        }
        if(uptime < __rhs.uptime)
        {
            return true;
        }
        else if(__rhs.uptime < uptime)
        {
            return false;
        }
        if(info < __rhs.info)
        {
            return true;
        }
        else if(__rhs.info < info)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ClientInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ClientInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ClientInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ClientInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Rpc::ClientInfo> ClientInfoSeq;

struct Comment
{
    ::std::string id;
    ::std::string targetId;
    ::std::string user;
    ::std::string time;
    ::std::string comment;

    bool operator==(const Comment& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(targetId != __rhs.targetId)
        {
            return false;
        }
        if(user != __rhs.user)
        {
            return false;
        }
        if(time != __rhs.time)
        {
            return false;
        }
        if(comment != __rhs.comment)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Comment& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(targetId < __rhs.targetId)
        {
            return true;
        }
        else if(__rhs.targetId < targetId)
        {
            return false;
        }
        if(user < __rhs.user)
        {
            return true;
        }
        else if(__rhs.user < user)
        {
            return false;
        }
        if(time < __rhs.time)
        {
            return true;
        }
        else if(__rhs.time < time)
        {
            return false;
        }
        if(comment < __rhs.comment)
        {
            return true;
        }
        else if(__rhs.comment < comment)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Comment& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Comment& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Comment& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Comment& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Rpc::Comment> CommentSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Rpc::ContentItem>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::ContentItem, S>
{
    static void write(S* __os, const ::Rpc::ContentItem& v)
    {
        __os->write(v.id);
        __os->write(v.title);
    }
};

template<class S>
struct StreamReader< ::Rpc::ContentItem, S>
{
    static void read(S* __is, ::Rpc::ContentItem& v)
    {
        __is->read(v.id);
        __is->read(v.title);
    }
};

template<>
struct StreamableTraits< ::Rpc::ContentInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::ContentInfo, S>
{
    static void write(S* __os, const ::Rpc::ContentInfo& v)
    {
        __os->write(v.id);
        __os->write(v.parentId);
        __os->write(v.title);
        __os->write(v.page);
        __os->write(v.category);
        __os->write(v.engineName);
        __os->write(v.engineVersion);
        __os->write(v.startup);
        __os->write(v.imageCount);
        __os->write(v.video);
        __os->write(v.desc);
        __os->write(v.user);
        __os->write(v.upTime);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::Rpc::ContentInfo, S>
{
    static void read(S* __is, ::Rpc::ContentInfo& v)
    {
        __is->read(v.id);
        __is->read(v.parentId);
        __is->read(v.title);
        __is->read(v.page);
        __is->read(v.category);
        __is->read(v.engineName);
        __is->read(v.engineVersion);
        __is->read(v.startup);
        __is->read(v.imageCount);
        __is->read(v.video);
        __is->read(v.desc);
        __is->read(v.user);
        __is->read(v.upTime);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::Rpc::EngineVersionInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::EngineVersionInfo, S>
{
    static void write(S* __os, const ::Rpc::EngineVersionInfo& v)
    {
        __os->write(v.name);
        __os->write(v.version);
        __os->write(v.setup);
        __os->write(v.unsetup);
        __os->write(v.uptime);
        __os->write(v.info);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::Rpc::EngineVersionInfo, S>
{
    static void read(S* __is, ::Rpc::EngineVersionInfo& v)
    {
        __is->read(v.name);
        __is->read(v.version);
        __is->read(v.setup);
        __is->read(v.unsetup);
        __is->read(v.uptime);
        __is->read(v.info);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::Rpc::ExtraInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::ExtraInfo, S>
{
    static void write(S* __os, const ::Rpc::ExtraInfo& v)
    {
        __os->write(v.id);
        __os->write(v.title);
        __os->write(v.category);
        __os->write(v.setup);
        __os->write(v.user);
        __os->write(v.uptime);
        __os->write(v.info);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::Rpc::ExtraInfo, S>
{
    static void read(S* __is, ::Rpc::ExtraInfo& v)
    {
        __is->read(v.id);
        __is->read(v.title);
        __is->read(v.category);
        __is->read(v.setup);
        __is->read(v.user);
        __is->read(v.uptime);
        __is->read(v.info);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::Rpc::User>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::User, S>
{
    static void write(S* __os, const ::Rpc::User& v)
    {
        __os->write(v.username);
        __os->write(v.group);
        __os->write(v.info);
    }
};

template<class S>
struct StreamReader< ::Rpc::User, S>
{
    static void read(S* __is, ::Rpc::User& v)
    {
        __is->read(v.username);
        __is->read(v.group);
        __is->read(v.info);
    }
};

template<>
struct StreamableTraits< ::Rpc::ClientInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::ClientInfo, S>
{
    static void write(S* __os, const ::Rpc::ClientInfo& v)
    {
        __os->write(v.version);
        __os->write(v.uptime);
        __os->write(v.info);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::Rpc::ClientInfo, S>
{
    static void read(S* __is, ::Rpc::ClientInfo& v)
    {
        __is->read(v.version);
        __is->read(v.uptime);
        __is->read(v.info);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::Rpc::Comment>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::Comment, S>
{
    static void write(S* __os, const ::Rpc::Comment& v)
    {
        __os->write(v.id);
        __os->write(v.targetId);
        __os->write(v.user);
        __os->write(v.time);
        __os->write(v.comment);
    }
};

template<class S>
struct StreamReader< ::Rpc::Comment, S>
{
    static void read(S* __is, ::Rpc::Comment& v)
    {
        __is->read(v.id);
        __is->read(v.targetId);
        __is->read(v.user);
        __is->read(v.time);
        __is->read(v.comment);
    }
};

}

namespace Rpc
{

class Callback_ContentBrowser_next_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentBrowser_next_Base> Callback_ContentBrowser_nextPtr;

class Callback_EngineVersionBrowser_next_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionBrowser_next_Base> Callback_EngineVersionBrowser_nextPtr;

class Callback_ExtraBrowser_next_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraBrowser_next_Base> Callback_ExtraBrowser_nextPtr;

class Callback_UserBrowser_next_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserBrowser_next_Base> Callback_UserBrowser_nextPtr;

class Callback_ContentSubmitter_setTitle_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setTitle_Base> Callback_ContentSubmitter_setTitlePtr;

class Callback_ContentSubmitter_setPage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setPage_Base> Callback_ContentSubmitter_setPagePtr;

class Callback_ContentSubmitter_setCategory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setCategory_Base> Callback_ContentSubmitter_setCategoryPtr;

class Callback_ContentSubmitter_setEngine_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setEngine_Base> Callback_ContentSubmitter_setEnginePtr;

class Callback_ContentSubmitter_setStartup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setStartup_Base> Callback_ContentSubmitter_setStartupPtr;

class Callback_ContentSubmitter_setParentId_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setParentId_Base> Callback_ContentSubmitter_setParentIdPtr;

class Callback_ContentSubmitter_setVideo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setVideo_Base> Callback_ContentSubmitter_setVideoPtr;

class Callback_ContentSubmitter_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_setDescription_Base> Callback_ContentSubmitter_setDescriptionPtr;

class Callback_ContentSubmitter_uploadImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_uploadImage_Base> Callback_ContentSubmitter_uploadImagePtr;

class Callback_ContentSubmitter_uploadContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_uploadContent_Base> Callback_ContentSubmitter_uploadContentPtr;

class Callback_ContentSubmitter_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_cancel_Base> Callback_ContentSubmitter_cancelPtr;

class Callback_ContentSubmitter_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContentSubmitter_finish_Base> Callback_ContentSubmitter_finishPtr;

class Callback_EngineVersionSubmitter_setSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionSubmitter_setSetup_Base> Callback_EngineVersionSubmitter_setSetupPtr;

class Callback_EngineVersionSubmitter_setUnSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionSubmitter_setUnSetup_Base> Callback_EngineVersionSubmitter_setUnSetupPtr;

class Callback_EngineVersionSubmitter_setInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionSubmitter_setInfo_Base> Callback_EngineVersionSubmitter_setInfoPtr;

class Callback_EngineVersionSubmitter_uploadEngine_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionSubmitter_uploadEngine_Base> Callback_EngineVersionSubmitter_uploadEnginePtr;

class Callback_EngineVersionSubmitter_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionSubmitter_cancel_Base> Callback_EngineVersionSubmitter_cancelPtr;

class Callback_EngineVersionSubmitter_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionSubmitter_finish_Base> Callback_EngineVersionSubmitter_finishPtr;

class Callback_ExtraSubmitter_setTitle_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_setTitle_Base> Callback_ExtraSubmitter_setTitlePtr;

class Callback_ExtraSubmitter_setSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_setSetup_Base> Callback_ExtraSubmitter_setSetupPtr;

class Callback_ExtraSubmitter_setCategory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_setCategory_Base> Callback_ExtraSubmitter_setCategoryPtr;

class Callback_ExtraSubmitter_setInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_setInfo_Base> Callback_ExtraSubmitter_setInfoPtr;

class Callback_ExtraSubmitter_uploadImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_uploadImage_Base> Callback_ExtraSubmitter_uploadImagePtr;

class Callback_ExtraSubmitter_uploadExtra_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_uploadExtra_Base> Callback_ExtraSubmitter_uploadExtraPtr;

class Callback_ExtraSubmitter_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_cancel_Base> Callback_ExtraSubmitter_cancelPtr;

class Callback_ExtraSubmitter_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExtraSubmitter_finish_Base> Callback_ExtraSubmitter_finishPtr;

class Callback_ClientBrowser_next_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClientBrowser_next_Base> Callback_ClientBrowser_nextPtr;

class Callback_ClientSubmitter_setInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClientSubmitter_setInfo_Base> Callback_ClientSubmitter_setInfoPtr;

class Callback_ClientSubmitter_uploadClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClientSubmitter_uploadClient_Base> Callback_ClientSubmitter_uploadClientPtr;

class Callback_ClientSubmitter_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClientSubmitter_cancel_Base> Callback_ClientSubmitter_cancelPtr;

class Callback_ClientSubmitter_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClientSubmitter_finish_Base> Callback_ClientSubmitter_finishPtr;

class Callback_CommentBrowser_next_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommentBrowser_next_Base> Callback_CommentBrowser_nextPtr;

class Callback_Session_refresh_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_refresh_Base> Callback_Session_refreshPtr;

class Callback_Session_getCurrentUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getCurrentUser_Base> Callback_Session_getCurrentUserPtr;

class Callback_Session_getCurrentUserGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getCurrentUserGroup_Base> Callback_Session_getCurrentUserGroupPtr;

class Callback_Session_setPages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_setPages_Base> Callback_Session_setPagesPtr;

class Callback_Session_getPages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getPages_Base> Callback_Session_getPagesPtr;

class Callback_Session_setContentCategories_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_setContentCategories_Base> Callback_Session_setContentCategoriesPtr;

class Callback_Session_getContentCategories_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getContentCategories_Base> Callback_Session_getContentCategoriesPtr;

class Callback_Session_setExtraCategories_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_setExtraCategories_Base> Callback_Session_setExtraCategoriesPtr;

class Callback_Session_getExtraCategories_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getExtraCategories_Base> Callback_Session_getExtraCategoriesPtr;

class Callback_Session_browseContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_browseContent_Base> Callback_Session_browseContentPtr;

class Callback_Session_getContentInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getContentInfo_Base> Callback_Session_getContentInfoPtr;

class Callback_Session_downloadContentImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_downloadContentImage_Base> Callback_Session_downloadContentImagePtr;

class Callback_Session_downloadContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_downloadContent_Base> Callback_Session_downloadContentPtr;

class Callback_Session_submitContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_submitContent_Base> Callback_Session_submitContentPtr;

class Callback_Session_updateContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_updateContent_Base> Callback_Session_updateContentPtr;

class Callback_Session_removeContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_removeContent_Base> Callback_Session_removeContentPtr;

class Callback_Session_browseEngineVersions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_browseEngineVersions_Base> Callback_Session_browseEngineVersionsPtr;

class Callback_Session_downloadEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_downloadEngineVersion_Base> Callback_Session_downloadEngineVersionPtr;

class Callback_Session_removeEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_removeEngineVersion_Base> Callback_Session_removeEngineVersionPtr;

class Callback_Session_submitEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_submitEngineVersion_Base> Callback_Session_submitEngineVersionPtr;

class Callback_Session_updateEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_updateEngineVersion_Base> Callback_Session_updateEngineVersionPtr;

class Callback_Session_getEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getEngineVersion_Base> Callback_Session_getEngineVersionPtr;

class Callback_Session_browseExtra_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_browseExtra_Base> Callback_Session_browseExtraPtr;

class Callback_Session_getExtraInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getExtraInfo_Base> Callback_Session_getExtraInfoPtr;

class Callback_Session_downloadExtraImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_downloadExtraImage_Base> Callback_Session_downloadExtraImagePtr;

class Callback_Session_downloadExtra_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_downloadExtra_Base> Callback_Session_downloadExtraPtr;

class Callback_Session_submitExtra_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_submitExtra_Base> Callback_Session_submitExtraPtr;

class Callback_Session_updateExtra_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_updateExtra_Base> Callback_Session_updateExtraPtr;

class Callback_Session_removeExtra_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_removeExtra_Base> Callback_Session_removeExtraPtr;

class Callback_Session_browseClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_browseClient_Base> Callback_Session_browseClientPtr;

class Callback_Session_getClientInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_getClientInfo_Base> Callback_Session_getClientInfoPtr;

class Callback_Session_submitClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_submitClient_Base> Callback_Session_submitClientPtr;

class Callback_Session_updateClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_updateClient_Base> Callback_Session_updateClientPtr;

class Callback_Session_removeClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_removeClient_Base> Callback_Session_removeClientPtr;

class Callback_Session_browseUsers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_browseUsers_Base> Callback_Session_browseUsersPtr;

class Callback_Session_setUserGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_setUserGroup_Base> Callback_Session_setUserGroupPtr;

class Callback_Session_removeUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_removeUser_Base> Callback_Session_removeUserPtr;

class Callback_Session_browseComment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_browseComment_Base> Callback_Session_browseCommentPtr;

class Callback_Session_addComment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_addComment_Base> Callback_Session_addCommentPtr;

class Callback_Session_editComment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_editComment_Base> Callback_Session_editCommentPtr;

class Callback_Session_removeComment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_removeComment_Base> Callback_Session_removeCommentPtr;

}

namespace IceProxy
{

namespace Rpc
{

class ContentBrowser : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::ContentItemSeq& __p_items)
    {
        return next(__p_n, __p_items, 0);
    }
    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::ContentItemSeq& __p_items, const ::Ice::Context& __ctx)
    {
        return next(__p_n, __p_items, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n)
    {
        return begin_next(__p_n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx)
    {
        return begin_next(__p_n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Rpc::Callback_ContentBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_next(::Rpc::ContentItemSeq& __p_items, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::ContentItemSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_secure(bool __secure) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_twoway() const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_oneway() const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_batchOneway() const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_datagram() const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_batchDatagram() const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_compress(bool __compress) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ContentBrowser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ContentBrowser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class EngineVersionBrowser : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::EngineVersionSeq& __p_items)
    {
        return next(__p_n, __p_items, 0);
    }
    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::EngineVersionSeq& __p_items, const ::Ice::Context& __ctx)
    {
        return next(__p_n, __p_items, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n)
    {
        return begin_next(__p_n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx)
    {
        return begin_next(__p_n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Rpc::Callback_EngineVersionBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_next(::Rpc::EngineVersionSeq& __p_items, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::EngineVersionSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_secure(bool __secure) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_twoway() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_oneway() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_batchOneway() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_datagram() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_batchDatagram() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_compress(bool __compress) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ExtraBrowser : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::ExtraInfoSeq& __p_items)
    {
        return next(__p_n, __p_items, 0);
    }
    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::ExtraInfoSeq& __p_items, const ::Ice::Context& __ctx)
    {
        return next(__p_n, __p_items, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n)
    {
        return begin_next(__p_n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx)
    {
        return begin_next(__p_n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Rpc::Callback_ExtraBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_next(::Rpc::ExtraInfoSeq& __p_items, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::ExtraInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_secure(bool __secure) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_twoway() const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_oneway() const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_batchOneway() const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_datagram() const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_batchDatagram() const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_compress(bool __compress) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraBrowser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ExtraBrowser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class UserBrowser : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::UserSeq& __p_items)
    {
        return next(__p_n, __p_items, 0);
    }
    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::UserSeq& __p_items, const ::Ice::Context& __ctx)
    {
        return next(__p_n, __p_items, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n)
    {
        return begin_next(__p_n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx)
    {
        return begin_next(__p_n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Rpc::Callback_UserBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Rpc::Callback_UserBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_next(::Rpc::UserSeq& __p_items, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::UserSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_secure(bool __secure) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_twoway() const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_oneway() const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_batchOneway() const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_datagram() const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_batchDatagram() const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_compress(bool __compress) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UserBrowser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<UserBrowser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ContentSubmitter : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode setTitle(const ::std::string& __p_title)
    {
        return setTitle(__p_title, 0);
    }
    ::Rpc::ErrorCode setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx)
    {
        return setTitle(__p_title, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTitle(__p_title, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTitle(__p_title, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTitle(__p_title, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTitle(__p_title, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title)
    {
        return begin_setTitle(__p_title, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx)
    {
        return begin_setTitle(__p_title, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Rpc::Callback_ContentSubmitter_setTitlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setTitlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setTitle(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setTitle(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setPage(const ::std::string& __p_page)
    {
        return setPage(__p_page, 0);
    }
    ::Rpc::ErrorCode setPage(const ::std::string& __p_page, const ::Ice::Context& __ctx)
    {
        return setPage(__p_page, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPage(const ::std::string& __p_page, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPage(__p_page, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPage(const ::std::string& __p_page, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPage(__p_page, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPage(const ::std::string& __p_page, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPage(__p_page, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPage(const ::std::string& __p_page, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPage(__p_page, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPage(const ::std::string& __p_page, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPage(const ::std::string& __p_page)
    {
        return begin_setPage(__p_page, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPage(const ::std::string& __p_page, const ::Ice::Context& __ctx)
    {
        return begin_setPage(__p_page, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPage(const ::std::string& __p_page, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPage(__p_page, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPage(const ::std::string& __p_page, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPage(__p_page, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPage(const ::std::string& __p_page, const ::Rpc::Callback_ContentSubmitter_setPagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPage(__p_page, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPage(const ::std::string& __p_page, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setPagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPage(__p_page, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setPage(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setPage(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPage(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setCategory(const ::std::string& __p_category)
    {
        return setCategory(__p_category, 0);
    }
    ::Rpc::ErrorCode setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx)
    {
        return setCategory(__p_category, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCategory(__p_category, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCategory(__p_category, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCategory(__p_category, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCategory(__p_category, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setCategory(const ::std::string& __p_category, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category)
    {
        return begin_setCategory(__p_category, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx)
    {
        return begin_setCategory(__p_category, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Rpc::Callback_ContentSubmitter_setCategoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setCategoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setCategory(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setCategory(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setEngine(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return setEngine(__p_name, __p_version, 0);
    }
    ::Rpc::ErrorCode setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return setEngine(__p_name, __p_version, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setEngine(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEngine(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setEngine(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEngine(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_setEngine(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_setEngine(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEngine(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEngine(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_ContentSubmitter_setEnginePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEngine(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setEnginePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEngine(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setEngine(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setEngine(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEngine(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setStartup(const ::std::string& __p_startup)
    {
        return setStartup(__p_startup, 0);
    }
    ::Rpc::ErrorCode setStartup(const ::std::string& __p_startup, const ::Ice::Context& __ctx)
    {
        return setStartup(__p_startup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStartup(const ::std::string& __p_startup, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStartup(__p_startup, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStartup(const ::std::string& __p_startup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStartup(__p_startup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStartup(__p_startup, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStartup(__p_startup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setStartup(const ::std::string& __p_startup)
    {
        return begin_setStartup(__p_startup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context& __ctx)
    {
        return begin_setStartup(__p_startup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStartup(const ::std::string& __p_startup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartup(__p_startup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartup(__p_startup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStartup(const ::std::string& __p_startup, const ::Rpc::Callback_ContentSubmitter_setStartupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartup(__p_startup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setStartupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartup(__p_startup, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setStartup(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setStartup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStartup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setParentId(const ::std::string& __p_id)
    {
        return setParentId(__p_id, 0);
    }
    ::Rpc::ErrorCode setParentId(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return setParentId(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setParentId(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setParentId(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setParentId(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setParentId(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setParentId(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setParentId(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setParentId(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setParentId(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setParentId(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setParentId(const ::std::string& __p_id)
    {
        return begin_setParentId(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParentId(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_setParentId(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParentId(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParentId(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParentId(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParentId(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParentId(const ::std::string& __p_id, const ::Rpc::Callback_ContentSubmitter_setParentIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParentId(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParentId(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setParentIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParentId(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setParentId(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setParentId(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setParentId(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setVideo(const ::std::string& __p_video)
    {
        return setVideo(__p_video, 0);
    }
    ::Rpc::ErrorCode setVideo(const ::std::string& __p_video, const ::Ice::Context& __ctx)
    {
        return setVideo(__p_video, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVideo(const ::std::string& __p_video, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setVideo(__p_video, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setVideo(const ::std::string& __p_video, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVideo(__p_video, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVideo(const ::std::string& __p_video, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setVideo(__p_video, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setVideo(const ::std::string& __p_video, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVideo(__p_video, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setVideo(const ::std::string& __p_video, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setVideo(const ::std::string& __p_video)
    {
        return begin_setVideo(__p_video, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVideo(const ::std::string& __p_video, const ::Ice::Context& __ctx)
    {
        return begin_setVideo(__p_video, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVideo(const ::std::string& __p_video, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVideo(__p_video, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVideo(const ::std::string& __p_video, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVideo(__p_video, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVideo(const ::std::string& __p_video, const ::Rpc::Callback_ContentSubmitter_setVideoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVideo(__p_video, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVideo(const ::std::string& __p_video, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setVideoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVideo(__p_video, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setVideo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setVideo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVideo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setDescription(const ::std::string& __p_description)
    {
        return setDescription(__p_description, 0);
    }
    ::Rpc::ErrorCode setDescription(const ::std::string& __p_description, const ::Ice::Context& __ctx)
    {
        return setDescription(__p_description, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::std::string& __p_description, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDescription(__p_description, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::std::string& __p_description, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(__p_description, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::std::string& __p_description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDescription(__p_description, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::std::string& __p_description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(__p_description, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setDescription(const ::std::string& __p_description, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setDescription(const ::std::string& __p_description)
    {
        return begin_setDescription(__p_description, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::std::string& __p_description, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(__p_description, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::std::string& __p_description, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(__p_description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::std::string& __p_description, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(__p_description, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::std::string& __p_description, const ::Rpc::Callback_ContentSubmitter_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(__p_description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::std::string& __p_description, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(__p_description, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setDescription(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode uploadImage(::Ice::Int __p_index, ::Rpc::UploaderPrx& __p_uploader)
    {
        return uploadImage(__p_index, __p_uploader, 0);
    }
    ::Rpc::ErrorCode uploadImage(::Ice::Int __p_index, ::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context& __ctx)
    {
        return uploadImage(__p_index, __p_uploader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadImage(::Ice::Int __p_index, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadImage(__p_index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadImage(::Ice::Int __p_index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadImage(__p_index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadImage(__p_index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadImage(__p_index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadImage(::Ice::Int __p_index)
    {
        return begin_uploadImage(__p_index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context& __ctx)
    {
        return begin_uploadImage(__p_index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(::Ice::Int __p_index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(__p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(__p_index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(::Ice::Int __p_index, const ::Rpc::Callback_ContentSubmitter_uploadImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(__p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_uploadImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(__p_index, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_uploadImage(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode uploadImage(::Ice::Int, ::Rpc::UploaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadImage(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode uploadContent(::Rpc::UploaderPrx& __p_uploader)
    {
        return uploadContent(__p_uploader, 0);
    }
    ::Rpc::ErrorCode uploadContent(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context& __ctx)
    {
        return uploadContent(__p_uploader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadContent(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadContent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadContent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadContent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadContent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadContent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadContent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadContent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadContent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadContent()
    {
        return begin_uploadContent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadContent(const ::Ice::Context& __ctx)
    {
        return begin_uploadContent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadContent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadContent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadContent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadContent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadContent(const ::Rpc::Callback_ContentSubmitter_uploadContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadContent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadContent(const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_uploadContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadContent(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_uploadContent(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode uploadContent(::Rpc::UploaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadContent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel()
    {
        cancel(0);
    }
    void cancel(const ::Ice::Context& __ctx)
    {
        cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_ContentSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode finish()
    {
        return finish(0);
    }
    ::Rpc::ErrorCode finish(const ::Ice::Context& __ctx)
    {
        return finish(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finish()
    {
        return begin_finish(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx)
    {
        return begin_finish(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_ContentSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Rpc::Callback_ContentSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode finish(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_secure(bool __secure) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_twoway() const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_oneway() const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_batchOneway() const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_datagram() const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_batchDatagram() const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_compress(bool __compress) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ContentSubmitter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ContentSubmitter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class EngineVersionSubmitter : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode setSetup(const ::std::string& __p_setup)
    {
        return setSetup(__p_setup, 0);
    }
    ::Rpc::ErrorCode setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx)
    {
        return setSetup(__p_setup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSetup(__p_setup, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSetup(__p_setup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSetup(__p_setup, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSetup(__p_setup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup)
    {
        return begin_setSetup(__p_setup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx)
    {
        return begin_setSetup(__p_setup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Rpc::Callback_EngineVersionSubmitter_setSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionSubmitter_setSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setSetup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setUnSetup(const ::std::string& __p_unsetup)
    {
        return setUnSetup(__p_unsetup, 0);
    }
    ::Rpc::ErrorCode setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context& __ctx)
    {
        return setUnSetup(__p_unsetup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUnSetup(const ::std::string& __p_unsetup, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setUnSetup(__p_unsetup, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setUnSetup(const ::std::string& __p_unsetup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUnSetup(__p_unsetup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setUnSetup(__p_unsetup, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUnSetup(__p_unsetup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setUnSetup(const ::std::string& __p_unsetup)
    {
        return begin_setUnSetup(__p_unsetup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context& __ctx)
    {
        return begin_setUnSetup(__p_unsetup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUnSetup(__p_unsetup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUnSetup(__p_unsetup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUnSetup(const ::std::string& __p_unsetup, const ::Rpc::Callback_EngineVersionSubmitter_setUnSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUnSetup(__p_unsetup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionSubmitter_setUnSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUnSetup(__p_unsetup, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setUnSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setUnSetup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUnSetup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setInfo(const ::std::string& __p_info)
    {
        return setInfo(__p_info, 0);
    }
    ::Rpc::ErrorCode setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return setInfo(__p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setInfo(__p_info, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInfo(__p_info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setInfo(__p_info, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInfo(__p_info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info)
    {
        return begin_setInfo(__p_info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return begin_setInfo(__p_info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Rpc::Callback_EngineVersionSubmitter_setInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionSubmitter_setInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setInfo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode uploadEngine(::Rpc::UploaderPrx& __p_uploader)
    {
        return uploadEngine(__p_uploader, 0);
    }
    ::Rpc::ErrorCode uploadEngine(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context& __ctx)
    {
        return uploadEngine(__p_uploader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadEngine(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadEngine(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadEngine(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadEngine(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadEngine(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadEngine(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadEngine(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadEngine(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadEngine(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadEngine()
    {
        return begin_uploadEngine(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadEngine(const ::Ice::Context& __ctx)
    {
        return begin_uploadEngine(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadEngine(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngine(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadEngine(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngine(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadEngine(const ::Rpc::Callback_EngineVersionSubmitter_uploadEnginePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngine(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadEngine(const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionSubmitter_uploadEnginePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngine(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_uploadEngine(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode uploadEngine(::Rpc::UploaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadEngine(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel()
    {
        cancel(0);
    }
    void cancel(const ::Ice::Context& __ctx)
    {
        cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_EngineVersionSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode finish()
    {
        return finish(0);
    }
    ::Rpc::ErrorCode finish(const ::Ice::Context& __ctx)
    {
        return finish(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finish()
    {
        return begin_finish(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx)
    {
        return begin_finish(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_EngineVersionSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode finish(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_secure(bool __secure) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_twoway() const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_oneway() const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_batchOneway() const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_datagram() const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_batchDatagram() const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_compress(bool __compress) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionSubmitter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<EngineVersionSubmitter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ExtraSubmitter : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode setTitle(const ::std::string& __p_title)
    {
        return setTitle(__p_title, 0);
    }
    ::Rpc::ErrorCode setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx)
    {
        return setTitle(__p_title, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTitle(__p_title, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTitle(__p_title, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTitle(__p_title, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTitle(__p_title, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title)
    {
        return begin_setTitle(__p_title, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx)
    {
        return begin_setTitle(__p_title, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Rpc::Callback_ExtraSubmitter_setTitlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_setTitlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTitle(__p_title, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setTitle(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setTitle(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTitle(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setSetup(const ::std::string& __p_setup)
    {
        return setSetup(__p_setup, 0);
    }
    ::Rpc::ErrorCode setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx)
    {
        return setSetup(__p_setup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSetup(__p_setup, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSetup(__p_setup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSetup(__p_setup, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSetup(__p_setup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup)
    {
        return begin_setSetup(__p_setup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx)
    {
        return begin_setSetup(__p_setup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Rpc::Callback_ExtraSubmitter_setSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_setSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSetup(__p_setup, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setSetup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSetup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setCategory(const ::std::string& __p_category)
    {
        return setCategory(__p_category, 0);
    }
    ::Rpc::ErrorCode setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx)
    {
        return setCategory(__p_category, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCategory(__p_category, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCategory(__p_category, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCategory(__p_category, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCategory(__p_category, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setCategory(const ::std::string& __p_category, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category)
    {
        return begin_setCategory(__p_category, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx)
    {
        return begin_setCategory(__p_category, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Rpc::Callback_ExtraSubmitter_setCategoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string& __p_category, const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_setCategoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCategory(__p_category, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setCategory(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setCategory(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCategory(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setInfo(const ::std::string& __p_info)
    {
        return setInfo(__p_info, 0);
    }
    ::Rpc::ErrorCode setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return setInfo(__p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setInfo(__p_info, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInfo(__p_info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setInfo(__p_info, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInfo(__p_info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info)
    {
        return begin_setInfo(__p_info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return begin_setInfo(__p_info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Rpc::Callback_ExtraSubmitter_setInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_setInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setInfo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode uploadImage(::Rpc::UploaderPrx& __p_uploader)
    {
        return uploadImage(__p_uploader, 0);
    }
    ::Rpc::ErrorCode uploadImage(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context& __ctx)
    {
        return uploadImage(__p_uploader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadImage(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadImage(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadImage(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadImage(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadImage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadImage(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadImage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadImage(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadImage(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadImage()
    {
        return begin_uploadImage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(const ::Ice::Context& __ctx)
    {
        return begin_uploadImage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(const ::Rpc::Callback_ExtraSubmitter_uploadImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadImage(const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_uploadImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadImage(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_uploadImage(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode uploadImage(::Rpc::UploaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadImage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode uploadExtra(::Rpc::UploaderPrx& __p_uploader)
    {
        return uploadExtra(__p_uploader, 0);
    }
    ::Rpc::ErrorCode uploadExtra(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context& __ctx)
    {
        return uploadExtra(__p_uploader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadExtra(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadExtra(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadExtra(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadExtra(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadExtra(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadExtra(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadExtra(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadExtra(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadExtra(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadExtra()
    {
        return begin_uploadExtra(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadExtra(const ::Ice::Context& __ctx)
    {
        return begin_uploadExtra(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadExtra(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadExtra(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadExtra(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadExtra(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadExtra(const ::Rpc::Callback_ExtraSubmitter_uploadExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadExtra(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadExtra(const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_uploadExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadExtra(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_uploadExtra(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode uploadExtra(::Rpc::UploaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadExtra(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel()
    {
        cancel(0);
    }
    void cancel(const ::Ice::Context& __ctx)
    {
        cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_ExtraSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode finish()
    {
        return finish(0);
    }
    ::Rpc::ErrorCode finish(const ::Ice::Context& __ctx)
    {
        return finish(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finish()
    {
        return begin_finish(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx)
    {
        return begin_finish(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_ExtraSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Rpc::Callback_ExtraSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode finish(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_secure(bool __secure) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_twoway() const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_oneway() const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_batchOneway() const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_datagram() const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_batchDatagram() const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_compress(bool __compress) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ExtraSubmitter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ExtraSubmitter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ClientBrowser : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::ClientInfoSeq& __p_items)
    {
        return next(__p_n, __p_items, 0);
    }
    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::ClientInfoSeq& __p_items, const ::Ice::Context& __ctx)
    {
        return next(__p_n, __p_items, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n)
    {
        return begin_next(__p_n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx)
    {
        return begin_next(__p_n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Rpc::Callback_ClientBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Rpc::Callback_ClientBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_next(::Rpc::ClientInfoSeq& __p_items, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::ClientInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_secure(bool __secure) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_twoway() const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_oneway() const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_batchOneway() const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_datagram() const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_batchDatagram() const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_compress(bool __compress) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientBrowser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ClientBrowser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ClientSubmitter : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode setInfo(const ::std::string& __p_info)
    {
        return setInfo(__p_info, 0);
    }
    ::Rpc::ErrorCode setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return setInfo(__p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setInfo(__p_info, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInfo(__p_info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setInfo(__p_info, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInfo(__p_info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info)
    {
        return begin_setInfo(__p_info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return begin_setInfo(__p_info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Rpc::Callback_ClientSubmitter_setInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Rpc::Callback_ClientSubmitter_setInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInfo(__p_info, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setInfo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode uploadClient(::Rpc::UploaderPrx& __p_uploader)
    {
        return uploadClient(__p_uploader, 0);
    }
    ::Rpc::ErrorCode uploadClient(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context& __ctx)
    {
        return uploadClient(__p_uploader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadClient(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadClient(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadClient(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadClient(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadClient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadClient(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadClient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadClient(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadClient(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadClient()
    {
        return begin_uploadClient(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadClient(const ::Ice::Context& __ctx)
    {
        return begin_uploadClient(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadClient(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadClient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadClient(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadClient(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadClient(const ::Rpc::Callback_ClientSubmitter_uploadClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadClient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadClient(const ::Ice::Context& __ctx, const ::Rpc::Callback_ClientSubmitter_uploadClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadClient(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_uploadClient(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode uploadClient(::Rpc::UploaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadClient(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel()
    {
        cancel(0);
    }
    void cancel(const ::Ice::Context& __ctx)
    {
        cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_ClientSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Rpc::Callback_ClientSubmitter_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode finish()
    {
        return finish(0);
    }
    ::Rpc::ErrorCode finish(const ::Ice::Context& __ctx)
    {
        return finish(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finish()
    {
        return begin_finish(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx)
    {
        return begin_finish(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_ClientSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Rpc::Callback_ClientSubmitter_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode finish(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_secure(bool __secure) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_twoway() const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_oneway() const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_batchOneway() const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_datagram() const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_batchDatagram() const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_compress(bool __compress) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientSubmitter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ClientSubmitter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CommentBrowser : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::CommentSeq& __p_items)
    {
        return next(__p_n, __p_items, 0);
    }
    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::CommentSeq& __p_items, const ::Ice::Context& __ctx)
    {
        return next(__p_n, __p_items, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::CommentSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::CommentSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::CommentSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n)
    {
        return begin_next(__p_n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx)
    {
        return begin_next(__p_n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Rpc::Callback_CommentBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Rpc::Callback_CommentBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_next(::Rpc::CommentSeq& __p_items, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::CommentSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_secure(bool __secure) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_twoway() const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_oneway() const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_batchOneway() const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_datagram() const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_batchDatagram() const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_compress(bool __compress) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CommentBrowser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CommentBrowser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Session : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    void refresh()
    {
        refresh(0);
    }
    void refresh(const ::Ice::Context& __ctx)
    {
        refresh(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_refresh()
    {
        return begin_refresh(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx)
    {
        return begin_refresh(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Rpc::Callback_Session_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    void end_refresh(const ::Ice::AsyncResultPtr&);
    
private:

    void refresh(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getCurrentUser(::std::string& __p_user)
    {
        return getCurrentUser(__p_user, 0);
    }
    ::Rpc::ErrorCode getCurrentUser(::std::string& __p_user, const ::Ice::Context& __ctx)
    {
        return getCurrentUser(__p_user, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCurrentUser(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurrentUser(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentUser(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurrentUser(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentUser(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurrentUser(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentUser(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurrentUser(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCurrentUser(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCurrentUser()
    {
        return begin_getCurrentUser(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUser(const ::Ice::Context& __ctx)
    {
        return begin_getCurrentUser(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUser(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUser(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUser(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUser(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUser(const ::Rpc::Callback_Session_getCurrentUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUser(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUser(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getCurrentUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUser(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getCurrentUser(::std::string& __p_user, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getCurrentUser(::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCurrentUser(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getCurrentUserGroup(::std::string& __p_group)
    {
        return getCurrentUserGroup(__p_group, 0);
    }
    ::Rpc::ErrorCode getCurrentUserGroup(::std::string& __p_group, const ::Ice::Context& __ctx)
    {
        return getCurrentUserGroup(__p_group, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCurrentUserGroup(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurrentUserGroup(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentUserGroup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurrentUserGroup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentUserGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurrentUserGroup(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentUserGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurrentUserGroup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCurrentUserGroup(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCurrentUserGroup()
    {
        return begin_getCurrentUserGroup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUserGroup(const ::Ice::Context& __ctx)
    {
        return begin_getCurrentUserGroup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUserGroup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUserGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUserGroup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUserGroup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUserGroup(const ::Rpc::Callback_Session_getCurrentUserGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUserGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentUserGroup(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getCurrentUserGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentUserGroup(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getCurrentUserGroup(::std::string& __p_group, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getCurrentUserGroup(::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCurrentUserGroup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setPages(const ::Rpc::StringSeq& __p_pages)
    {
        return setPages(__p_pages, 0);
    }
    ::Rpc::ErrorCode setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context& __ctx)
    {
        return setPages(__p_pages, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPages(__p_pages, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPages(__p_pages, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPages(__p_pages, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPages(__p_pages, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPages(const ::Rpc::StringSeq& __p_pages)
    {
        return begin_setPages(__p_pages, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context& __ctx)
    {
        return begin_setPages(__p_pages, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPages(__p_pages, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPages(__p_pages, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Rpc::Callback_Session_setPagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPages(__p_pages, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_setPagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPages(__p_pages, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setPages(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setPages(const ::Rpc::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPages(const ::Rpc::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getPages(::Rpc::StringSeq& __p_pages)
    {
        return getPages(__p_pages, 0);
    }
    ::Rpc::ErrorCode getPages(::Rpc::StringSeq& __p_pages, const ::Ice::Context& __ctx)
    {
        return getPages(__p_pages, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPages(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPages(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPages(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPages(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPages(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPages(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPages(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPages(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPages()
    {
        return begin_getPages(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPages(const ::Ice::Context& __ctx)
    {
        return begin_getPages(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPages(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPages(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPages(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPages(const ::Rpc::Callback_Session_getPagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPages(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPages(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getPagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPages(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getPages(::Rpc::StringSeq& __p_pages, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getPages(::Rpc::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPages(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setContentCategories(const ::Rpc::StringSeq& __p_categories)
    {
        return setContentCategories(__p_categories, 0);
    }
    ::Rpc::ErrorCode setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx)
    {
        return setContentCategories(__p_categories, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setContentCategories(__p_categories, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setContentCategories(__p_categories, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setContentCategories(__p_categories, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setContentCategories(__p_categories, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setContentCategories(const ::Rpc::StringSeq& __p_categories)
    {
        return begin_setContentCategories(__p_categories, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx)
    {
        return begin_setContentCategories(__p_categories, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContentCategories(__p_categories, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContentCategories(__p_categories, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Rpc::Callback_Session_setContentCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContentCategories(__p_categories, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setContentCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_setContentCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContentCategories(__p_categories, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setContentCategories(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setContentCategories(const ::Rpc::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setContentCategories(const ::Rpc::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getContentCategories(::Rpc::StringSeq& __p_categories)
    {
        return getContentCategories(__p_categories, 0);
    }
    ::Rpc::ErrorCode getContentCategories(::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx)
    {
        return getContentCategories(__p_categories, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContentCategories(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentCategories(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentCategories(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentCategories(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContentCategories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentCategories(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentCategories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentCategories(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContentCategories(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContentCategories()
    {
        return begin_getContentCategories(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentCategories(const ::Ice::Context& __ctx)
    {
        return begin_getContentCategories(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentCategories(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentCategories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentCategories(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentCategories(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentCategories(const ::Rpc::Callback_Session_getContentCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentCategories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentCategories(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getContentCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentCategories(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getContentCategories(::Rpc::StringSeq& __p_categories, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getContentCategories(::Rpc::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContentCategories(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setExtraCategories(const ::Rpc::StringSeq& __p_categories)
    {
        return setExtraCategories(__p_categories, 0);
    }
    ::Rpc::ErrorCode setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx)
    {
        return setExtraCategories(__p_categories, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setExtraCategories(__p_categories, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExtraCategories(__p_categories, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setExtraCategories(__p_categories, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExtraCategories(__p_categories, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories)
    {
        return begin_setExtraCategories(__p_categories, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx)
    {
        return begin_setExtraCategories(__p_categories, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExtraCategories(__p_categories, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExtraCategories(__p_categories, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Rpc::Callback_Session_setExtraCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExtraCategories(__p_categories, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExtraCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_setExtraCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExtraCategories(__p_categories, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setExtraCategories(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setExtraCategories(const ::Rpc::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExtraCategories(const ::Rpc::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getExtraCategories(::Rpc::StringSeq& __p_categories)
    {
        return getExtraCategories(__p_categories, 0);
    }
    ::Rpc::ErrorCode getExtraCategories(::Rpc::StringSeq& __p_categories, const ::Ice::Context& __ctx)
    {
        return getExtraCategories(__p_categories, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExtraCategories(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExtraCategories(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExtraCategories(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExtraCategories(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExtraCategories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExtraCategories(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExtraCategories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExtraCategories(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExtraCategories(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExtraCategories()
    {
        return begin_getExtraCategories(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExtraCategories(const ::Ice::Context& __ctx)
    {
        return begin_getExtraCategories(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExtraCategories(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraCategories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExtraCategories(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraCategories(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExtraCategories(const ::Rpc::Callback_Session_getExtraCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraCategories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExtraCategories(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getExtraCategoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraCategories(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getExtraCategories(::Rpc::StringSeq& __p_categories, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getExtraCategories(::Rpc::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExtraCategories(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, ::Rpc::ContentBrowserPrx& __p_browser)
    {
        return browseContent(__p_page, __p_category, __p_search, __p_browser, 0);
    }
    ::Rpc::ErrorCode browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, ::Rpc::ContentBrowserPrx& __p_browser, const ::Ice::Context& __ctx)
    {
        return browseContent(__p_page, __p_category, __p_search, __p_browser, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseContent(__p_page, __p_category, __p_search, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseContent(__p_page, __p_category, __p_search, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseContent(__p_page, __p_category, __p_search, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseContent(__p_page, __p_category, __p_search, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search)
    {
        return begin_browseContent(__p_page, __p_category, __p_search, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx)
    {
        return begin_browseContent(__p_page, __p_category, __p_search, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseContent(__p_page, __p_category, __p_search, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseContent(__p_page, __p_category, __p_search, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Rpc::Callback_Session_browseContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseContent(__p_page, __p_category, __p_search, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_browseContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseContent(__p_page, __p_category, __p_search, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_browseContent(::Rpc::ContentBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode browseContent(const ::std::string&, const ::std::string&, const ::std::string&, ::Rpc::ContentBrowserPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_browseContent(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getContentInfo(const ::std::string& __p_id, ::Rpc::ContentInfo& __p_info)
    {
        return getContentInfo(__p_id, __p_info, 0);
    }
    ::Rpc::ErrorCode getContentInfo(const ::std::string& __p_id, ::Rpc::ContentInfo& __p_info, const ::Ice::Context& __ctx)
    {
        return getContentInfo(__p_id, __p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContentInfo(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentInfo(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentInfo(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentInfo(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContentInfo(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContentInfo(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContentInfo(const ::std::string& __p_id)
    {
        return begin_getContentInfo(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_getContentInfo(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContentInfo(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentInfo(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentInfo(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentInfo(const ::std::string& __p_id, const ::Rpc::Callback_Session_getContentInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentInfo(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getContentInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContentInfo(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getContentInfo(::Rpc::ContentInfo& __p_info, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getContentInfo(const ::std::string&, ::Rpc::ContentInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContentInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, ::Rpc::DownloaderPrx& __p_downloader)
    {
        return downloadContentImage(__p_id, __p_index, __p_downloader, 0);
    }
    ::Rpc::ErrorCode downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context& __ctx)
    {
        return downloadContentImage(__p_id, __p_index, __p_downloader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadContentImage(__p_id, __p_index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadContentImage(__p_id, __p_index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadContentImage(__p_id, __p_index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadContentImage(__p_id, __p_index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index)
    {
        return begin_downloadContentImage(__p_id, __p_index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context& __ctx)
    {
        return begin_downloadContentImage(__p_id, __p_index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContentImage(__p_id, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContentImage(__p_id, __p_index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Rpc::Callback_Session_downloadContentImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContentImage(__p_id, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_downloadContentImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContentImage(__p_id, __p_index, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_downloadContentImage(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode downloadContentImage(const ::std::string&, ::Ice::Int, ::Rpc::DownloaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_downloadContentImage(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode downloadContent(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader)
    {
        return downloadContent(__p_id, __p_downloader, 0);
    }
    ::Rpc::ErrorCode downloadContent(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context& __ctx)
    {
        return downloadContent(__p_id, __p_downloader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_downloadContent(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadContent(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadContent(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadContent(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadContent(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadContent(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_downloadContent(const ::std::string& __p_id)
    {
        return begin_downloadContent(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_downloadContent(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadContent(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContent(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContent(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadContent(const ::std::string& __p_id, const ::Rpc::Callback_Session_downloadContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContent(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_downloadContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadContent(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_downloadContent(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode downloadContent(const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_downloadContent(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode submitContent(::Rpc::ContentSubmitterPrx& __p_submitter)
    {
        return submitContent(__p_submitter, 0);
    }
    ::Rpc::ErrorCode submitContent(::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return submitContent(__p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_submitContent(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitContent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitContent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitContent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submitContent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitContent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitContent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitContent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_submitContent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_submitContent()
    {
        return begin_submitContent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitContent(const ::Ice::Context& __ctx)
    {
        return begin_submitContent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitContent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitContent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitContent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitContent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitContent(const ::Rpc::Callback_Session_submitContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitContent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitContent(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_submitContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitContent(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_submitContent(::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode submitContent(::Rpc::ContentSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_submitContent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode updateContent(const ::std::string& __p_id, ::Rpc::ContentSubmitterPrx& __p_submitter)
    {
        return updateContent(__p_id, __p_submitter, 0);
    }
    ::Rpc::ErrorCode updateContent(const ::std::string& __p_id, ::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return updateContent(__p_id, __p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateContent(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateContent(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateContent(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateContent(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateContent(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateContent(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateContent(const ::std::string& __p_id)
    {
        return begin_updateContent(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateContent(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_updateContent(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateContent(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContent(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContent(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateContent(const ::std::string& __p_id, const ::Rpc::Callback_Session_updateContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContent(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_updateContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContent(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_updateContent(::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode updateContent(const ::std::string&, ::Rpc::ContentSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateContent(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode removeContent(const ::std::string& __p_id)
    {
        return removeContent(__p_id, 0);
    }
    ::Rpc::ErrorCode removeContent(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return removeContent(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeContent(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeContent(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeContent(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeContent(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeContent(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeContent(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeContent(const ::std::string& __p_id)
    {
        return begin_removeContent(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeContent(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_removeContent(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeContent(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeContent(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeContent(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeContent(const ::std::string& __p_id, const ::Rpc::Callback_Session_removeContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeContent(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeContent(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_removeContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeContent(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_removeContent(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode removeContent(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeContent(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode browseEngineVersions(bool __p_all, ::Rpc::EngineVersionBrowserPrx& __p_browser)
    {
        return browseEngineVersions(__p_all, __p_browser, 0);
    }
    ::Rpc::ErrorCode browseEngineVersions(bool __p_all, ::Rpc::EngineVersionBrowserPrx& __p_browser, const ::Ice::Context& __ctx)
    {
        return browseEngineVersions(__p_all, __p_browser, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(bool __p_all, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseEngineVersions(__p_all, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(bool __p_all, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseEngineVersions(__p_all, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(bool __p_all, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseEngineVersions(__p_all, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(bool __p_all, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseEngineVersions(__p_all, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_browseEngineVersions(bool __p_all, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_browseEngineVersions(bool __p_all)
    {
        return begin_browseEngineVersions(__p_all, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(bool __p_all, const ::Ice::Context& __ctx)
    {
        return begin_browseEngineVersions(__p_all, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(bool __p_all, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(__p_all, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(bool __p_all, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(__p_all, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(bool __p_all, const ::Rpc::Callback_Session_browseEngineVersionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(__p_all, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(bool __p_all, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_browseEngineVersionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(__p_all, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_browseEngineVersions(::Rpc::EngineVersionBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode browseEngineVersions(bool, ::Rpc::EngineVersionBrowserPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_browseEngineVersions(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::DownloaderPrx& __p_downloader)
    {
        return downloadEngineVersion(__p_name, __p_version, __p_downloader, 0);
    }
    ::Rpc::ErrorCode downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context& __ctx)
    {
        return downloadEngineVersion(__p_name, __p_version, __p_downloader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadEngineVersion(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadEngineVersion(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_Session_downloadEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_downloadEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_downloadEngineVersion(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode downloadEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return removeEngineVersion(__p_name, __p_version, 0);
    }
    ::Rpc::ErrorCode removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return removeEngineVersion(__p_name, __p_version, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeEngineVersion(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeEngineVersion(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_Session_removeEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_removeEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_removeEngineVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode removeEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionSubmitterPrx& __p_submitter)
    {
        return submitEngineVersion(__p_name, __p_version, __p_submitter, 0);
    }
    ::Rpc::ErrorCode submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return submitEngineVersion(__p_name, __p_version, __p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitEngineVersion(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitEngineVersion(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitEngineVersion(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitEngineVersion(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_submitEngineVersion(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_submitEngineVersion(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_Session_submitEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_submitEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_submitEngineVersion(::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode submitEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::EngineVersionSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_submitEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionSubmitterPrx& __p_submitter)
    {
        return updateEngineVersion(__p_name, __p_version, __p_submitter, 0);
    }
    ::Rpc::ErrorCode updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return updateEngineVersion(__p_name, __p_version, __p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateEngineVersion(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateEngineVersion(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateEngineVersion(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateEngineVersion(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_updateEngineVersion(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_updateEngineVersion(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_Session_updateEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_updateEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_updateEngineVersion(::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode updateEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::EngineVersionSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionInfo& __p_engineVersion)
    {
        return getEngineVersion(__p_name, __p_version, __p_engineVersion, 0);
    }
    ::Rpc::ErrorCode getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionInfo& __p_engineVersion, const ::Ice::Context& __ctx)
    {
        return getEngineVersion(__p_name, __p_version, __p_engineVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEngineVersion(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEngineVersion(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEngineVersion(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEngineVersion(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_getEngineVersion(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_getEngineVersion(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_Session_getEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getEngineVersion(::Rpc::EngineVersionInfo& __p_engineVersion, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::EngineVersionInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, ::Rpc::ExtraBrowserPrx& __p_browser)
    {
        return browseExtra(__p_category, __p_search, __p_browser, 0);
    }
    ::Rpc::ErrorCode browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, ::Rpc::ExtraBrowserPrx& __p_browser, const ::Ice::Context& __ctx)
    {
        return browseExtra(__p_category, __p_search, __p_browser, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseExtra(__p_category, __p_search, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseExtra(__p_category, __p_search, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseExtra(__p_category, __p_search, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseExtra(__p_category, __p_search, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search)
    {
        return begin_browseExtra(__p_category, __p_search, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx)
    {
        return begin_browseExtra(__p_category, __p_search, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseExtra(__p_category, __p_search, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseExtra(__p_category, __p_search, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Rpc::Callback_Session_browseExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseExtra(__p_category, __p_search, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseExtra(const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_browseExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseExtra(__p_category, __p_search, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_browseExtra(::Rpc::ExtraBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode browseExtra(const ::std::string&, const ::std::string&, ::Rpc::ExtraBrowserPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_browseExtra(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getExtraInfo(const ::std::string& __p_id, ::Rpc::ExtraInfo& __p_info)
    {
        return getExtraInfo(__p_id, __p_info, 0);
    }
    ::Rpc::ErrorCode getExtraInfo(const ::std::string& __p_id, ::Rpc::ExtraInfo& __p_info, const ::Ice::Context& __ctx)
    {
        return getExtraInfo(__p_id, __p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExtraInfo(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExtraInfo(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExtraInfo(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExtraInfo(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExtraInfo(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExtraInfo(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExtraInfo(const ::std::string& __p_id)
    {
        return begin_getExtraInfo(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_getExtraInfo(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraInfo(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraInfo(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExtraInfo(const ::std::string& __p_id, const ::Rpc::Callback_Session_getExtraInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraInfo(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getExtraInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExtraInfo(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getExtraInfo(::Rpc::ExtraInfo& __p_info, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getExtraInfo(const ::std::string&, ::Rpc::ExtraInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExtraInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode downloadExtraImage(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader)
    {
        return downloadExtraImage(__p_id, __p_downloader, 0);
    }
    ::Rpc::ErrorCode downloadExtraImage(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context& __ctx)
    {
        return downloadExtraImage(__p_id, __p_downloader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_downloadExtraImage(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadExtraImage(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadExtraImage(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadExtraImage(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_downloadExtraImage(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadExtraImage(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadExtraImage(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadExtraImage(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_downloadExtraImage(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_downloadExtraImage(const ::std::string& __p_id)
    {
        return begin_downloadExtraImage(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadExtraImage(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_downloadExtraImage(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadExtraImage(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtraImage(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadExtraImage(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtraImage(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadExtraImage(const ::std::string& __p_id, const ::Rpc::Callback_Session_downloadExtraImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtraImage(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadExtraImage(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_downloadExtraImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtraImage(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_downloadExtraImage(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode downloadExtraImage(const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_downloadExtraImage(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode downloadExtra(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader)
    {
        return downloadExtra(__p_id, __p_downloader, 0);
    }
    ::Rpc::ErrorCode downloadExtra(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context& __ctx)
    {
        return downloadExtra(__p_id, __p_downloader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_downloadExtra(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadExtra(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadExtra(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadExtra(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadExtra(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadExtra(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_downloadExtra(const ::std::string& __p_id)
    {
        return begin_downloadExtra(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_downloadExtra(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadExtra(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtra(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtra(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadExtra(const ::std::string& __p_id, const ::Rpc::Callback_Session_downloadExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtra(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_downloadExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadExtra(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_downloadExtra(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode downloadExtra(const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_downloadExtra(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode submitExtra(::Rpc::ExtraSubmitterPrx& __p_submitter)
    {
        return submitExtra(__p_submitter, 0);
    }
    ::Rpc::ErrorCode submitExtra(::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return submitExtra(__p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_submitExtra(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitExtra(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitExtra(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitExtra(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submitExtra(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitExtra(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitExtra(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitExtra(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_submitExtra(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_submitExtra()
    {
        return begin_submitExtra(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitExtra(const ::Ice::Context& __ctx)
    {
        return begin_submitExtra(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitExtra(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitExtra(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitExtra(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitExtra(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitExtra(const ::Rpc::Callback_Session_submitExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitExtra(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitExtra(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_submitExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitExtra(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_submitExtra(::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode submitExtra(::Rpc::ExtraSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_submitExtra(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode updateExtra(const ::std::string& __p_id, ::Rpc::ExtraSubmitterPrx& __p_submitter)
    {
        return updateExtra(__p_id, __p_submitter, 0);
    }
    ::Rpc::ErrorCode updateExtra(const ::std::string& __p_id, ::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return updateExtra(__p_id, __p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateExtra(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateExtra(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateExtra(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateExtra(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateExtra(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateExtra(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateExtra(const ::std::string& __p_id)
    {
        return begin_updateExtra(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_updateExtra(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateExtra(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExtra(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExtra(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExtra(const ::std::string& __p_id, const ::Rpc::Callback_Session_updateExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExtra(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_updateExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateExtra(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_updateExtra(::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode updateExtra(const ::std::string&, ::Rpc::ExtraSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateExtra(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode removeExtra(const ::std::string& __p_id)
    {
        return removeExtra(__p_id, 0);
    }
    ::Rpc::ErrorCode removeExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return removeExtra(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeExtra(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeExtra(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeExtra(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeExtra(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeExtra(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeExtra(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeExtra(const ::std::string& __p_id)
    {
        return begin_removeExtra(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_removeExtra(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeExtra(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExtra(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExtra(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExtra(const ::std::string& __p_id, const ::Rpc::Callback_Session_removeExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExtra(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_removeExtraPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExtra(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_removeExtra(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode removeExtra(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeExtra(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode browseClient(::Rpc::ClientBrowserPrx& __p_browser)
    {
        return browseClient(__p_browser, 0);
    }
    ::Rpc::ErrorCode browseClient(::Rpc::ClientBrowserPrx& __p_browser, const ::Ice::Context& __ctx)
    {
        return browseClient(__p_browser, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_browseClient(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseClient(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseClient(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseClient(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_browseClient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseClient(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseClient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseClient(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_browseClient(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_browseClient()
    {
        return begin_browseClient(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseClient(const ::Ice::Context& __ctx)
    {
        return begin_browseClient(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseClient(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseClient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseClient(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseClient(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseClient(const ::Rpc::Callback_Session_browseClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseClient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseClient(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_browseClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseClient(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_browseClient(::Rpc::ClientBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode browseClient(::Rpc::ClientBrowserPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_browseClient(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode getClientInfo(const ::std::string& __p_version, ::Rpc::ClientInfo& __p_info)
    {
        return getClientInfo(__p_version, __p_info, 0);
    }
    ::Rpc::ErrorCode getClientInfo(const ::std::string& __p_version, ::Rpc::ClientInfo& __p_info, const ::Ice::Context& __ctx)
    {
        return getClientInfo(__p_version, __p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getClientInfo(const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getClientInfo(__p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getClientInfo(const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getClientInfo(__p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getClientInfo(__p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getClientInfo(__p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getClientInfo(const ::std::string& __p_version)
    {
        return begin_getClientInfo(__p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_getClientInfo(__p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClientInfo(const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClientInfo(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClientInfo(__p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClientInfo(const ::std::string& __p_version, const ::Rpc::Callback_Session_getClientInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClientInfo(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_getClientInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClientInfo(__p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getClientInfo(::Rpc::ClientInfo& __p_info, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getClientInfo(const ::std::string&, ::Rpc::ClientInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getClientInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode submitClient(const ::std::string& __p_version, ::Rpc::ClientSubmitterPrx& __p_submitter)
    {
        return submitClient(__p_version, __p_submitter, 0);
    }
    ::Rpc::ErrorCode submitClient(const ::std::string& __p_version, ::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return submitClient(__p_version, __p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_submitClient(const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitClient(__p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitClient(const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitClient(__p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submitClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submitClient(__p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submitClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitClient(__p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_submitClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_submitClient(const ::std::string& __p_version)
    {
        return begin_submitClient(__p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitClient(const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_submitClient(__p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitClient(const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitClient(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitClient(__p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitClient(const ::std::string& __p_version, const ::Rpc::Callback_Session_submitClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitClient(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_submitClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitClient(__p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_submitClient(::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode submitClient(const ::std::string&, ::Rpc::ClientSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_submitClient(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode updateClient(const ::std::string& __p_version, ::Rpc::ClientSubmitterPrx& __p_submitter)
    {
        return updateClient(__p_version, __p_submitter, 0);
    }
    ::Rpc::ErrorCode updateClient(const ::std::string& __p_version, ::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::Context& __ctx)
    {
        return updateClient(__p_version, __p_submitter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateClient(const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateClient(__p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateClient(const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateClient(__p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateClient(__p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateClient(__p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateClient(const ::std::string& __p_version)
    {
        return begin_updateClient(__p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateClient(const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_updateClient(__p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateClient(const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateClient(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateClient(__p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateClient(const ::std::string& __p_version, const ::Rpc::Callback_Session_updateClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateClient(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_updateClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateClient(__p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_updateClient(::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode updateClient(const ::std::string&, ::Rpc::ClientSubmitterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateClient(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode removeClient(const ::std::string& __p_version)
    {
        return removeClient(__p_version, 0);
    }
    ::Rpc::ErrorCode removeClient(const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return removeClient(__p_version, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeClient(const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeClient(__p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeClient(const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeClient(__p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeClient(__p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeClient(__p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeClient(const ::std::string& __p_version)
    {
        return begin_removeClient(__p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeClient(const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_removeClient(__p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeClient(const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeClient(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeClient(__p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeClient(const ::std::string& __p_version, const ::Rpc::Callback_Session_removeClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeClient(__p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeClient(const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_removeClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeClient(__p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_removeClient(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode removeClient(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeClient(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode browseUsers(::Rpc::UserBrowserPrx& __p_browser)
    {
        return browseUsers(__p_browser, 0);
    }
    ::Rpc::ErrorCode browseUsers(::Rpc::UserBrowserPrx& __p_browser, const ::Ice::Context& __ctx)
    {
        return browseUsers(__p_browser, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_browseUsers(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseUsers(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseUsers(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseUsers(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_browseUsers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseUsers(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseUsers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseUsers(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_browseUsers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_browseUsers()
    {
        return begin_browseUsers(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseUsers(const ::Ice::Context& __ctx)
    {
        return begin_browseUsers(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseUsers(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseUsers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseUsers(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseUsers(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseUsers(const ::Rpc::Callback_Session_browseUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseUsers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseUsers(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_browseUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseUsers(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_browseUsers(::Rpc::UserBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode browseUsers(::Rpc::UserBrowserPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_browseUsers(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group)
    {
        return setUserGroup(__p_username, __p_group, 0);
    }
    ::Rpc::ErrorCode setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context& __ctx)
    {
        return setUserGroup(__p_username, __p_group, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setUserGroup(__p_username, __p_group, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserGroup(__p_username, __p_group, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setUserGroup(__p_username, __p_group, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserGroup(__p_username, __p_group, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group)
    {
        return begin_setUserGroup(__p_username, __p_group, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context& __ctx)
    {
        return begin_setUserGroup(__p_username, __p_group, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserGroup(__p_username, __p_group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserGroup(__p_username, __p_group, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Rpc::Callback_Session_setUserGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserGroup(__p_username, __p_group, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_setUserGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserGroup(__p_username, __p_group, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_setUserGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode setUserGroup(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUserGroup(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode removeUser(const ::std::string& __p_username)
    {
        return removeUser(__p_username, 0);
    }
    ::Rpc::ErrorCode removeUser(const ::std::string& __p_username, const ::Ice::Context& __ctx)
    {
        return removeUser(__p_username, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeUser(const ::std::string& __p_username, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeUser(__p_username, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeUser(const ::std::string& __p_username, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeUser(__p_username, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeUser(const ::std::string& __p_username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeUser(__p_username, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeUser(const ::std::string& __p_username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeUser(__p_username, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeUser(const ::std::string& __p_username, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeUser(const ::std::string& __p_username)
    {
        return begin_removeUser(__p_username, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::std::string& __p_username, const ::Ice::Context& __ctx)
    {
        return begin_removeUser(__p_username, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::std::string& __p_username, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(__p_username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::std::string& __p_username, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(__p_username, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::std::string& __p_username, const ::Rpc::Callback_Session_removeUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(__p_username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::std::string& __p_username, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_removeUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeUser(__p_username, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_removeUser(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode removeUser(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeUser(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, ::Rpc::CommentBrowserPrx& __p_browser)
    {
        return browseComment(__p_targetId, __p_user, __p_browser, 0);
    }
    ::Rpc::ErrorCode browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, ::Rpc::CommentBrowserPrx& __p_browser, const ::Ice::Context& __ctx)
    {
        return browseComment(__p_targetId, __p_user, __p_browser, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseComment(__p_targetId, __p_user, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseComment(__p_targetId, __p_user, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseComment(__p_targetId, __p_user, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseComment(__p_targetId, __p_user, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user)
    {
        return begin_browseComment(__p_targetId, __p_user, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Ice::Context& __ctx)
    {
        return begin_browseComment(__p_targetId, __p_user, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseComment(__p_targetId, __p_user, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseComment(__p_targetId, __p_user, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Rpc::Callback_Session_browseCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseComment(__p_targetId, __p_user, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseComment(const ::std::string& __p_targetId, const ::std::string& __p_user, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_browseCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseComment(__p_targetId, __p_user, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_browseComment(::Rpc::CommentBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode browseComment(const ::std::string&, const ::std::string&, ::Rpc::CommentBrowserPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_browseComment(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment)
    {
        return addComment(__p_targetId, __p_comment, 0);
    }
    ::Rpc::ErrorCode addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::Context& __ctx)
    {
        return addComment(__p_targetId, __p_comment, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addComment(__p_targetId, __p_comment, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addComment(__p_targetId, __p_comment, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addComment(__p_targetId, __p_comment, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addComment(__p_targetId, __p_comment, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment)
    {
        return begin_addComment(__p_targetId, __p_comment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::Context& __ctx)
    {
        return begin_addComment(__p_targetId, __p_comment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(__p_targetId, __p_comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(__p_targetId, __p_comment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Rpc::Callback_Session_addCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(__p_targetId, __p_comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addComment(const ::std::string& __p_targetId, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_addCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addComment(__p_targetId, __p_comment, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_addComment(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode addComment(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addComment(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode editComment(const ::std::string& __p_id, const ::std::string& __p_comment)
    {
        return editComment(__p_id, __p_comment, 0);
    }
    ::Rpc::ErrorCode editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::Context& __ctx)
    {
        return editComment(__p_id, __p_comment, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_editComment(__p_id, __p_comment, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_editComment(__p_id, __p_comment, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_editComment(__p_id, __p_comment, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_editComment(__p_id, __p_comment, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment)
    {
        return begin_editComment(__p_id, __p_comment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::Context& __ctx)
    {
        return begin_editComment(__p_id, __p_comment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editComment(__p_id, __p_comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editComment(__p_id, __p_comment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Rpc::Callback_Session_editCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editComment(__p_id, __p_comment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_editComment(const ::std::string& __p_id, const ::std::string& __p_comment, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_editCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_editComment(__p_id, __p_comment, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_editComment(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode editComment(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_editComment(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode removeComment(const ::std::string& __p_id)
    {
        return removeComment(__p_id, 0);
    }
    ::Rpc::ErrorCode removeComment(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return removeComment(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeComment(const ::std::string& __p_id, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeComment(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeComment(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeComment(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeComment(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeComment(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeComment(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeComment(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeComment(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeComment(const ::std::string& __p_id)
    {
        return begin_removeComment(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeComment(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_removeComment(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeComment(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeComment(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeComment(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeComment(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeComment(const ::std::string& __p_id, const ::Rpc::Callback_Session_removeCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeComment(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeComment(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_removeCommentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeComment(__p_id, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_removeComment(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode removeComment(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeComment(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Session> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_secure(bool __secure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_twoway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_oneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchOneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_datagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchDatagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_compress(bool __compress) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Rpc
{

class ContentBrowser : virtual public ::Rpc::ManagedObject
{
public:

    typedef ContentBrowserPrx ProxyType;
    typedef ContentBrowserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::ContentItemSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___next(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ContentBrowser& l, const ContentBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ContentBrowser& l, const ContentBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class EngineVersionBrowser : virtual public ::Rpc::ManagedObject
{
public:

    typedef EngineVersionBrowserPrx ProxyType;
    typedef EngineVersionBrowserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::EngineVersionSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___next(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const EngineVersionBrowser& l, const EngineVersionBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const EngineVersionBrowser& l, const EngineVersionBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ExtraBrowser : virtual public ::Rpc::ManagedObject
{
public:

    typedef ExtraBrowserPrx ProxyType;
    typedef ExtraBrowserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::ExtraInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___next(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ExtraBrowser& l, const ExtraBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ExtraBrowser& l, const ExtraBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class UserBrowser : virtual public ::Rpc::ManagedObject
{
public:

    typedef UserBrowserPrx ProxyType;
    typedef UserBrowserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::UserSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___next(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const UserBrowser& l, const UserBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UserBrowser& l, const UserBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ContentSubmitter : virtual public ::Rpc::ManagedObject
{
public:

    typedef ContentSubmitterPrx ProxyType;
    typedef ContentSubmitterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode setTitle(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTitle(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setPage(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setCategory(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCategory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setEngine(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEngine(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setStartup(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStartup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setParentId(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setParentId(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setVideo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVideo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setDescription(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode uploadImage(::Ice::Int, ::Rpc::UploaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode uploadContent(::Rpc::UploaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode finish(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ContentSubmitter& l, const ContentSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ContentSubmitter& l, const ContentSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class EngineVersionSubmitter : virtual public ::Rpc::ManagedObject
{
public:

    typedef EngineVersionSubmitterPrx ProxyType;
    typedef EngineVersionSubmitterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode setSetup(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setUnSetup(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUnSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setInfo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode uploadEngine(::Rpc::UploaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadEngine(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode finish(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const EngineVersionSubmitter& l, const EngineVersionSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const EngineVersionSubmitter& l, const EngineVersionSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ExtraSubmitter : virtual public ::Rpc::ManagedObject
{
public:

    typedef ExtraSubmitterPrx ProxyType;
    typedef ExtraSubmitterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode setTitle(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTitle(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setSetup(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setCategory(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCategory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setInfo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode uploadImage(::Rpc::UploaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode uploadExtra(::Rpc::UploaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadExtra(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode finish(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ExtraSubmitter& l, const ExtraSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ExtraSubmitter& l, const ExtraSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ClientBrowser : virtual public ::Rpc::ManagedObject
{
public:

    typedef ClientBrowserPrx ProxyType;
    typedef ClientBrowserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::ClientInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___next(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ClientBrowser& l, const ClientBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ClientBrowser& l, const ClientBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ClientSubmitter : virtual public ::Rpc::ManagedObject
{
public:

    typedef ClientSubmitterPrx ProxyType;
    typedef ClientSubmitterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode setInfo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode uploadClient(::Rpc::UploaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode finish(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ClientSubmitter& l, const ClientSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ClientSubmitter& l, const ClientSubmitter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CommentBrowser : virtual public ::Rpc::ManagedObject
{
public:

    typedef CommentBrowserPrx ProxyType;
    typedef CommentBrowserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::CommentSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___next(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const CommentBrowser& l, const CommentBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CommentBrowser& l, const CommentBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Session : virtual public ::Rpc::ManagedObject
{
public:

    typedef SessionPrx ProxyType;
    typedef SessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void refresh(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refresh(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getCurrentUser(::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCurrentUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getCurrentUserGroup(::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCurrentUserGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setPages(const ::Rpc::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getPages(::Rpc::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setContentCategories(const ::Rpc::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setContentCategories(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getContentCategories(::Rpc::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getContentCategories(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setExtraCategories(const ::Rpc::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExtraCategories(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getExtraCategories(::Rpc::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExtraCategories(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode browseContent(const ::std::string&, const ::std::string&, const ::std::string&, ::Rpc::ContentBrowserPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___browseContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getContentInfo(const ::std::string&, ::Rpc::ContentInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getContentInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode downloadContentImage(const ::std::string&, ::Ice::Int, ::Rpc::DownloaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___downloadContentImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode downloadContent(const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___downloadContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode submitContent(::Rpc::ContentSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___submitContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode updateContent(const ::std::string&, ::Rpc::ContentSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode removeContent(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode browseEngineVersions(bool, ::Rpc::EngineVersionBrowserPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___browseEngineVersions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode downloadEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___downloadEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode removeEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode submitEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::EngineVersionSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___submitEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode updateEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::EngineVersionSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::EngineVersionInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode browseExtra(const ::std::string&, const ::std::string&, ::Rpc::ExtraBrowserPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___browseExtra(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getExtraInfo(const ::std::string&, ::Rpc::ExtraInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExtraInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode downloadExtraImage(const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___downloadExtraImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode downloadExtra(const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___downloadExtra(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode submitExtra(::Rpc::ExtraSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___submitExtra(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode updateExtra(const ::std::string&, ::Rpc::ExtraSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateExtra(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode removeExtra(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeExtra(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode browseClient(::Rpc::ClientBrowserPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___browseClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode getClientInfo(const ::std::string&, ::Rpc::ClientInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getClientInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode submitClient(const ::std::string&, ::Rpc::ClientSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___submitClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode updateClient(const ::std::string&, ::Rpc::ClientSubmitterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode removeClient(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode browseUsers(::Rpc::UserBrowserPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___browseUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode setUserGroup(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUserGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode removeUser(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode browseComment(const ::std::string&, const ::std::string&, ::Rpc::CommentBrowserPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___browseComment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode addComment(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addComment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode editComment(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___editComment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode removeComment(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeComment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Rpc
{

template<class T>
class CallbackNC_ContentBrowser_next : public Callback_ContentBrowser_next_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&);

    CallbackNC_ContentBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentBrowserPrx __proxy = ::Rpc::ContentBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentItemSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, items);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentBrowser_nextPtr
newCallback_ContentBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentBrowser_nextPtr
newCallback_ContentBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentBrowser_next : public Callback_ContentBrowser_next_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&, const CT&);

    Callback_ContentBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentBrowserPrx __proxy = ::Rpc::ContentBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentItemSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, items, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentBrowser_nextPtr
newCallback_ContentBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentBrowser_nextPtr
newCallback_ContentBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionBrowser_next : public Callback_EngineVersionBrowser_next_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&);

    CallbackNC_EngineVersionBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionBrowserPrx __proxy = ::Rpc::EngineVersionBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, items);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionBrowser_next : public Callback_EngineVersionBrowser_next_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&, const CT&);

    Callback_EngineVersionBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionBrowserPrx __proxy = ::Rpc::EngineVersionBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, items, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraBrowser_next : public Callback_ExtraBrowser_next_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&);

    CallbackNC_ExtraBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraBrowserPrx __proxy = ::Rpc::ExtraBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraInfoSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, items);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraBrowser_nextPtr
newCallback_ExtraBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraBrowser_nextPtr
newCallback_ExtraBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraBrowser_next : public Callback_ExtraBrowser_next_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&, const CT&);

    Callback_ExtraBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraBrowserPrx __proxy = ::Rpc::ExtraBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraInfoSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, items, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraBrowser_nextPtr
newCallback_ExtraBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraBrowser_nextPtr
newCallback_ExtraBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserBrowser_next : public Callback_UserBrowser_next_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UserSeq&);

    CallbackNC_UserBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::UserBrowserPrx __proxy = ::Rpc::UserBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UserSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, items);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_UserBrowser_nextPtr
newCallback_UserBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserBrowser_nextPtr
newCallback_UserBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserBrowser_next : public Callback_UserBrowser_next_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UserSeq&, const CT&);

    Callback_UserBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::UserBrowserPrx __proxy = ::Rpc::UserBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UserSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, items, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_UserBrowser_nextPtr
newCallback_UserBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserBrowser_nextPtr
newCallback_UserBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setTitle : public Callback_ContentSubmitter_setTitle_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setTitle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setTitle(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setTitlePtr
newCallback_ContentSubmitter_setTitle(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setTitle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setTitlePtr
newCallback_ContentSubmitter_setTitle(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setTitle<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setTitle : public Callback_ContentSubmitter_setTitle_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setTitle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setTitle(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setTitlePtr
newCallback_ContentSubmitter_setTitle(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setTitle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setTitlePtr
newCallback_ContentSubmitter_setTitle(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setTitle<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setPage : public Callback_ContentSubmitter_setPage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setPage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setPage(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setPagePtr
newCallback_ContentSubmitter_setPage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setPage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setPagePtr
newCallback_ContentSubmitter_setPage(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setPage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setPage : public Callback_ContentSubmitter_setPage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setPage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setPage(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setPagePtr
newCallback_ContentSubmitter_setPage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setPage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setPagePtr
newCallback_ContentSubmitter_setPage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setPage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setCategory : public Callback_ContentSubmitter_setCategory_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setCategory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setCategory(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setCategoryPtr
newCallback_ContentSubmitter_setCategory(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setCategory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setCategoryPtr
newCallback_ContentSubmitter_setCategory(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setCategory<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setCategory : public Callback_ContentSubmitter_setCategory_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setCategory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setCategory(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setCategoryPtr
newCallback_ContentSubmitter_setCategory(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setCategory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setCategoryPtr
newCallback_ContentSubmitter_setCategory(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setCategory<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setEngine : public Callback_ContentSubmitter_setEngine_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setEngine(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setEngine(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setEnginePtr
newCallback_ContentSubmitter_setEngine(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setEngine<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setEnginePtr
newCallback_ContentSubmitter_setEngine(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setEngine<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setEngine : public Callback_ContentSubmitter_setEngine_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setEngine(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setEngine(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setEnginePtr
newCallback_ContentSubmitter_setEngine(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setEngine<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setEnginePtr
newCallback_ContentSubmitter_setEngine(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setEngine<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setStartup : public Callback_ContentSubmitter_setStartup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setStartup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setStartup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setStartupPtr
newCallback_ContentSubmitter_setStartup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setStartup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setStartupPtr
newCallback_ContentSubmitter_setStartup(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setStartup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setStartup : public Callback_ContentSubmitter_setStartup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setStartup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setStartup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setStartupPtr
newCallback_ContentSubmitter_setStartup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setStartup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setStartupPtr
newCallback_ContentSubmitter_setStartup(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setStartup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setParentId : public Callback_ContentSubmitter_setParentId_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setParentId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setParentId(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setParentIdPtr
newCallback_ContentSubmitter_setParentId(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setParentId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setParentIdPtr
newCallback_ContentSubmitter_setParentId(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setParentId<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setParentId : public Callback_ContentSubmitter_setParentId_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setParentId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setParentId(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setParentIdPtr
newCallback_ContentSubmitter_setParentId(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setParentId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setParentIdPtr
newCallback_ContentSubmitter_setParentId(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setParentId<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setVideo : public Callback_ContentSubmitter_setVideo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setVideo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setVideo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setVideoPtr
newCallback_ContentSubmitter_setVideo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setVideo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setVideoPtr
newCallback_ContentSubmitter_setVideo(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setVideo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setVideo : public Callback_ContentSubmitter_setVideo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setVideo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setVideo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setVideoPtr
newCallback_ContentSubmitter_setVideo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setVideo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setVideoPtr
newCallback_ContentSubmitter_setVideo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setVideo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_setDescription : public Callback_ContentSubmitter_setDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setDescription(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_setDescriptionPtr
newCallback_ContentSubmitter_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_setDescriptionPtr
newCallback_ContentSubmitter_setDescription(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_setDescription : public Callback_ContentSubmitter_setDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setDescription(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_setDescriptionPtr
newCallback_ContentSubmitter_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_setDescriptionPtr
newCallback_ContentSubmitter_setDescription(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_uploadImage : public Callback_ContentSubmitter_uploadImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&);

    CallbackNC_ContentSubmitter_uploadImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadImage(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, uploader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_uploadImagePtr
newCallback_ContentSubmitter_uploadImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_uploadImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_uploadImagePtr
newCallback_ContentSubmitter_uploadImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_uploadImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_uploadImage : public Callback_ContentSubmitter_uploadImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&);

    Callback_ContentSubmitter_uploadImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadImage(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, uploader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_uploadImagePtr
newCallback_ContentSubmitter_uploadImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_uploadImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_uploadImagePtr
newCallback_ContentSubmitter_uploadImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_uploadImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_uploadContent : public Callback_ContentSubmitter_uploadContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&);

    CallbackNC_ContentSubmitter_uploadContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadContent(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, uploader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_uploadContentPtr
newCallback_ContentSubmitter_uploadContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_uploadContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_uploadContentPtr
newCallback_ContentSubmitter_uploadContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_uploadContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_uploadContent : public Callback_ContentSubmitter_uploadContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&);

    Callback_ContentSubmitter_uploadContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadContent(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, uploader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_uploadContentPtr
newCallback_ContentSubmitter_uploadContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_uploadContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_uploadContentPtr
newCallback_ContentSubmitter_uploadContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_uploadContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_cancel : public Callback_ContentSubmitter_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ContentSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_cancel : public Callback_ContentSubmitter_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ContentSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_cancelPtr
newCallback_ContentSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ContentSubmitter_finish : public Callback_ContentSubmitter_finish_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ContentSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ContentSubmitter_finishPtr
newCallback_ContentSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContentSubmitter_finishPtr
newCallback_ContentSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContentSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContentSubmitter_finish : public Callback_ContentSubmitter_finish_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ContentSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ContentSubmitter_finishPtr
newCallback_ContentSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContentSubmitter_finishPtr
newCallback_ContentSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContentSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionSubmitter_setSetup : public Callback_EngineVersionSubmitter_setSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_EngineVersionSubmitter_setSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionSubmitter_setSetupPtr
newCallback_EngineVersionSubmitter_setSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_setSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_setSetupPtr
newCallback_EngineVersionSubmitter_setSetup(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_setSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionSubmitter_setSetup : public Callback_EngineVersionSubmitter_setSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_EngineVersionSubmitter_setSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionSubmitter_setSetupPtr
newCallback_EngineVersionSubmitter_setSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_setSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_setSetupPtr
newCallback_EngineVersionSubmitter_setSetup(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_setSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionSubmitter_setUnSetup : public Callback_EngineVersionSubmitter_setUnSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_EngineVersionSubmitter_setUnSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setUnSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionSubmitter_setUnSetupPtr
newCallback_EngineVersionSubmitter_setUnSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_setUnSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_setUnSetupPtr
newCallback_EngineVersionSubmitter_setUnSetup(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_setUnSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionSubmitter_setUnSetup : public Callback_EngineVersionSubmitter_setUnSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_EngineVersionSubmitter_setUnSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setUnSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionSubmitter_setUnSetupPtr
newCallback_EngineVersionSubmitter_setUnSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_setUnSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_setUnSetupPtr
newCallback_EngineVersionSubmitter_setUnSetup(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_setUnSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionSubmitter_setInfo : public Callback_EngineVersionSubmitter_setInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_EngineVersionSubmitter_setInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionSubmitter_setInfoPtr
newCallback_EngineVersionSubmitter_setInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_setInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_setInfoPtr
newCallback_EngineVersionSubmitter_setInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_setInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionSubmitter_setInfo : public Callback_EngineVersionSubmitter_setInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_EngineVersionSubmitter_setInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionSubmitter_setInfoPtr
newCallback_EngineVersionSubmitter_setInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_setInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_setInfoPtr
newCallback_EngineVersionSubmitter_setInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_setInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionSubmitter_uploadEngine : public Callback_EngineVersionSubmitter_uploadEngine_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&);

    CallbackNC_EngineVersionSubmitter_uploadEngine(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadEngine(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, uploader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionSubmitter_uploadEnginePtr
newCallback_EngineVersionSubmitter_uploadEngine(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_uploadEngine<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_uploadEnginePtr
newCallback_EngineVersionSubmitter_uploadEngine(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_uploadEngine<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionSubmitter_uploadEngine : public Callback_EngineVersionSubmitter_uploadEngine_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&);

    Callback_EngineVersionSubmitter_uploadEngine(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadEngine(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, uploader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionSubmitter_uploadEnginePtr
newCallback_EngineVersionSubmitter_uploadEngine(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_uploadEngine<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_uploadEnginePtr
newCallback_EngineVersionSubmitter_uploadEngine(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_uploadEngine<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionSubmitter_cancel : public Callback_EngineVersionSubmitter_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EngineVersionSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionSubmitter_cancel : public Callback_EngineVersionSubmitter_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EngineVersionSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_cancelPtr
newCallback_EngineVersionSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionSubmitter_finish : public Callback_EngineVersionSubmitter_finish_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_EngineVersionSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionSubmitter_finishPtr
newCallback_EngineVersionSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionSubmitter_finishPtr
newCallback_EngineVersionSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionSubmitter_finish : public Callback_EngineVersionSubmitter_finish_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_EngineVersionSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionSubmitter_finishPtr
newCallback_EngineVersionSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionSubmitter_finishPtr
newCallback_EngineVersionSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_setTitle : public Callback_ExtraSubmitter_setTitle_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ExtraSubmitter_setTitle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setTitle(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraSubmitter_setTitlePtr
newCallback_ExtraSubmitter_setTitle(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setTitle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_setTitlePtr
newCallback_ExtraSubmitter_setTitle(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setTitle<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_setTitle : public Callback_ExtraSubmitter_setTitle_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ExtraSubmitter_setTitle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setTitle(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraSubmitter_setTitlePtr
newCallback_ExtraSubmitter_setTitle(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setTitle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_setTitlePtr
newCallback_ExtraSubmitter_setTitle(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setTitle<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_setSetup : public Callback_ExtraSubmitter_setSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ExtraSubmitter_setSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraSubmitter_setSetupPtr
newCallback_ExtraSubmitter_setSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_setSetupPtr
newCallback_ExtraSubmitter_setSetup(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_setSetup : public Callback_ExtraSubmitter_setSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ExtraSubmitter_setSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraSubmitter_setSetupPtr
newCallback_ExtraSubmitter_setSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_setSetupPtr
newCallback_ExtraSubmitter_setSetup(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_setCategory : public Callback_ExtraSubmitter_setCategory_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ExtraSubmitter_setCategory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setCategory(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraSubmitter_setCategoryPtr
newCallback_ExtraSubmitter_setCategory(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setCategory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_setCategoryPtr
newCallback_ExtraSubmitter_setCategory(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setCategory<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_setCategory : public Callback_ExtraSubmitter_setCategory_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ExtraSubmitter_setCategory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setCategory(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraSubmitter_setCategoryPtr
newCallback_ExtraSubmitter_setCategory(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setCategory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_setCategoryPtr
newCallback_ExtraSubmitter_setCategory(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setCategory<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_setInfo : public Callback_ExtraSubmitter_setInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ExtraSubmitter_setInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraSubmitter_setInfoPtr
newCallback_ExtraSubmitter_setInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_setInfoPtr
newCallback_ExtraSubmitter_setInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_setInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_setInfo : public Callback_ExtraSubmitter_setInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ExtraSubmitter_setInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraSubmitter_setInfoPtr
newCallback_ExtraSubmitter_setInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_setInfoPtr
newCallback_ExtraSubmitter_setInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_setInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_uploadImage : public Callback_ExtraSubmitter_uploadImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&);

    CallbackNC_ExtraSubmitter_uploadImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadImage(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, uploader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraSubmitter_uploadImagePtr
newCallback_ExtraSubmitter_uploadImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_uploadImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_uploadImagePtr
newCallback_ExtraSubmitter_uploadImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_uploadImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_uploadImage : public Callback_ExtraSubmitter_uploadImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&);

    Callback_ExtraSubmitter_uploadImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadImage(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, uploader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraSubmitter_uploadImagePtr
newCallback_ExtraSubmitter_uploadImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_uploadImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_uploadImagePtr
newCallback_ExtraSubmitter_uploadImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_uploadImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_uploadExtra : public Callback_ExtraSubmitter_uploadExtra_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&);

    CallbackNC_ExtraSubmitter_uploadExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadExtra(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, uploader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraSubmitter_uploadExtraPtr
newCallback_ExtraSubmitter_uploadExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_uploadExtra<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_uploadExtraPtr
newCallback_ExtraSubmitter_uploadExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_uploadExtra<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_uploadExtra : public Callback_ExtraSubmitter_uploadExtra_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&);

    Callback_ExtraSubmitter_uploadExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadExtra(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, uploader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraSubmitter_uploadExtraPtr
newCallback_ExtraSubmitter_uploadExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_uploadExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_uploadExtraPtr
newCallback_ExtraSubmitter_uploadExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_uploadExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_cancel : public Callback_ExtraSubmitter_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExtraSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_cancel : public Callback_ExtraSubmitter_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExtraSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_cancelPtr
newCallback_ExtraSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExtraSubmitter_finish : public Callback_ExtraSubmitter_finish_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ExtraSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ExtraSubmitter_finishPtr
newCallback_ExtraSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExtraSubmitter_finishPtr
newCallback_ExtraSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExtraSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExtraSubmitter_finish : public Callback_ExtraSubmitter_finish_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ExtraSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ExtraSubmitter_finishPtr
newCallback_ExtraSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExtraSubmitter_finishPtr
newCallback_ExtraSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExtraSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ClientBrowser_next : public Callback_ClientBrowser_next_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&);

    CallbackNC_ClientBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientBrowserPrx __proxy = ::Rpc::ClientBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientInfoSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, items);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ClientBrowser_nextPtr
newCallback_ClientBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientBrowser_nextPtr
newCallback_ClientBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ClientBrowser_next : public Callback_ClientBrowser_next_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&, const CT&);

    Callback_ClientBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientBrowserPrx __proxy = ::Rpc::ClientBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientInfoSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, items, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ClientBrowser_nextPtr
newCallback_ClientBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientBrowser_nextPtr
newCallback_ClientBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ClientSubmitter_setInfo : public Callback_ClientSubmitter_setInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ClientSubmitter_setInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ClientSubmitter_setInfoPtr
newCallback_ClientSubmitter_setInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_setInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientSubmitter_setInfoPtr
newCallback_ClientSubmitter_setInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_setInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ClientSubmitter_setInfo : public Callback_ClientSubmitter_setInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ClientSubmitter_setInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ClientSubmitter_setInfoPtr
newCallback_ClientSubmitter_setInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_setInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientSubmitter_setInfoPtr
newCallback_ClientSubmitter_setInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_setInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ClientSubmitter_uploadClient : public Callback_ClientSubmitter_uploadClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&);

    CallbackNC_ClientSubmitter_uploadClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadClient(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, uploader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ClientSubmitter_uploadClientPtr
newCallback_ClientSubmitter_uploadClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_uploadClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientSubmitter_uploadClientPtr
newCallback_ClientSubmitter_uploadClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_uploadClient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ClientSubmitter_uploadClient : public Callback_ClientSubmitter_uploadClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&);

    Callback_ClientSubmitter_uploadClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadClient(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, uploader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ClientSubmitter_uploadClientPtr
newCallback_ClientSubmitter_uploadClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_uploadClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientSubmitter_uploadClientPtr
newCallback_ClientSubmitter_uploadClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_uploadClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ClientSubmitter_cancel : public Callback_ClientSubmitter_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ClientSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ClientSubmitter_cancel : public Callback_ClientSubmitter_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ClientSubmitter_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientSubmitter_cancelPtr
newCallback_ClientSubmitter_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ClientSubmitter_finish : public Callback_ClientSubmitter_finish_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_ClientSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ClientSubmitter_finishPtr
newCallback_ClientSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientSubmitter_finishPtr
newCallback_ClientSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientSubmitter_finish<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ClientSubmitter_finish : public Callback_ClientSubmitter_finish_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_ClientSubmitter_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ClientSubmitter_finishPtr
newCallback_ClientSubmitter_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientSubmitter_finishPtr
newCallback_ClientSubmitter_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientSubmitter_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommentBrowser_next : public Callback_CommentBrowser_next_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::CommentSeq&);

    CallbackNC_CommentBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::CommentBrowserPrx __proxy = ::Rpc::CommentBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::CommentSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, items);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommentBrowser_nextPtr
newCallback_CommentBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommentBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommentBrowser_nextPtr
newCallback_CommentBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommentBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommentBrowser_next : public Callback_CommentBrowser_next_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::CommentSeq&, const CT&);

    Callback_CommentBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::CommentBrowserPrx __proxy = ::Rpc::CommentBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::CommentSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, items, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommentBrowser_nextPtr
newCallback_CommentBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommentBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommentBrowser_nextPtr
newCallback_CommentBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommentBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_refresh : public Callback_Session_refresh_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_refresh : public Callback_Session_refresh_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getCurrentUser : public Callback_Session_getCurrentUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::std::string&);

    CallbackNC_Session_getCurrentUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string user;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getCurrentUser(user, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, user);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getCurrentUserPtr
newCallback_Session_getCurrentUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getCurrentUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getCurrentUserPtr
newCallback_Session_getCurrentUser(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getCurrentUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getCurrentUser : public Callback_Session_getCurrentUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::std::string&, const CT&);

    Callback_Session_getCurrentUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string user;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getCurrentUser(user, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, user, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getCurrentUserPtr
newCallback_Session_getCurrentUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getCurrentUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getCurrentUserPtr
newCallback_Session_getCurrentUser(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getCurrentUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getCurrentUserGroup : public Callback_Session_getCurrentUserGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::std::string&);

    CallbackNC_Session_getCurrentUserGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string group;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getCurrentUserGroup(group, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, group);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getCurrentUserGroupPtr
newCallback_Session_getCurrentUserGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getCurrentUserGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getCurrentUserGroupPtr
newCallback_Session_getCurrentUserGroup(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getCurrentUserGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getCurrentUserGroup : public Callback_Session_getCurrentUserGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::std::string&, const CT&);

    Callback_Session_getCurrentUserGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string group;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getCurrentUserGroup(group, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, group, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getCurrentUserGroupPtr
newCallback_Session_getCurrentUserGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getCurrentUserGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getCurrentUserGroupPtr
newCallback_Session_getCurrentUserGroup(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getCurrentUserGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_setPages : public Callback_Session_setPages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_setPages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setPages(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_setPagesPtr
newCallback_Session_setPages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setPages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_setPagesPtr
newCallback_Session_setPages(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setPages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_setPages : public Callback_Session_setPages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_setPages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setPages(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_setPagesPtr
newCallback_Session_setPages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setPages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_setPagesPtr
newCallback_Session_setPages(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setPages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getPages : public Callback_Session_getPages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::StringSeq&);

    CallbackNC_Session_getPages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::StringSeq pages;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getPages(pages, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, pages);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getPagesPtr
newCallback_Session_getPages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getPages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getPagesPtr
newCallback_Session_getPages(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getPages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getPages : public Callback_Session_getPages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&);

    Callback_Session_getPages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::StringSeq pages;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getPages(pages, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, pages, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getPagesPtr
newCallback_Session_getPages(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getPages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getPagesPtr
newCallback_Session_getPages(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getPages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_setContentCategories : public Callback_Session_setContentCategories_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_setContentCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setContentCategories(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_setContentCategoriesPtr
newCallback_Session_setContentCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setContentCategories<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_setContentCategoriesPtr
newCallback_Session_setContentCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setContentCategories<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_setContentCategories : public Callback_Session_setContentCategories_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_setContentCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setContentCategories(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_setContentCategoriesPtr
newCallback_Session_setContentCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setContentCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_setContentCategoriesPtr
newCallback_Session_setContentCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setContentCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getContentCategories : public Callback_Session_getContentCategories_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::StringSeq&);

    CallbackNC_Session_getContentCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::StringSeq categories;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getContentCategories(categories, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, categories);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getContentCategoriesPtr
newCallback_Session_getContentCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getContentCategories<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getContentCategoriesPtr
newCallback_Session_getContentCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getContentCategories<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getContentCategories : public Callback_Session_getContentCategories_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&);

    Callback_Session_getContentCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::StringSeq categories;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getContentCategories(categories, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, categories, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getContentCategoriesPtr
newCallback_Session_getContentCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getContentCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getContentCategoriesPtr
newCallback_Session_getContentCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getContentCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_setExtraCategories : public Callback_Session_setExtraCategories_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_setExtraCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setExtraCategories(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_setExtraCategoriesPtr
newCallback_Session_setExtraCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setExtraCategories<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_setExtraCategoriesPtr
newCallback_Session_setExtraCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setExtraCategories<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_setExtraCategories : public Callback_Session_setExtraCategories_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_setExtraCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setExtraCategories(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_setExtraCategoriesPtr
newCallback_Session_setExtraCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setExtraCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_setExtraCategoriesPtr
newCallback_Session_setExtraCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setExtraCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getExtraCategories : public Callback_Session_getExtraCategories_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::StringSeq&);

    CallbackNC_Session_getExtraCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::StringSeq categories;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getExtraCategories(categories, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, categories);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getExtraCategoriesPtr
newCallback_Session_getExtraCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getExtraCategories<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getExtraCategoriesPtr
newCallback_Session_getExtraCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getExtraCategories<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getExtraCategories : public Callback_Session_getExtraCategories_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&);

    Callback_Session_getExtraCategories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::StringSeq categories;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getExtraCategories(categories, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, categories, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getExtraCategoriesPtr
newCallback_Session_getExtraCategories(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getExtraCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getExtraCategoriesPtr
newCallback_Session_getExtraCategories(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getExtraCategories<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_browseContent : public Callback_Session_browseContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&);

    CallbackNC_Session_browseContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseContent(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, browser);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_browseContentPtr
newCallback_Session_browseContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_browseContentPtr
newCallback_Session_browseContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_browseContent : public Callback_Session_browseContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&, const CT&);

    Callback_Session_browseContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseContent(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, browser, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_browseContentPtr
newCallback_Session_browseContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_browseContentPtr
newCallback_Session_browseContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getContentInfo : public Callback_Session_getContentInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentInfo&);

    CallbackNC_Session_getContentInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentInfo info;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getContentInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, info);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getContentInfoPtr
newCallback_Session_getContentInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getContentInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getContentInfoPtr
newCallback_Session_getContentInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getContentInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getContentInfo : public Callback_Session_getContentInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentInfo&, const CT&);

    Callback_Session_getContentInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentInfo info;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getContentInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, info, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getContentInfoPtr
newCallback_Session_getContentInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getContentInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getContentInfoPtr
newCallback_Session_getContentInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getContentInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_downloadContentImage : public Callback_Session_downloadContentImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&);

    CallbackNC_Session_downloadContentImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadContentImage(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, downloader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_downloadContentImagePtr
newCallback_Session_downloadContentImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadContentImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_downloadContentImagePtr
newCallback_Session_downloadContentImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadContentImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_downloadContentImage : public Callback_Session_downloadContentImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&);

    Callback_Session_downloadContentImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadContentImage(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, downloader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_downloadContentImagePtr
newCallback_Session_downloadContentImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadContentImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_downloadContentImagePtr
newCallback_Session_downloadContentImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadContentImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_downloadContent : public Callback_Session_downloadContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&);

    CallbackNC_Session_downloadContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadContent(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, downloader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_downloadContentPtr
newCallback_Session_downloadContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_downloadContentPtr
newCallback_Session_downloadContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_downloadContent : public Callback_Session_downloadContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&);

    Callback_Session_downloadContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadContent(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, downloader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_downloadContentPtr
newCallback_Session_downloadContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_downloadContentPtr
newCallback_Session_downloadContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_submitContent : public Callback_Session_submitContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&);

    CallbackNC_Session_submitContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitContent(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_submitContentPtr
newCallback_Session_submitContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_submitContentPtr
newCallback_Session_submitContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_submitContent : public Callback_Session_submitContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&, const CT&);

    Callback_Session_submitContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitContent(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_submitContentPtr
newCallback_Session_submitContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_submitContentPtr
newCallback_Session_submitContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_updateContent : public Callback_Session_updateContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&);

    CallbackNC_Session_updateContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateContent(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_updateContentPtr
newCallback_Session_updateContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_updateContentPtr
newCallback_Session_updateContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_updateContent : public Callback_Session_updateContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&, const CT&);

    Callback_Session_updateContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ContentSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateContent(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_updateContentPtr
newCallback_Session_updateContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_updateContentPtr
newCallback_Session_updateContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_removeContent : public Callback_Session_removeContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_removeContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeContent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_removeContentPtr
newCallback_Session_removeContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_removeContentPtr
newCallback_Session_removeContent(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_removeContent : public Callback_Session_removeContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_removeContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeContent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_removeContentPtr
newCallback_Session_removeContent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_removeContentPtr
newCallback_Session_removeContent(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_browseEngineVersions : public Callback_Session_browseEngineVersions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&);

    CallbackNC_Session_browseEngineVersions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseEngineVersions(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, browser);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseEngineVersions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseEngineVersions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_browseEngineVersions : public Callback_Session_browseEngineVersions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&, const CT&);

    Callback_Session_browseEngineVersions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseEngineVersions(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, browser, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseEngineVersions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseEngineVersions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_downloadEngineVersion : public Callback_Session_downloadEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&);

    CallbackNC_Session_downloadEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadEngineVersion(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, downloader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_downloadEngineVersion : public Callback_Session_downloadEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&);

    Callback_Session_downloadEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadEngineVersion(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, downloader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_removeEngineVersion : public Callback_Session_removeEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_removeEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeEngineVersion(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_removeEngineVersion : public Callback_Session_removeEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_removeEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeEngineVersion(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_submitEngineVersion : public Callback_Session_submitEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&);

    CallbackNC_Session_submitEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitEngineVersion(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_submitEngineVersionPtr
newCallback_Session_submitEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_submitEngineVersionPtr
newCallback_Session_submitEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_submitEngineVersion : public Callback_Session_submitEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&, const CT&);

    Callback_Session_submitEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitEngineVersion(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_submitEngineVersionPtr
newCallback_Session_submitEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_submitEngineVersionPtr
newCallback_Session_submitEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_updateEngineVersion : public Callback_Session_updateEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&);

    CallbackNC_Session_updateEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateEngineVersion(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_updateEngineVersionPtr
newCallback_Session_updateEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_updateEngineVersionPtr
newCallback_Session_updateEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_updateEngineVersion : public Callback_Session_updateEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&, const CT&);

    Callback_Session_updateEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateEngineVersion(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_updateEngineVersionPtr
newCallback_Session_updateEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_updateEngineVersionPtr
newCallback_Session_updateEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getEngineVersion : public Callback_Session_getEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&);

    CallbackNC_Session_getEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionInfo engineVersion;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getEngineVersion(engineVersion, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, engineVersion);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getEngineVersionPtr
newCallback_Session_getEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getEngineVersionPtr
newCallback_Session_getEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getEngineVersion : public Callback_Session_getEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&, const CT&);

    Callback_Session_getEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionInfo engineVersion;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getEngineVersion(engineVersion, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, engineVersion, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getEngineVersionPtr
newCallback_Session_getEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getEngineVersionPtr
newCallback_Session_getEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_browseExtra : public Callback_Session_browseExtra_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&);

    CallbackNC_Session_browseExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseExtra(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, browser);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_browseExtraPtr
newCallback_Session_browseExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseExtra<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_browseExtraPtr
newCallback_Session_browseExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseExtra<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_browseExtra : public Callback_Session_browseExtra_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&, const CT&);

    Callback_Session_browseExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseExtra(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, browser, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_browseExtraPtr
newCallback_Session_browseExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_browseExtraPtr
newCallback_Session_browseExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getExtraInfo : public Callback_Session_getExtraInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraInfo&);

    CallbackNC_Session_getExtraInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraInfo info;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getExtraInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, info);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getExtraInfoPtr
newCallback_Session_getExtraInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getExtraInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getExtraInfoPtr
newCallback_Session_getExtraInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getExtraInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getExtraInfo : public Callback_Session_getExtraInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraInfo&, const CT&);

    Callback_Session_getExtraInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraInfo info;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getExtraInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, info, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getExtraInfoPtr
newCallback_Session_getExtraInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getExtraInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getExtraInfoPtr
newCallback_Session_getExtraInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getExtraInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_downloadExtraImage : public Callback_Session_downloadExtraImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&);

    CallbackNC_Session_downloadExtraImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadExtraImage(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, downloader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_downloadExtraImagePtr
newCallback_Session_downloadExtraImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadExtraImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_downloadExtraImagePtr
newCallback_Session_downloadExtraImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadExtraImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_downloadExtraImage : public Callback_Session_downloadExtraImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&);

    Callback_Session_downloadExtraImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadExtraImage(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, downloader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_downloadExtraImagePtr
newCallback_Session_downloadExtraImage(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadExtraImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_downloadExtraImagePtr
newCallback_Session_downloadExtraImage(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadExtraImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_downloadExtra : public Callback_Session_downloadExtra_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&);

    CallbackNC_Session_downloadExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadExtra(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, downloader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_downloadExtraPtr
newCallback_Session_downloadExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadExtra<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_downloadExtraPtr
newCallback_Session_downloadExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadExtra<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_downloadExtra : public Callback_Session_downloadExtra_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&);

    Callback_Session_downloadExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadExtra(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, downloader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_downloadExtraPtr
newCallback_Session_downloadExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_downloadExtraPtr
newCallback_Session_downloadExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_submitExtra : public Callback_Session_submitExtra_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&);

    CallbackNC_Session_submitExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitExtra(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_submitExtraPtr
newCallback_Session_submitExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitExtra<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_submitExtraPtr
newCallback_Session_submitExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitExtra<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_submitExtra : public Callback_Session_submitExtra_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&, const CT&);

    Callback_Session_submitExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitExtra(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_submitExtraPtr
newCallback_Session_submitExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_submitExtraPtr
newCallback_Session_submitExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_updateExtra : public Callback_Session_updateExtra_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&);

    CallbackNC_Session_updateExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateExtra(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_updateExtraPtr
newCallback_Session_updateExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateExtra<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_updateExtraPtr
newCallback_Session_updateExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateExtra<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_updateExtra : public Callback_Session_updateExtra_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&, const CT&);

    Callback_Session_updateExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ExtraSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateExtra(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_updateExtraPtr
newCallback_Session_updateExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_updateExtraPtr
newCallback_Session_updateExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_removeExtra : public Callback_Session_removeExtra_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_removeExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeExtra(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_removeExtraPtr
newCallback_Session_removeExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeExtra<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_removeExtraPtr
newCallback_Session_removeExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeExtra<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_removeExtra : public Callback_Session_removeExtra_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_removeExtra(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeExtra(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_removeExtraPtr
newCallback_Session_removeExtra(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_removeExtraPtr
newCallback_Session_removeExtra(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeExtra<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_browseClient : public Callback_Session_browseClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&);

    CallbackNC_Session_browseClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseClient(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, browser);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_browseClientPtr
newCallback_Session_browseClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_browseClientPtr
newCallback_Session_browseClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseClient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_browseClient : public Callback_Session_browseClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&, const CT&);

    Callback_Session_browseClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseClient(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, browser, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_browseClientPtr
newCallback_Session_browseClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_browseClientPtr
newCallback_Session_browseClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_getClientInfo : public Callback_Session_getClientInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientInfo&);

    CallbackNC_Session_getClientInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientInfo info;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getClientInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, info);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_getClientInfoPtr
newCallback_Session_getClientInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getClientInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_getClientInfoPtr
newCallback_Session_getClientInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_getClientInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_getClientInfo : public Callback_Session_getClientInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientInfo&, const CT&);

    Callback_Session_getClientInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientInfo info;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getClientInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, info, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_getClientInfoPtr
newCallback_Session_getClientInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getClientInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_getClientInfoPtr
newCallback_Session_getClientInfo(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_getClientInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_submitClient : public Callback_Session_submitClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&);

    CallbackNC_Session_submitClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitClient(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_submitClientPtr
newCallback_Session_submitClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_submitClientPtr
newCallback_Session_submitClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submitClient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_submitClient : public Callback_Session_submitClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&, const CT&);

    Callback_Session_submitClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_submitClient(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_submitClientPtr
newCallback_Session_submitClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_submitClientPtr
newCallback_Session_submitClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submitClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_updateClient : public Callback_Session_updateClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&);

    CallbackNC_Session_updateClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateClient(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, submitter);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_updateClientPtr
newCallback_Session_updateClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_updateClientPtr
newCallback_Session_updateClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_updateClient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_updateClient : public Callback_Session_updateClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&, const CT&);

    Callback_Session_updateClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ClientSubmitterPrx submitter;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_updateClient(submitter, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, submitter, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_updateClientPtr
newCallback_Session_updateClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_updateClientPtr
newCallback_Session_updateClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_updateClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_removeClient : public Callback_Session_removeClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_removeClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeClient(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_removeClientPtr
newCallback_Session_removeClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_removeClientPtr
newCallback_Session_removeClient(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeClient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_removeClient : public Callback_Session_removeClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_removeClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeClient(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_removeClientPtr
newCallback_Session_removeClient(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_removeClientPtr
newCallback_Session_removeClient(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_browseUsers : public Callback_Session_browseUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&);

    CallbackNC_Session_browseUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UserBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseUsers(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, browser);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_browseUsersPtr
newCallback_Session_browseUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_browseUsersPtr
newCallback_Session_browseUsers(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseUsers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_browseUsers : public Callback_Session_browseUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&, const CT&);

    Callback_Session_browseUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UserBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseUsers(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, browser, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_browseUsersPtr
newCallback_Session_browseUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_browseUsersPtr
newCallback_Session_browseUsers(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_setUserGroup : public Callback_Session_setUserGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_setUserGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setUserGroup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_setUserGroupPtr
newCallback_Session_setUserGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setUserGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_setUserGroupPtr
newCallback_Session_setUserGroup(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setUserGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_setUserGroup : public Callback_Session_setUserGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_setUserGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_setUserGroup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_setUserGroupPtr
newCallback_Session_setUserGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setUserGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_setUserGroupPtr
newCallback_Session_setUserGroup(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setUserGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_removeUser : public Callback_Session_removeUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeUser(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_removeUserPtr
newCallback_Session_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_removeUserPtr
newCallback_Session_removeUser(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_removeUser : public Callback_Session_removeUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeUser(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_removeUserPtr
newCallback_Session_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_removeUserPtr
newCallback_Session_removeUser(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_browseComment : public Callback_Session_browseComment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&);

    CallbackNC_Session_browseComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::CommentBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseComment(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, browser);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_browseCommentPtr
newCallback_Session_browseComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseComment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_browseCommentPtr
newCallback_Session_browseComment(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseComment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_browseComment : public Callback_Session_browseComment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&, const CT&);

    Callback_Session_browseComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::CommentBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseComment(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, browser, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_browseCommentPtr
newCallback_Session_browseComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_browseCommentPtr
newCallback_Session_browseComment(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::CommentBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_addComment : public Callback_Session_addComment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_addComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_addComment(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_addCommentPtr
newCallback_Session_addComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_addComment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_addCommentPtr
newCallback_Session_addComment(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_addComment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_addComment : public Callback_Session_addComment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_addComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_addComment(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_addCommentPtr
newCallback_Session_addComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_addComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_addCommentPtr
newCallback_Session_addComment(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_addComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_editComment : public Callback_Session_editComment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_editComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_editComment(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_editCommentPtr
newCallback_Session_editComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_editComment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_editCommentPtr
newCallback_Session_editComment(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_editComment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_editComment : public Callback_Session_editComment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_editComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_editComment(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_editCommentPtr
newCallback_Session_editComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_editComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_editCommentPtr
newCallback_Session_editComment(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_editComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_removeComment : public Callback_Session_removeComment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_removeComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeComment(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_removeCommentPtr
newCallback_Session_removeComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeComment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_removeCommentPtr
newCallback_Session_removeComment(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeComment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_removeComment : public Callback_Session_removeComment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_removeComment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeComment(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_removeCommentPtr
newCallback_Session_removeComment(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeComment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_removeCommentPtr
newCallback_Session_removeComment(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeComment<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
