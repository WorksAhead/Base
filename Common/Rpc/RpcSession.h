// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `RpcSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RpcSession_h__
#define __RpcSession_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <RpcErrorCode.h>
#include <RpcTypedefs.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Rpc
{

class EngineVersionBrowser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionBrowser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::EngineVersionBrowser*);

class Uploader;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Uploader>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::Uploader*);

class Downloader;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Downloader>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::Downloader*);

class Session;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Session>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::Session*);

}

}

namespace Rpc
{

class EngineVersionBrowser;
::Ice::Object* upCast(::Rpc::EngineVersionBrowser*);
typedef ::IceInternal::Handle< ::Rpc::EngineVersionBrowser> EngineVersionBrowserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionBrowser> EngineVersionBrowserPrx;
void __patch(EngineVersionBrowserPtr&, const ::Ice::ObjectPtr&);

class Uploader;
::Ice::Object* upCast(::Rpc::Uploader*);
typedef ::IceInternal::Handle< ::Rpc::Uploader> UploaderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Uploader> UploaderPrx;
void __patch(UploaderPtr&, const ::Ice::ObjectPtr&);

class Downloader;
::Ice::Object* upCast(::Rpc::Downloader*);
typedef ::IceInternal::Handle< ::Rpc::Downloader> DownloaderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Downloader> DownloaderPrx;
void __patch(DownloaderPtr&, const ::Ice::ObjectPtr&);

class Session;
::Ice::Object* upCast(::Rpc::Session*);
typedef ::IceInternal::Handle< ::Rpc::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Session> SessionPrx;
void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

}

namespace Rpc
{

struct EngineVersionItem
{
    ::std::string name;
    ::std::string version;
    ::std::string uptime;
    ::std::string info;
    ::std::string state;

    bool operator==(const EngineVersionItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(version != __rhs.version)
        {
            return false;
        }
        if(uptime != __rhs.uptime)
        {
            return false;
        }
        if(info != __rhs.info)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const EngineVersionItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(version < __rhs.version)
        {
            return true;
        }
        else if(__rhs.version < version)
        {
            return false;
        }
        if(uptime < __rhs.uptime)
        {
            return true;
        }
        else if(__rhs.uptime < uptime)
        {
            return false;
        }
        if(info < __rhs.info)
        {
            return true;
        }
        else if(__rhs.info < info)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const EngineVersionItem& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const EngineVersionItem& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const EngineVersionItem& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const EngineVersionItem& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Rpc::EngineVersionItem> EngineVersionItemSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Rpc::EngineVersionItem>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Rpc::EngineVersionItem, S>
{
    static void write(S* __os, const ::Rpc::EngineVersionItem& v)
    {
        __os->write(v.name);
        __os->write(v.version);
        __os->write(v.uptime);
        __os->write(v.info);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::Rpc::EngineVersionItem, S>
{
    static void read(S* __is, ::Rpc::EngineVersionItem& v)
    {
        __is->read(v.name);
        __is->read(v.version);
        __is->read(v.uptime);
        __is->read(v.info);
        __is->read(v.state);
    }
};

}

namespace Rpc
{

class Callback_EngineVersionBrowser_next_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionBrowser_next_Base> Callback_EngineVersionBrowser_nextPtr;

class Callback_EngineVersionBrowser_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EngineVersionBrowser_finish_Base> Callback_EngineVersionBrowser_finishPtr;

class Callback_Uploader_write_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Uploader_write_Base> Callback_Uploader_writePtr;

class Callback_Uploader_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Uploader_finish_Base> Callback_Uploader_finishPtr;

class Callback_Uploader_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Uploader_cancel_Base> Callback_Uploader_cancelPtr;

class Callback_Downloader_read_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_read_Base> Callback_Downloader_readPtr;

class Callback_Downloader_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_finish_Base> Callback_Downloader_finishPtr;

class Callback_Downloader_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_cancel_Base> Callback_Downloader_cancelPtr;

class Callback_Session_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_destroy_Base> Callback_Session_destroyPtr;

class Callback_Session_refresh_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_refresh_Base> Callback_Session_refreshPtr;

class Callback_Session_browseEngineVersions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_browseEngineVersions_Base> Callback_Session_browseEngineVersionsPtr;

class Callback_Session_uploadEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_uploadEngineVersion_Base> Callback_Session_uploadEngineVersionPtr;

class Callback_Session_downloadEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_downloadEngineVersion_Base> Callback_Session_downloadEngineVersionPtr;

class Callback_Session_removeEngineVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_removeEngineVersion_Base> Callback_Session_removeEngineVersionPtr;

}

namespace IceProxy
{

namespace Rpc
{

class EngineVersionBrowser : virtual public ::IceProxy::Ice::Object
{
public:

    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::EngineVersionItemSeq& __p_items)
    {
        return next(__p_n, __p_items, 0);
    }
    ::Rpc::ErrorCode next(::Ice::Int __p_n, ::Rpc::EngineVersionItemSeq& __p_items, const ::Ice::Context& __ctx)
    {
        return next(__p_n, __p_items, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_next(__p_n, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_next(__p_n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n)
    {
        return begin_next(__p_n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx)
    {
        return begin_next(__p_n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Rpc::Callback_EngineVersionBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_next(::Ice::Int __p_n, const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionBrowser_nextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_next(__p_n, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_next(::Rpc::EngineVersionItemSeq& __p_items, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::EngineVersionItemSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode finish()
    {
        return finish(0);
    }
    ::Rpc::ErrorCode finish(const ::Ice::Context& __ctx)
    {
        return finish(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finish()
    {
        return begin_finish(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx)
    {
        return begin_finish(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_EngineVersionBrowser_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Rpc::Callback_EngineVersionBrowser_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode finish(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_secure(bool __secure) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_twoway() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_oneway() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_batchOneway() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_datagram() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_batchDatagram() const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_compress(bool __compress) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EngineVersionBrowser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<EngineVersionBrowser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Uploader : virtual public ::IceProxy::Ice::Object
{
public:

    ::Rpc::ErrorCode write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes)
    {
        return write(__p_offset, __p_bytes, 0);
    }
    ::Rpc::ErrorCode write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context& __ctx)
    {
        return write(__p_offset, __p_bytes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_write(__p_offset, __p_bytes, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_write(__p_offset, __p_bytes, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_write(__p_offset, __p_bytes, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_write(__p_offset, __p_bytes, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes)
    {
        return begin_write(__p_offset, __p_bytes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context& __ctx)
    {
        return begin_write(__p_offset, __p_bytes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_offset, __p_bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_offset, __p_bytes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Rpc::Callback_Uploader_writePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_offset, __p_bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context& __ctx, const ::Rpc::Callback_Uploader_writePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_offset, __p_bytes, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_write(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode write(::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_write(::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode finish(::Ice::Int __p_crc32)
    {
        return finish(__p_crc32, 0);
    }
    ::Rpc::ErrorCode finish(::Ice::Int __p_crc32, const ::Ice::Context& __ctx)
    {
        return finish(__p_crc32, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(::Ice::Int __p_crc32, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(__p_crc32, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(::Ice::Int __p_crc32, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(__p_crc32, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(::Ice::Int __p_crc32, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(__p_crc32, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(::Ice::Int __p_crc32, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(__p_crc32, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finish(::Ice::Int __p_crc32, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finish(::Ice::Int __p_crc32)
    {
        return begin_finish(__p_crc32, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(::Ice::Int __p_crc32, const ::Ice::Context& __ctx)
    {
        return begin_finish(__p_crc32, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(::Ice::Int __p_crc32, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(__p_crc32, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(::Ice::Int __p_crc32, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(__p_crc32, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(::Ice::Int __p_crc32, const ::Rpc::Callback_Uploader_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(__p_crc32, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(::Ice::Int __p_crc32, const ::Ice::Context& __ctx, const ::Rpc::Callback_Uploader_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(__p_crc32, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode finish(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel()
    {
        cancel(0);
    }
    void cancel(const ::Ice::Context& __ctx)
    {
        cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_Uploader_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Rpc::Callback_Uploader_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Uploader> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_secure(bool __secure) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_twoway() const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_oneway() const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_batchOneway() const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_datagram() const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_batchDatagram() const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_compress(bool __compress) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Uploader> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Uploader*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Downloader : virtual public ::IceProxy::Ice::Object
{
public:

    ::Rpc::ErrorCode read(::Ice::Long __p_offset, ::Ice::Int __p_num, ::Rpc::ByteSeq& __p_bytes)
    {
        return read(__p_offset, __p_num, __p_bytes, 0);
    }
    ::Rpc::ErrorCode read(::Ice::Long __p_offset, ::Ice::Int __p_num, ::Rpc::ByteSeq& __p_bytes, const ::Ice::Context& __ctx)
    {
        return read(__p_offset, __p_num, __p_bytes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(__p_offset, __p_num, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(__p_offset, __p_num, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(__p_offset, __p_num, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(__p_offset, __p_num, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num)
    {
        return begin_read(__p_offset, __p_num, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context& __ctx)
    {
        return begin_read(__p_offset, __p_num, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_num, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Rpc::Callback_Downloader_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::Rpc::Callback_Downloader_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_num, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_read(::Rpc::ByteSeq& __p_bytes, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode read(::Ice::Long, ::Ice::Int, ::Rpc::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_read(::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode finish()
    {
        return finish(0);
    }
    ::Rpc::ErrorCode finish(const ::Ice::Context& __ctx)
    {
        return finish(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_finish(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_finish()
    {
        return begin_finish(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx)
    {
        return begin_finish(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_Downloader_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Rpc::Callback_Downloader_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode finish(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel()
    {
        cancel(0);
    }
    void cancel(const ::Ice::Context& __ctx)
    {
        cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_Downloader_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Rpc::Callback_Downloader_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Downloader> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_secure(bool __secure) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_twoway() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_oneway() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_batchOneway() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_datagram() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_batchDatagram() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_compress(bool __compress) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Session : virtual public ::IceProxy::Ice::Object
{
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Rpc::Callback_Session_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void refresh()
    {
        refresh(0);
    }
    void refresh(const ::Ice::Context& __ctx)
    {
        refresh(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_refresh()
    {
        return begin_refresh(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx)
    {
        return begin_refresh(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Rpc::Callback_Session_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    void end_refresh(const ::Ice::AsyncResultPtr&);
    
private:

    void refresh(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode browseEngineVersions(::Rpc::EngineVersionBrowserPrx& __p_browser)
    {
        return browseEngineVersions(__p_browser, 0);
    }
    ::Rpc::ErrorCode browseEngineVersions(::Rpc::EngineVersionBrowserPrx& __p_browser, const ::Ice::Context& __ctx)
    {
        return browseEngineVersions(__p_browser, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseEngineVersions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseEngineVersions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_browseEngineVersions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_browseEngineVersions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_browseEngineVersions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_browseEngineVersions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_browseEngineVersions()
    {
        return begin_browseEngineVersions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(const ::Ice::Context& __ctx)
    {
        return begin_browseEngineVersions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(const ::Rpc::Callback_Session_browseEngineVersionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_browseEngineVersions(const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_browseEngineVersionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_browseEngineVersions(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_browseEngineVersions(::Rpc::EngineVersionBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode browseEngineVersions(::Rpc::EngineVersionBrowserPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_browseEngineVersions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, ::Rpc::UploaderPrx& __p_uploader)
    {
        return uploadEngineVersion(__p_name, __p_version, __p_info, __p_uploader, 0);
    }
    ::Rpc::ErrorCode uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, ::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context& __ctx)
    {
        return uploadEngineVersion(__p_name, __p_version, __p_info, __p_uploader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadEngineVersion(__p_name, __p_version, __p_info, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uploadEngineVersion(__p_name, __p_version, __p_info, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info)
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Rpc::Callback_Session_uploadEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uploadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_uploadEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uploadEngineVersion(__p_name, __p_version, __p_info, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_uploadEngineVersion(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode uploadEngineVersion(const ::std::string&, const ::std::string&, const ::std::string&, ::Rpc::UploaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uploadEngineVersion(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::DownloaderPrx& __p_downloader)
    {
        return downloadEngineVersion(__p_name, __p_version, __p_downloader, 0);
    }
    ::Rpc::ErrorCode downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context& __ctx)
    {
        return downloadEngineVersion(__p_name, __p_version, __p_downloader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadEngineVersion(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_downloadEngineVersion(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_Session_downloadEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_downloadEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_downloadEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_downloadEngineVersion(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode downloadEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_downloadEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return removeEngineVersion(__p_name, __p_version, 0);
    }
    ::Rpc::ErrorCode removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return removeEngineVersion(__p_name, __p_version, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeEngineVersion(__p_name, __p_version, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeEngineVersion(__p_name, __p_version, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version)
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx)
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Rpc::Callback_Session_removeEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context& __ctx, const ::Rpc::Callback_Session_removeEngineVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEngineVersion(__p_name, __p_version, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_removeEngineVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode removeEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Session> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_secure(bool __secure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_twoway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_oneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchOneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_datagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchDatagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_compress(bool __compress) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Rpc
{

class EngineVersionBrowser : virtual public ::Ice::Object
{
public:

    typedef EngineVersionBrowserPrx ProxyType;
    typedef EngineVersionBrowserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode next(::Ice::Int, ::Rpc::EngineVersionItemSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___next(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode finish(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const EngineVersionBrowser& l, const EngineVersionBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const EngineVersionBrowser& l, const EngineVersionBrowser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Uploader : virtual public ::Ice::Object
{
public:

    typedef UploaderPrx ProxyType;
    typedef UploaderPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode write(::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___write(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode finish(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Uploader& l, const Uploader& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Uploader& l, const Uploader& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Downloader : virtual public ::Ice::Object
{
public:

    typedef DownloaderPrx ProxyType;
    typedef DownloaderPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode read(::Ice::Long, ::Ice::Int, ::Rpc::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___read(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode finish(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Downloader& l, const Downloader& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Downloader& l, const Downloader& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Session : virtual public ::Ice::Object
{
public:

    typedef SessionPrx ProxyType;
    typedef SessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refresh(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refresh(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode browseEngineVersions(::Rpc::EngineVersionBrowserPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___browseEngineVersions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode uploadEngineVersion(const ::std::string&, const ::std::string&, const ::std::string&, ::Rpc::UploaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uploadEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode downloadEngineVersion(const ::std::string&, const ::std::string&, ::Rpc::DownloaderPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___downloadEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode removeEngineVersion(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeEngineVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Rpc
{

template<class T>
class CallbackNC_EngineVersionBrowser_next : public Callback_EngineVersionBrowser_next_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&);

    CallbackNC_EngineVersionBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionBrowserPrx __proxy = ::Rpc::EngineVersionBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionItemSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, items);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionBrowser_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionBrowser_next : public Callback_EngineVersionBrowser_next_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&, const CT&);

    Callback_EngineVersionBrowser_next(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionBrowserPrx __proxy = ::Rpc::EngineVersionBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionItemSeq items;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_next(items, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, items, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionBrowser_nextPtr
newCallback_EngineVersionBrowser_next(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionItemSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionBrowser_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EngineVersionBrowser_finish : public Callback_EngineVersionBrowser_finish_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_EngineVersionBrowser_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionBrowserPrx __proxy = ::Rpc::EngineVersionBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_EngineVersionBrowser_finishPtr
newCallback_EngineVersionBrowser_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionBrowser_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EngineVersionBrowser_finishPtr
newCallback_EngineVersionBrowser_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EngineVersionBrowser_finish<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EngineVersionBrowser_finish : public Callback_EngineVersionBrowser_finish_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_EngineVersionBrowser_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::EngineVersionBrowserPrx __proxy = ::Rpc::EngineVersionBrowserPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_EngineVersionBrowser_finishPtr
newCallback_EngineVersionBrowser_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionBrowser_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EngineVersionBrowser_finishPtr
newCallback_EngineVersionBrowser_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EngineVersionBrowser_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Uploader_write : public Callback_Uploader_write_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Uploader_write(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::UploaderPrx __proxy = ::Rpc::UploaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_write(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Uploader_writePtr
newCallback_Uploader_write(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_write<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Uploader_writePtr
newCallback_Uploader_write(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_write<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Uploader_write : public Callback_Uploader_write_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Uploader_write(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::UploaderPrx __proxy = ::Rpc::UploaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_write(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Uploader_writePtr
newCallback_Uploader_write(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_write<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Uploader_writePtr
newCallback_Uploader_write(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_write<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Uploader_finish : public Callback_Uploader_finish_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Uploader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::UploaderPrx __proxy = ::Rpc::UploaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Uploader_finishPtr
newCallback_Uploader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Uploader_finishPtr
newCallback_Uploader_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_finish<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Uploader_finish : public Callback_Uploader_finish_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Uploader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::UploaderPrx __proxy = ::Rpc::UploaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Uploader_finishPtr
newCallback_Uploader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Uploader_finishPtr
newCallback_Uploader_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Uploader_cancel : public Callback_Uploader_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Uploader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Uploader_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Uploader_cancel : public Callback_Uploader_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Uploader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Uploader_cancelPtr
newCallback_Uploader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Uploader_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Downloader_read : public Callback_Downloader_read_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&);

    CallbackNC_Downloader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ByteSeq bytes;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_read(bytes, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, bytes);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Downloader_readPtr
newCallback_Downloader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_read<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_readPtr
newCallback_Downloader_read(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_read<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Downloader_read : public Callback_Downloader_read_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&, const CT&);

    Callback_Downloader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ByteSeq bytes;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_read(bytes, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, bytes, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Downloader_readPtr
newCallback_Downloader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_readPtr
newCallback_Downloader_read(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Downloader_finish : public Callback_Downloader_finish_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Downloader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Downloader_finish : public Callback_Downloader_finish_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Downloader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_finish(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Downloader_cancel : public Callback_Downloader_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Downloader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Downloader_cancel : public Callback_Downloader_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Downloader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_destroy : public Callback_Session_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_destroy : public Callback_Session_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_refresh : public Callback_Session_refresh_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_refresh : public Callback_Session_refresh_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_browseEngineVersions : public Callback_Session_browseEngineVersions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&);

    CallbackNC_Session_browseEngineVersions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseEngineVersions(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, browser);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseEngineVersions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_browseEngineVersions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_browseEngineVersions : public Callback_Session_browseEngineVersions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&, const CT&);

    Callback_Session_browseEngineVersions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::EngineVersionBrowserPrx browser;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_browseEngineVersions(browser, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, browser, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseEngineVersions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_browseEngineVersionsPtr
newCallback_Session_browseEngineVersions(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_browseEngineVersions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_uploadEngineVersion : public Callback_Session_uploadEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&);

    CallbackNC_Session_uploadEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadEngineVersion(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, uploader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_uploadEngineVersionPtr
newCallback_Session_uploadEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_uploadEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_uploadEngineVersionPtr
newCallback_Session_uploadEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_uploadEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_uploadEngineVersion : public Callback_Session_uploadEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&);

    Callback_Session_uploadEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::UploaderPrx uploader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_uploadEngineVersion(uploader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, uploader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_uploadEngineVersionPtr
newCallback_Session_uploadEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_uploadEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_uploadEngineVersionPtr
newCallback_Session_uploadEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::UploaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_uploadEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_downloadEngineVersion : public Callback_Session_downloadEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&);

    CallbackNC_Session_downloadEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadEngineVersion(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, downloader);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_downloadEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_downloadEngineVersion : public Callback_Session_downloadEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&);

    Callback_Session_downloadEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::DownloaderPrx downloader;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_downloadEngineVersion(downloader, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, downloader, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_downloadEngineVersionPtr
newCallback_Session_downloadEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_downloadEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_removeEngineVersion : public Callback_Session_removeEngineVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode);

    CallbackNC_Session_removeEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeEngineVersion(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_removeEngineVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_removeEngineVersion : public Callback_Session_removeEngineVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const CT&);

    Callback_Session_removeEngineVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_removeEngineVersion(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_removeEngineVersionPtr
newCallback_Session_removeEngineVersion(T* instance, void (T::*cb)(::Rpc::ErrorCode, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_removeEngineVersion<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
