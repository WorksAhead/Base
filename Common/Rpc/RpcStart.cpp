//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `RpcStart.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RpcStart.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Rpc_Start_ids[2] =
{
    "::Ice::Object",
    "::Rpc::Start"
};
const ::std::string iceC_Rpc_Start_ops[] =
{
    "downloadClient",
    "getClientVersion",
    "getServerVersion",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login"
};
const ::std::string iceC_Rpc_Start_getServerVersion_name = "getServerVersion";
const ::std::string iceC_Rpc_Start_getClientVersion_name = "getClientVersion";
const ::std::string iceC_Rpc_Start_downloadClient_name = "downloadClient";
const ::std::string iceC_Rpc_Start_login_name = "login";

}

bool
Rpc::Start::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Rpc_Start_ids, iceC_Rpc_Start_ids + 2, s);
}

::std::vector<::std::string>
Rpc::Start::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Rpc_Start_ids[0], &iceC_Rpc_Start_ids[2]);
}

::std::string
Rpc::Start::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Rpc::Start::ice_staticId()
{
    static const ::std::string typeId = "::Rpc::Start";
    return typeId;
}

/// \cond INTERNAL
bool
Rpc::Start::_iceD_getServerVersion(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getServerVersion(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Rpc::Start::_iceD_getClientVersion(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getClientVersion(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Rpc::Start::_iceD_downloadClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<DownloaderPrx> iceP_downloader;
    ErrorCode ret = this->downloadClient(iceP_downloader, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_downloader, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Rpc::Start::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_username;
    ::std::string iceP_password;
    istr->readAll(iceP_username, iceP_password);
    inS.endReadParams();
    ::std::shared_ptr<SessionPrx> iceP_session;
    ErrorCode ret = this->login(::std::move(iceP_username), ::std::move(iceP_password), iceP_session, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_session, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Rpc::Start::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Rpc_Start_ops, iceC_Rpc_Start_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Rpc_Start_ops)
    {
        case 0:
        {
            return _iceD_downloadClient(in, current);
        }
        case 1:
        {
            return _iceD_getClientVersion(in, current);
        }
        case 2:
        {
            return _iceD_getServerVersion(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_login(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Rpc::StartPrx::_iceI_getServerVersion(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Rpc_Start_getServerVersion_name);
    outAsync->invoke(iceC_Rpc_Start_getServerVersion_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Rpc::StartPrx::_iceI_getClientVersion(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Rpc_Start_getClientVersion_name);
    outAsync->invoke(iceC_Rpc_Start_getClientVersion_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Rpc::StartPrx::_iceI_downloadClient(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Start::DownloadClientResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Rpc_Start_downloadClient_name);
    outAsync->invoke(iceC_Rpc_Start_downloadClient_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Start::DownloadClientResult v;
            istr->readAll(v.downloader, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Rpc::StartPrx::_iceI_login(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Start::LoginResult>>& outAsync, const ::std::string& iceP_username, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Rpc_Start_login_name);
    outAsync->invoke(iceC_Rpc_Start_login_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_username, iceP_password);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Start::LoginResult v;
            istr->readAll(v.session, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Rpc::StartPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StartPrx>();
}
/// \endcond

const ::std::string&
Rpc::StartPrx::ice_staticId()
{
    return Start::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Rpc_Start_getServerVersion_name = "getServerVersion";

const ::std::string iceC_Rpc_Start_getClientVersion_name = "getClientVersion";

const ::std::string iceC_Rpc_Start_downloadClient_name = "downloadClient";

const ::std::string iceC_Rpc_Start_login_name = "login";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(Start* p) { return p; }

void
::IceProxy::Rpc::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Start>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Start;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Rpc::Start::_iceI_begin_getServerVersion(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Rpc_Start_getServerVersion_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Rpc_Start_getServerVersion_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Rpc_Start_getServerVersion_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Rpc_Start_getServerVersion_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Rpc::Start::end_getServerVersion(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Rpc_Start_getServerVersion_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Start::_iceI_begin_getClientVersion(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Rpc_Start_getClientVersion_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Rpc_Start_getClientVersion_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Rpc_Start_getClientVersion_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Rpc_Start_getClientVersion_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Rpc::Start::end_getClientVersion(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Rpc_Start_getClientVersion_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Start::_iceI_begin_downloadClient(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Rpc_Start_downloadClient_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Rpc_Start_downloadClient_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Rpc_Start_downloadClient_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Rpc_Start_downloadClient_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Rpc::ErrorCode
IceProxy::Rpc::Start::end_downloadClient(::Rpc::DownloaderPrx& iceP_downloader, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Rpc_Start_downloadClient_name);
    ::Rpc::ErrorCode ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_downloader);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Rpc::Start::_iceI_end_downloadClient(::Rpc::DownloaderPrx& iceP_downloader, ::Rpc::ErrorCode& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Rpc_Start_downloadClient_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_downloader);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Start::_iceI_begin_login(const ::std::string& iceP_username, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Rpc_Start_login_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Rpc_Start_login_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Rpc_Start_login_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_username);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_Rpc_Start_login_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Rpc::ErrorCode
IceProxy::Rpc::Start::end_login(::Rpc::SessionPrx& iceP_session, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Rpc_Start_login_name);
    ::Rpc::ErrorCode ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_session);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Rpc::Start::_iceI_end_login(::Rpc::SessionPrx& iceP_session, ::Rpc::ErrorCode& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Rpc_Start_login_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_session);
    istr->read(ret);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Rpc::Start::_newInstance() const
{
    return new Start;
}
/// \endcond

const ::std::string&
IceProxy::Rpc::Start::ice_staticId()
{
    return ::Rpc::Start::ice_staticId();
}

Rpc::Start::~Start()
{
}

/// \cond INTERNAL
::Ice::Object* Rpc::upCast(Start* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Rpc_Start_ids[2] =
{
    "::Ice::Object",
    "::Rpc::Start"
};

}

bool
Rpc::Start::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Rpc_Start_ids, iceC_Rpc_Start_ids + 2, s);
}

::std::vector< ::std::string>
Rpc::Start::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Rpc_Start_ids[0], &iceC_Rpc_Start_ids[2]);
}

const ::std::string&
Rpc::Start::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Rpc::Start::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::Start";
    return typeId;
#else
    return iceC_Rpc_Start_ids[1];
#endif
}

/// \cond INTERNAL
bool
Rpc::Start::_iceD_getServerVersion(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getServerVersion(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Rpc::Start::_iceD_getClientVersion(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getClientVersion(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Rpc::Start::_iceD_downloadClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    DownloaderPrx iceP_downloader;
    ErrorCode ret = this->downloadClient(iceP_downloader, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_downloader);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Rpc::Start::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_username;
    ::std::string iceP_password;
    istr->read(iceP_username);
    istr->read(iceP_password);
    inS.endReadParams();
    SessionPrx iceP_session;
    ErrorCode ret = this->login(iceP_username, iceP_password, iceP_session, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_session);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Rpc_Start_all[] =
{
    "downloadClient",
    "getClientVersion",
    "getServerVersion",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login"
};

}

/// \cond INTERNAL
bool
Rpc::Start::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Rpc_Start_all, iceC_Rpc_Start_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Rpc_Start_all)
    {
        case 0:
        {
            return _iceD_downloadClient(in, current);
        }
        case 1:
        {
            return _iceD_getClientVersion(in, current);
        }
        case 2:
        {
            return _iceD_getServerVersion(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_login(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Rpc::Start::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Start, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Rpc::Start::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Start, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Rpc::_icePatchObjectPtr(StartPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = StartPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Start::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
