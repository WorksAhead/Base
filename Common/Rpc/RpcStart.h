//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `RpcStart.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RpcStart_h__
#define __RpcStart_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <RpcErrorCode.h>
#include <RpcSession.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Rpc
{

class Start;
class StartPrx;

}

namespace Rpc
{

class Start : public virtual ::Ice::Object
{
public:

    using ProxyType = StartPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string getServerVersion(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getServerVersion(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getClientVersion(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getClientVersion(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to downloadClient.
     */
    struct DownloadClientResult
    {
        ErrorCode returnValue;
        ::std::shared_ptr<DownloaderPrx> downloader;
    };

    virtual ErrorCode downloadClient(::std::shared_ptr<DownloaderPrx>& downloader, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_downloadClient(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to login.
     */
    struct LoginResult
    {
        ErrorCode returnValue;
        ::std::shared_ptr<SessionPrx> session;
    };

    virtual ErrorCode login(::std::string username, ::std::string password, ::std::shared_ptr<SessionPrx>& session, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_login(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Rpc
{

class StartPrx : public virtual ::Ice::Proxy<StartPrx, ::Ice::ObjectPrx>
{
public:

    ::std::string getServerVersion(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &StartPrx::_iceI_getServerVersion, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getServerVersionAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &StartPrx::_iceI_getServerVersion, context);
    }

    ::std::function<void()>
    getServerVersionAsync(::std::function<void(::std::string)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Rpc::StartPrx::_iceI_getServerVersion, context);
    }

    /// \cond INTERNAL
    void _iceI_getServerVersion(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    ::std::string getClientVersion(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &StartPrx::_iceI_getClientVersion, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getClientVersionAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &StartPrx::_iceI_getClientVersion, context);
    }

    ::std::function<void()>
    getClientVersionAsync(::std::function<void(::std::string)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Rpc::StartPrx::_iceI_getClientVersion, context);
    }

    /// \cond INTERNAL
    void _iceI_getClientVersion(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    ErrorCode downloadClient(::std::shared_ptr<DownloaderPrx>& downloader, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Start::DownloadClientResult>(true, this, &StartPrx::_iceI_downloadClient, context).get();
        downloader = ::std::move(_result.downloader);
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto downloadClientAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Start::DownloadClientResult>>().get_future())
    {
        return _makePromiseOutgoing<Start::DownloadClientResult, P>(false, this, &StartPrx::_iceI_downloadClient, context);
    }

    ::std::function<void()>
    downloadClientAsync(::std::function<void(ErrorCode, ::std::shared_ptr<DownloaderPrx>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Start::DownloadClientResult&& _result)
        {
            response(_result.returnValue, ::std::move(_result.downloader));
        };
        return _makeLamdaOutgoing<Start::DownloadClientResult>(_responseCb, ex, sent, this, &Rpc::StartPrx::_iceI_downloadClient, context);
    }

    /// \cond INTERNAL
    void _iceI_downloadClient(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Start::DownloadClientResult>>&, const ::Ice::Context&);
    /// \endcond

    ErrorCode login(const ::std::string& username, const ::std::string& password, ::std::shared_ptr<SessionPrx>& session, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Start::LoginResult>(true, this, &StartPrx::_iceI_login, username, password, context).get();
        session = ::std::move(_result.session);
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto loginAsync(const ::std::string& username, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Start::LoginResult>>().get_future())
    {
        return _makePromiseOutgoing<Start::LoginResult, P>(false, this, &StartPrx::_iceI_login, username, password, context);
    }

    ::std::function<void()>
    loginAsync(const ::std::string& username, const ::std::string& password,
               ::std::function<void(ErrorCode, ::std::shared_ptr<SessionPrx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Start::LoginResult&& _result)
        {
            response(_result.returnValue, ::std::move(_result.session));
        };
        return _makeLamdaOutgoing<Start::LoginResult>(_responseCb, ex, sent, this, &Rpc::StartPrx::_iceI_login, username, password, context);
    }

    /// \cond INTERNAL
    void _iceI_login(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Start::LoginResult>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    StartPrx() = default;
    friend ::std::shared_ptr<StartPrx> IceInternal::createProxy<StartPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Rpc
{

using StartPtr = ::std::shared_ptr<Start>;
using StartPrxPtr = ::std::shared_ptr<StartPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Rpc
{

class Start;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Start>&);
::IceProxy::Ice::Object* upCast(Start*);
/// \endcond

}

}

namespace Rpc
{

class Start;
/// \cond INTERNAL
::Ice::Object* upCast(Start*);
/// \endcond
typedef ::IceInternal::Handle< Start> StartPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Start> StartPrx;
typedef StartPrx StartPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(StartPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Rpc
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Start::begin_getServerVersion.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_getServerVersion.
 */
class Callback_Start_getServerVersion_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Start_getServerVersion_Base> Callback_Start_getServerVersionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Start::begin_getClientVersion.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_getClientVersion.
 */
class Callback_Start_getClientVersion_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Start_getClientVersion_Base> Callback_Start_getClientVersionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Start::begin_downloadClient.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_downloadClient.
 */
class Callback_Start_downloadClient_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Start_downloadClient_Base> Callback_Start_downloadClientPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Start::begin_login.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_login.
 */
class Callback_Start_login_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Start_login_Base> Callback_Start_loginPtr;

}

namespace IceProxy
{

namespace Rpc
{

class Start : public virtual ::Ice::Proxy<Start, ::IceProxy::Ice::Object>
{
public:

    ::std::string getServerVersion(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getServerVersion(_iceI_begin_getServerVersion(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getServerVersion(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getServerVersion(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getServerVersion(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerVersion(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getServerVersion(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerVersion(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getServerVersion(const ::Rpc::Callback_Start_getServerVersionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerVersion(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getServerVersion(const ::Ice::Context& context, const ::Rpc::Callback_Start_getServerVersionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getServerVersion(context, cb, cookie);
    }

    ::std::string end_getServerVersion(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getServerVersion(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getClientVersion(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getClientVersion(_iceI_begin_getClientVersion(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getClientVersion(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getClientVersion(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClientVersion(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getClientVersion(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getClientVersion(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getClientVersion(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getClientVersion(const ::Rpc::Callback_Start_getClientVersionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getClientVersion(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getClientVersion(const ::Ice::Context& context, const ::Rpc::Callback_Start_getClientVersionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getClientVersion(context, cb, cookie);
    }

    ::std::string end_getClientVersion(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getClientVersion(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Rpc::ErrorCode downloadClient(::Rpc::DownloaderPrx& downloader, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_downloadClient(downloader, _iceI_begin_downloadClient(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_downloadClient(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_downloadClient(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_downloadClient(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_downloadClient(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadClient(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_downloadClient(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadClient(const ::Rpc::Callback_Start_downloadClientPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_downloadClient(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_downloadClient(const ::Ice::Context& context, const ::Rpc::Callback_Start_downloadClientPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_downloadClient(context, cb, cookie);
    }

    ::Rpc::ErrorCode end_downloadClient(::Rpc::DownloaderPrx& downloader, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_downloadClient(::Rpc::DownloaderPrx& iceP_downloader, ::Rpc::ErrorCode& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_downloadClient(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Rpc::ErrorCode login(const ::std::string& username, const ::std::string& password, ::Rpc::SessionPrx& session, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_login(session, _iceI_begin_login(username, password, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& username, const ::std::string& password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_login(username, password, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& username, const ::std::string& password, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(username, password, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& username, const ::std::string& password, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(username, password, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& username, const ::std::string& password, const ::Rpc::Callback_Start_loginPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(username, password, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& username, const ::std::string& password, const ::Ice::Context& context, const ::Rpc::Callback_Start_loginPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(username, password, context, cb, cookie);
    }

    ::Rpc::ErrorCode end_login(::Rpc::SessionPrx& session, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_login(::Rpc::SessionPrx& iceP_session, ::Rpc::ErrorCode& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_login(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Rpc
{

class Start : public virtual ::Ice::Object
{
public:

    typedef StartPrx ProxyType;
    typedef StartPtr PointerType;

    virtual ~Start();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string getServerVersion(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getServerVersion(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getClientVersion(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getClientVersion(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ErrorCode downloadClient(DownloaderPrx& downloader, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_downloadClient(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ErrorCode login(const ::std::string& username, const ::std::string& password, SessionPrx& session, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_login(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Start& lhs, const Start& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Start& lhs, const Start& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace Rpc
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Start::begin_getServerVersion.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_getServerVersion.
 */
template<class T>
class CallbackNC_Start_getServerVersion : public Callback_Start_getServerVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Start_getServerVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getServerVersion(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getServerVersion.
 */
template<class T> Callback_Start_getServerVersionPtr
newCallback_Start_getServerVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_getServerVersion<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getServerVersion.
 */
template<class T> Callback_Start_getServerVersionPtr
newCallback_Start_getServerVersion(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_getServerVersion<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Start::begin_getServerVersion.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_getServerVersion.
 */
template<class T, typename CT>
class Callback_Start_getServerVersion : public Callback_Start_getServerVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Start_getServerVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getServerVersion(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getServerVersion.
 */
template<class T, typename CT> Callback_Start_getServerVersionPtr
newCallback_Start_getServerVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_getServerVersion<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getServerVersion.
 */
template<class T, typename CT> Callback_Start_getServerVersionPtr
newCallback_Start_getServerVersion(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_getServerVersion<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Start::begin_getClientVersion.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_getClientVersion.
 */
template<class T>
class CallbackNC_Start_getClientVersion : public Callback_Start_getClientVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Start_getClientVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getClientVersion(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getClientVersion.
 */
template<class T> Callback_Start_getClientVersionPtr
newCallback_Start_getClientVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_getClientVersion<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getClientVersion.
 */
template<class T> Callback_Start_getClientVersionPtr
newCallback_Start_getClientVersion(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_getClientVersion<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Start::begin_getClientVersion.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_getClientVersion.
 */
template<class T, typename CT>
class Callback_Start_getClientVersion : public Callback_Start_getClientVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Start_getClientVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getClientVersion(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getClientVersion.
 */
template<class T, typename CT> Callback_Start_getClientVersionPtr
newCallback_Start_getClientVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_getClientVersion<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_getClientVersion.
 */
template<class T, typename CT> Callback_Start_getClientVersionPtr
newCallback_Start_getClientVersion(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_getClientVersion<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Start::begin_downloadClient.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_downloadClient.
 */
template<class T>
class CallbackNC_Start_downloadClient : public Callback_Start_downloadClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(ErrorCode, const DownloaderPrx&);

    CallbackNC_Start_downloadClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        DownloaderPrx iceP_downloader;
        ErrorCode ret;
        try
        {
            ret = proxy->end_downloadClient(iceP_downloader, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_downloader);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_downloadClient.
 */
template<class T> Callback_Start_downloadClientPtr
newCallback_Start_downloadClient(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, const DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_downloadClient<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_downloadClient.
 */
template<class T> Callback_Start_downloadClientPtr
newCallback_Start_downloadClient(T* instance, void (T::*cb)(ErrorCode, const DownloaderPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_downloadClient<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Start::begin_downloadClient.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_downloadClient.
 */
template<class T, typename CT>
class Callback_Start_downloadClient : public Callback_Start_downloadClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(ErrorCode, const DownloaderPrx&, const CT&);

    Callback_Start_downloadClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        DownloaderPrx iceP_downloader;
        ErrorCode ret;
        try
        {
            ret = proxy->end_downloadClient(iceP_downloader, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_downloader, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_downloadClient.
 */
template<class T, typename CT> Callback_Start_downloadClientPtr
newCallback_Start_downloadClient(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, const DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_downloadClient<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_downloadClient.
 */
template<class T, typename CT> Callback_Start_downloadClientPtr
newCallback_Start_downloadClient(T* instance, void (T::*cb)(ErrorCode, const DownloaderPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_downloadClient<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Start::begin_login.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_login.
 */
template<class T>
class CallbackNC_Start_login : public Callback_Start_login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(ErrorCode, const SessionPrx&);

    CallbackNC_Start_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        SessionPrx iceP_session;
        ErrorCode ret;
        try
        {
            ret = proxy->end_login(iceP_session, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_session);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_login.
 */
template<class T> Callback_Start_loginPtr
newCallback_Start_login(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, const SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_login<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_login.
 */
template<class T> Callback_Start_loginPtr
newCallback_Start_login(T* instance, void (T::*cb)(ErrorCode, const SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Start_login<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Start::begin_login.
 * Create a wrapper instance by calling ::Rpc::newCallback_Start_login.
 */
template<class T, typename CT>
class Callback_Start_login : public Callback_Start_login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(ErrorCode, const SessionPrx&, const CT&);

    Callback_Start_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StartPrx proxy = StartPrx::uncheckedCast(result->getProxy());
        SessionPrx iceP_session;
        ErrorCode ret;
        try
        {
            ret = proxy->end_login(iceP_session, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_session, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_login.
 */
template<class T, typename CT> Callback_Start_loginPtr
newCallback_Start_login(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, const SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_login<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Start::begin_login.
 */
template<class T, typename CT> Callback_Start_loginPtr
newCallback_Start_login(T* instance, void (T::*cb)(ErrorCode, const SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Start_login<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
