// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `RpcDownloader.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RpcDownloader_h__
#define __RpcDownloader_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <RpcErrorCode.h>
#include <RpcTypedefs.h>
#include <RpcManagedObject.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Rpc
{

class Downloader;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Downloader>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Rpc::Downloader*);

}

}

namespace Rpc
{

class Downloader;
::Ice::Object* upCast(::Rpc::Downloader*);
typedef ::IceInternal::Handle< ::Rpc::Downloader> DownloaderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Downloader> DownloaderPrx;
void __patch(DownloaderPtr&, const ::Ice::ObjectPtr&);

}

namespace Rpc
{

class Callback_Downloader_getSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_getSize_Base> Callback_Downloader_getSizePtr;

class Callback_Downloader_read_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_read_Base> Callback_Downloader_readPtr;

class Callback_Downloader_finish_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_finish_Base> Callback_Downloader_finishPtr;

class Callback_Downloader_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_cancel_Base> Callback_Downloader_cancelPtr;

}

namespace IceProxy
{

namespace Rpc
{

class Downloader : virtual public ::IceProxy::Rpc::ManagedObject
{
public:

    ::Rpc::ErrorCode getSize(::Ice::Long& __p_size)
    {
        return getSize(__p_size, 0);
    }
    ::Rpc::ErrorCode getSize(::Ice::Long& __p_size, const ::Ice::Context& __ctx)
    {
        return getSize(__p_size, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSize(const ::IceInternal::Function<void (::Rpc::ErrorCode, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSize(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSize(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSize(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSize(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSize(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSize()
    {
        return begin_getSize(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& __ctx)
    {
        return begin_getSize(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Rpc::Callback_Downloader_getSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& __ctx, const ::Rpc::Callback_Downloader_getSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(&__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_getSize(::Ice::Long& __p_size, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode getSize(::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Rpc::ErrorCode read(::Ice::Long __p_offset, ::Ice::Int __p_size, ::Rpc::ByteSeq& __p_bytes)
    {
        return read(__p_offset, __p_size, __p_bytes, 0);
    }
    ::Rpc::ErrorCode read(::Ice::Long __p_offset, ::Ice::Int __p_size, ::Rpc::ByteSeq& __p_bytes, const ::Ice::Context& __ctx)
    {
        return read(__p_offset, __p_size, __p_bytes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(__p_offset, __p_size, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(__p_offset, __p_size, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(__p_offset, __p_size, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(__p_offset, __p_size, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size)
    {
        return begin_read(__p_offset, __p_size, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Ice::Context& __ctx)
    {
        return begin_read(__p_offset, __p_size, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_size, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Rpc::Callback_Downloader_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_offset, ::Ice::Int __p_size, const ::Ice::Context& __ctx, const ::Rpc::Callback_Downloader_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_offset, __p_size, &__ctx, __del, __cookie);
    }

    ::Rpc::ErrorCode end_read(::Rpc::ByteSeq& __p_bytes, const ::Ice::AsyncResultPtr&);
    
private:

    ::Rpc::ErrorCode read(::Ice::Long, ::Ice::Int, ::Rpc::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_read(::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void finish()
    {
        finish(0);
    }
    void finish(const ::Ice::Context& __ctx)
    {
        finish(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finish(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finish(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finish(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finish(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_finish()
    {
        return begin_finish(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx)
    {
        return begin_finish(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_Downloader_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& __ctx, const ::Rpc::Callback_Downloader_finishPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finish(&__ctx, __del, __cookie);
    }

    void end_finish(const ::Ice::AsyncResultPtr&);
    
private:

    void finish(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel()
    {
        cancel(0);
    }
    void cancel(const ::Ice::Context& __ctx)
    {
        cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_Downloader_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Rpc::Callback_Downloader_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Downloader> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_secure(bool __secure) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_twoway() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_oneway() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_batchOneway() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_datagram() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_batchDatagram() const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_compress(bool __compress) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Downloader> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Downloader*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Rpc
{

class Downloader : virtual public ::Rpc::ManagedObject
{
public:

    typedef DownloaderPrx ProxyType;
    typedef DownloaderPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Rpc::ErrorCode getSize(::Ice::Long&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Rpc::ErrorCode read(::Ice::Long, ::Ice::Int, ::Rpc::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___read(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void finish(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Downloader& l, const Downloader& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Downloader& l, const Downloader& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Rpc
{

template<class T>
class CallbackNC_Downloader_getSize : public Callback_Downloader_getSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, ::Ice::Long);

    CallbackNC_Downloader_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long size;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getSize(size, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, size);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_getSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(T* instance, void (T::*cb)(::Rpc::ErrorCode, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_getSize<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Downloader_getSize : public Callback_Downloader_getSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, ::Ice::Long, const CT&);

    Callback_Downloader_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long size;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_getSize(size, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, size, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_getSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(T* instance, void (T::*cb)(::Rpc::ErrorCode, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_getSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Downloader_read : public Callback_Downloader_read_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&);

    CallbackNC_Downloader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ByteSeq bytes;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_read(bytes, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, bytes);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Downloader_readPtr
newCallback_Downloader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_read<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_readPtr
newCallback_Downloader_read(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_read<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Downloader_read : public Callback_Downloader_read_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&, const CT&);

    Callback_Downloader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
        ::Rpc::ByteSeq bytes;
        ::Rpc::ErrorCode __ret;
        try
        {
            __ret = __proxy->end_read(bytes, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, bytes, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Downloader_readPtr
newCallback_Downloader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_readPtr
newCallback_Downloader_read(T* instance, void (T::*cb)(::Rpc::ErrorCode, const ::Rpc::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Downloader_finish : public Callback_Downloader_finish_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Downloader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Downloader_finish : public Callback_Downloader_finish_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Downloader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Downloader_cancel : public Callback_Downloader_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Downloader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Downloader_cancel : public Callback_Downloader_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Downloader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
