//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `RpcDownloader.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RpcDownloader_h__
#define __RpcDownloader_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <RpcErrorCode.h>
#include <RpcTypedefs.h>
#include <RpcManagedObject.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Rpc
{

class Downloader;
class DownloaderPrx;

}

namespace Rpc
{

class Downloader : public virtual ManagedObject
{
public:

    using ProxyType = DownloaderPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to getSize.
     */
    struct GetSizeResult
    {
        ErrorCode returnValue;
        long long int size;
    };

    virtual ErrorCode getSize(long long int& size, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getSize(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to read.
     */
    struct ReadResult
    {
        ErrorCode returnValue;
        ByteSeq bytes;
    };

    virtual ErrorCode read(long long int offset, int size, ByteSeq& bytes, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_read(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void finish(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_finish(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void cancel(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_cancel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Rpc
{

class DownloaderPrx : public virtual ::Ice::Proxy<DownloaderPrx, ManagedObjectPrx>
{
public:

    ErrorCode getSize(long long int& size, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Downloader::GetSizeResult>(true, this, &DownloaderPrx::_iceI_getSize, context).get();
        size = _result.size;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto getSizeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Downloader::GetSizeResult>>().get_future())
    {
        return _makePromiseOutgoing<Downloader::GetSizeResult, P>(false, this, &DownloaderPrx::_iceI_getSize, context);
    }

    ::std::function<void()>
    getSizeAsync(::std::function<void(ErrorCode, long long int)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Downloader::GetSizeResult&& _result)
        {
            response(_result.returnValue, _result.size);
        };
        return _makeLamdaOutgoing<Downloader::GetSizeResult>(_responseCb, ex, sent, this, &Rpc::DownloaderPrx::_iceI_getSize, context);
    }

    /// \cond INTERNAL
    void _iceI_getSize(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Downloader::GetSizeResult>>&, const ::Ice::Context&);
    /// \endcond

    ErrorCode read(long long int offset, int size, ByteSeq& bytes, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Downloader::ReadResult>(true, this, &DownloaderPrx::_iceI_read, offset, size, context).get();
        bytes = ::std::move(_result.bytes);
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto readAsync(long long int offset, int size, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Downloader::ReadResult>>().get_future())
    {
        return _makePromiseOutgoing<Downloader::ReadResult, P>(false, this, &DownloaderPrx::_iceI_read, offset, size, context);
    }

    ::std::function<void()>
    readAsync(long long int offset, int size,
              ::std::function<void(ErrorCode, ByteSeq)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Downloader::ReadResult&& _result)
        {
            response(_result.returnValue, ::std::move(_result.bytes));
        };
        return _makeLamdaOutgoing<Downloader::ReadResult>(_responseCb, ex, sent, this, &Rpc::DownloaderPrx::_iceI_read, offset, size, context);
    }

    /// \cond INTERNAL
    void _iceI_read(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Downloader::ReadResult>>&, long long int, int, const ::Ice::Context&);
    /// \endcond

    void finish(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &DownloaderPrx::_iceI_finish, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto finishAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &DownloaderPrx::_iceI_finish, context);
    }

    ::std::function<void()>
    finishAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Rpc::DownloaderPrx::_iceI_finish, context);
    }

    /// \cond INTERNAL
    void _iceI_finish(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void cancel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &DownloaderPrx::_iceI_cancel, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto cancelAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &DownloaderPrx::_iceI_cancel, context);
    }

    ::std::function<void()>
    cancelAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Rpc::DownloaderPrx::_iceI_cancel, context);
    }

    /// \cond INTERNAL
    void _iceI_cancel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    DownloaderPrx() = default;
    friend ::std::shared_ptr<DownloaderPrx> IceInternal::createProxy<DownloaderPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Rpc
{

using DownloaderPtr = ::std::shared_ptr<Downloader>;
using DownloaderPrxPtr = ::std::shared_ptr<DownloaderPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Rpc
{

class Downloader;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Downloader>&);
::IceProxy::Ice::Object* upCast(Downloader*);
/// \endcond

}

}

namespace Rpc
{

class Downloader;
/// \cond INTERNAL
::Ice::Object* upCast(Downloader*);
/// \endcond
typedef ::IceInternal::Handle< Downloader> DownloaderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Downloader> DownloaderPrx;
typedef DownloaderPrx DownloaderPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(DownloaderPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Rpc
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Downloader::begin_getSize.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_getSize.
 */
class Callback_Downloader_getSize_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_getSize_Base> Callback_Downloader_getSizePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Downloader::begin_read.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_read.
 */
class Callback_Downloader_read_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_read_Base> Callback_Downloader_readPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Downloader::begin_finish.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_finish.
 */
class Callback_Downloader_finish_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_finish_Base> Callback_Downloader_finishPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Rpc::Downloader::begin_cancel.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_cancel.
 */
class Callback_Downloader_cancel_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Downloader_cancel_Base> Callback_Downloader_cancelPtr;

}

namespace IceProxy
{

namespace Rpc
{

class Downloader : public virtual ::Ice::Proxy<Downloader, ::IceProxy::Rpc::ManagedObject>
{
public:

    ::Rpc::ErrorCode getSize(::Ice::Long& size, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSize(size, _iceI_begin_getSize(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSize(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSize(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSize(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Rpc::Callback_Downloader_getSizePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSize(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& context, const ::Rpc::Callback_Downloader_getSizePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSize(context, cb, cookie);
    }

    ::Rpc::ErrorCode end_getSize(::Ice::Long& size, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getSize(::Ice::Long& iceP_size, ::Rpc::ErrorCode& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSize(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Rpc::ErrorCode read(::Ice::Long offset, ::Ice::Int size, ::Rpc::ByteSeq& bytes, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_read(bytes, _iceI_begin_read(offset, size, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_read(offset, size, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long offset, ::Ice::Int size, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_read(offset, size, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_read(offset, size, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long offset, ::Ice::Int size, const ::Rpc::Callback_Downloader_readPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_read(offset, size, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long offset, ::Ice::Int size, const ::Ice::Context& context, const ::Rpc::Callback_Downloader_readPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_read(offset, size, context, cb, cookie);
    }

    ::Rpc::ErrorCode end_read(::Rpc::ByteSeq& bytes, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_read(::Rpc::ByteSeq& iceP_bytes, ::Rpc::ErrorCode& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_read(::Ice::Long, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void finish(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_finish(_iceI_begin_finish(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_finish(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Rpc::Callback_Downloader_finishPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::Ice::Context& context, const ::Rpc::Callback_Downloader_finishPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(context, cb, cookie);
    }

    void end_finish(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_finish(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void cancel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_cancel(_iceI_begin_cancel(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_cancel(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancel(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Rpc::Callback_Downloader_cancelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& context, const ::Rpc::Callback_Downloader_cancelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancel(context, cb, cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_cancel(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Rpc
{

class Downloader : virtual public ManagedObject
{
public:

    typedef DownloaderPrx ProxyType;
    typedef DownloaderPtr PointerType;

    virtual ~Downloader();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ErrorCode getSize(::Ice::Long& size, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getSize(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ErrorCode read(::Ice::Long offset, ::Ice::Int size, ByteSeq& bytes, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_read(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void finish(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_finish(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void cancel(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_cancel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Downloader& lhs, const Downloader& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Downloader& lhs, const Downloader& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace Rpc
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Downloader::begin_getSize.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_getSize.
 */
template<class T>
class CallbackNC_Downloader_getSize : public Callback_Downloader_getSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(ErrorCode, ::Ice::Long);

    CallbackNC_Downloader_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        DownloaderPrx proxy = DownloaderPrx::uncheckedCast(result->getProxy());
        ::Ice::Long iceP_size;
        ErrorCode ret;
        try
        {
            ret = proxy->end_getSize(iceP_size, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_size);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_getSize.
 */
template<class T> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_getSize<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_getSize.
 */
template<class T> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(T* instance, void (T::*cb)(ErrorCode, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_getSize<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Downloader::begin_getSize.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_getSize.
 */
template<class T, typename CT>
class Callback_Downloader_getSize : public Callback_Downloader_getSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(ErrorCode, ::Ice::Long, const CT&);

    Callback_Downloader_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        DownloaderPrx proxy = DownloaderPrx::uncheckedCast(result->getProxy());
        ::Ice::Long iceP_size;
        ErrorCode ret;
        try
        {
            ret = proxy->end_getSize(iceP_size, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_size, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_getSize.
 */
template<class T, typename CT> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_getSize<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_getSize.
 */
template<class T, typename CT> Callback_Downloader_getSizePtr
newCallback_Downloader_getSize(T* instance, void (T::*cb)(ErrorCode, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_getSize<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Downloader::begin_read.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_read.
 */
template<class T>
class CallbackNC_Downloader_read : public Callback_Downloader_read_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(ErrorCode, const ByteSeq&);

    CallbackNC_Downloader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        DownloaderPrx proxy = DownloaderPrx::uncheckedCast(result->getProxy());
        ByteSeq iceP_bytes;
        ErrorCode ret;
        try
        {
            ret = proxy->end_read(iceP_bytes, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_bytes);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_read.
 */
template<class T> Callback_Downloader_readPtr
newCallback_Downloader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, const ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_read<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_read.
 */
template<class T> Callback_Downloader_readPtr
newCallback_Downloader_read(T* instance, void (T::*cb)(ErrorCode, const ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_read<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Downloader::begin_read.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_read.
 */
template<class T, typename CT>
class Callback_Downloader_read : public Callback_Downloader_read_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(ErrorCode, const ByteSeq&, const CT&);

    Callback_Downloader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        DownloaderPrx proxy = DownloaderPrx::uncheckedCast(result->getProxy());
        ByteSeq iceP_bytes;
        ErrorCode ret;
        try
        {
            ret = proxy->end_read(iceP_bytes, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_bytes, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_read.
 */
template<class T, typename CT> Callback_Downloader_readPtr
newCallback_Downloader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(ErrorCode, const ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_read<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_read.
 */
template<class T, typename CT> Callback_Downloader_readPtr
newCallback_Downloader_read(T* instance, void (T::*cb)(ErrorCode, const ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_read<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Downloader::begin_finish.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_finish.
 */
template<class T>
class CallbackNC_Downloader_finish : public Callback_Downloader_finish_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Downloader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_finish<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Downloader::begin_finish.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_finish.
 */
template<class T, typename CT>
class Callback_Downloader_finish : public Callback_Downloader_finish_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Downloader_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_finish.
 */
template<class T, typename CT> Callback_Downloader_finishPtr
newCallback_Downloader_finish(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_finish<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Rpc::Downloader::begin_cancel.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_cancel.
 */
template<class T>
class CallbackNC_Downloader_cancel : public Callback_Downloader_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Downloader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Downloader_cancel<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Rpc::Downloader::begin_cancel.
 * Create a wrapper instance by calling ::Rpc::newCallback_Downloader_cancel.
 */
template<class T, typename CT>
class Callback_Downloader_cancel : public Callback_Downloader_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Downloader_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Rpc::Downloader::begin_cancel.
 */
template<class T, typename CT> Callback_Downloader_cancelPtr
newCallback_Downloader_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Downloader_cancel<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
