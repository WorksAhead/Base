// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `RpcSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RpcSession.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Rpc__EngineBrowser__next_name = "next";

const ::std::string __Rpc__EngineBrowser__finish_name = "finish";

const ::std::string __Rpc__Uploader__write_name = "write";

const ::std::string __Rpc__Uploader__finish_name = "finish";

const ::std::string __Rpc__Uploader__cancel_name = "cancel";

const ::std::string __Rpc__Downloader__read_name = "read";

const ::std::string __Rpc__Downloader__finish_name = "finish";

const ::std::string __Rpc__Downloader__cancel_name = "cancel";

const ::std::string __Rpc__Session__destroy_name = "destroy";

const ::std::string __Rpc__Session__refresh_name = "refresh";

const ::std::string __Rpc__Session__browseEngines_name = "browseEngines";

const ::std::string __Rpc__Session__uploadEngine_name = "uploadEngine";

const ::std::string __Rpc__Session__downloadEngine_name = "downloadEngine";

const ::std::string __Rpc__Session__removeEngine_name = "removeEngine";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::EngineBrowser* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineBrowser>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::EngineBrowser;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineBrowser::next(::Ice::Int __p_n, ::Rpc::EngineItemSeq& __p_items, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineBrowser__next_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineBrowser__next_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineBrowser::begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineBrowser__next_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineBrowser__next_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineBrowser__next_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineBrowser::__begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineItemSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineBrowserPrx __proxy = ::Rpc::EngineBrowserPrx::uncheckedCast(__result->getProxy());
            ::Rpc::EngineItemSeq __p_items;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_next(__p_items, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_items);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineItemSeq&)> _response;
    };
    return begin_next(__p_n, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineBrowser::end_next(::Rpc::EngineItemSeq& __p_items, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineBrowser__next_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineBrowser::finish(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineBrowser__finish_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineBrowser__finish_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineBrowser::begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineBrowser__finish_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineBrowser__finish_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineBrowser__finish_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineBrowser::__begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineBrowserPrx __proxy = ::Rpc::EngineBrowserPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_finish(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_finish(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineBrowser::end_finish(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineBrowser__finish_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::EngineBrowser::ice_staticId()
{
    return ::Rpc::EngineBrowser::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::EngineBrowser::__newInstance() const
{
    return new EngineBrowser;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::Uploader* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Uploader>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::Uploader;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::Uploader::write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Uploader__write_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Uploader__write_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_offset);
        __os->write(__p_bytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Uploader::begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Uploader__write_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Uploader__write_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Uploader__write_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_offset);
        __os->write(__p_bytes);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Uploader::__begin_write(::Ice::Long __p_offset, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::UploaderPrx __proxy = ::Rpc::UploaderPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_write(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_write(__p_offset, __p_bytes, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Uploader::end_write(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Uploader__write_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Uploader::finish(::Ice::Int __p_crc32, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Uploader__finish_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Uploader__finish_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_crc32);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Uploader::begin_finish(::Ice::Int __p_crc32, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Uploader__finish_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Uploader__finish_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Uploader__finish_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_crc32);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Uploader::__begin_finish(::Ice::Int __p_crc32, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::UploaderPrx __proxy = ::Rpc::UploaderPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_finish(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_finish(__p_crc32, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Uploader::end_finish(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Uploader__finish_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Rpc::Uploader::cancel(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__Uploader__cancel_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Uploader::begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Uploader__cancel_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Uploader__cancel_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::Uploader::end_cancel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__Uploader__cancel_name);
}

const ::std::string&
IceProxy::Rpc::Uploader::ice_staticId()
{
    return ::Rpc::Uploader::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::Uploader::__newInstance() const
{
    return new Uploader;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::Downloader* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Downloader>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::Downloader;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::Downloader::read(::Ice::Long __p_offset, ::Ice::Int __p_num, ::Rpc::ByteSeq& __p_bytes, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Downloader__read_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Downloader__read_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_offset);
        __os->write(__p_num);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_bytes);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Downloader::begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Downloader__read_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Downloader__read_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Downloader__read_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_offset);
        __os->write(__p_num);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Downloader::__begin_read(::Ice::Long __p_offset, ::Ice::Int __p_num, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ByteSeq __p_bytes;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_read(__p_bytes, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_bytes);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ByteSeq&)> _response;
    };
    return begin_read(__p_offset, __p_num, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Downloader::end_read(::Rpc::ByteSeq& __p_bytes, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Downloader__read_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_bytes);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Downloader::finish(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Downloader__finish_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Downloader__finish_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Downloader::begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Downloader__finish_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Downloader__finish_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Downloader__finish_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Downloader::__begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::DownloaderPrx __proxy = ::Rpc::DownloaderPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_finish(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_finish(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Downloader::end_finish(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Downloader__finish_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Rpc::Downloader::cancel(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__Downloader__cancel_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Downloader::begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Downloader__cancel_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Downloader__cancel_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::Downloader::end_cancel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__Downloader__cancel_name);
}

const ::std::string&
IceProxy::Rpc::Downloader::ice_staticId()
{
    return ::Rpc::Downloader::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::Downloader::__newInstance() const
{
    return new Downloader;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::Session* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Session>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::Session;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Rpc::Session::destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__Session__destroy_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__destroy_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__destroy_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::Session::end_destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__Session__destroy_name);
}

void
IceProxy::Rpc::Session::refresh(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__Session__refresh_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_refresh(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__refresh_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__refresh_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::Session::end_refresh(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__Session__refresh_name);
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::browseEngines(::Rpc::EngineBrowserPrx& __p_browser, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__browseEngines_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__browseEngines_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_browseEngines(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__browseEngines_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__browseEngines_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__browseEngines_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_browseEngines(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineBrowserPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::EngineBrowserPrx __p_browser;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_browseEngines(__p_browser, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_browser);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineBrowserPrx&)> _response;
    };
    return begin_browseEngines(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_browseEngines(::Rpc::EngineBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__browseEngines_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::uploadEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, ::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__uploadEngine_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__uploadEngine_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __os->write(__p_info);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_uploadEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__uploadEngine_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__uploadEngine_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__uploadEngine_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __os->write(__p_info);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_uploadEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UploaderPrx __p_uploader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_uploadEngine(__p_uploader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_uploader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)> _response;
    };
    return begin_uploadEngine(__p_name, __p_version, __p_info, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_uploadEngine(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__uploadEngine_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::downloadEngine(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__downloadEngine_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__downloadEngine_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_downloadEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__downloadEngine_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__downloadEngine_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__downloadEngine_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_downloadEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::DownloaderPrx __p_downloader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_downloadEngine(__p_downloader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_downloader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)> _response;
    };
    return begin_downloadEngine(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_downloadEngine(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__downloadEngine_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::removeEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__removeEngine_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__removeEngine_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_removeEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__removeEngine_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__removeEngine_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__removeEngine_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_removeEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_removeEngine(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_removeEngine(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_removeEngine(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__removeEngine_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::Session::ice_staticId()
{
    return ::Rpc::Session::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::Session::__newInstance() const
{
    return new Session;
}

::Ice::Object* Rpc::upCast(::Rpc::EngineBrowser* p) { return p; }

namespace
{
const ::std::string __Rpc__EngineBrowser_ids[2] =
{
    "::Ice::Object",
    "::Rpc::EngineBrowser"
};

}

bool
Rpc::EngineBrowser::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__EngineBrowser_ids, __Rpc__EngineBrowser_ids + 2, _s);
}

::std::vector< ::std::string>
Rpc::EngineBrowser::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__EngineBrowser_ids[0], &__Rpc__EngineBrowser_ids[2]);
}

const ::std::string&
Rpc::EngineBrowser::ice_id(const ::Ice::Current&) const
{
    return __Rpc__EngineBrowser_ids[1];
}

const ::std::string&
Rpc::EngineBrowser::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::EngineBrowser";
    return typeId;
#else
    return __Rpc__EngineBrowser_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::EngineBrowser::___next(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_n;
    __is->read(__p_n);
    __inS.endReadParams();
    ::Rpc::EngineItemSeq __p_items;
    ::Rpc::ErrorCode __ret = next(__p_n, __p_items, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_items);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::EngineBrowser::___finish(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ErrorCode __ret = finish(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__EngineBrowser_all[] =
{
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "next"
};

}

::Ice::DispatchStatus
Rpc::EngineBrowser::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__EngineBrowser_all, __Rpc__EngineBrowser_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__EngineBrowser_all)
    {
        case 0:
        {
            return ___finish(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___next(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::EngineBrowser::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::EngineBrowser::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(EngineBrowserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::EngineBrowserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::EngineBrowser::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::Uploader* p) { return p; }

namespace
{
const ::std::string __Rpc__Uploader_ids[2] =
{
    "::Ice::Object",
    "::Rpc::Uploader"
};

}

bool
Rpc::Uploader::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__Uploader_ids, __Rpc__Uploader_ids + 2, _s);
}

::std::vector< ::std::string>
Rpc::Uploader::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__Uploader_ids[0], &__Rpc__Uploader_ids[2]);
}

const ::std::string&
Rpc::Uploader::ice_id(const ::Ice::Current&) const
{
    return __Rpc__Uploader_ids[1];
}

const ::std::string&
Rpc::Uploader::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::Uploader";
    return typeId;
#else
    return __Rpc__Uploader_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::Uploader::___write(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_offset;
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __p_bytes;
    __is->read(__p_offset);
    __is->read(__p_bytes);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = write(__p_offset, __p_bytes, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Uploader::___finish(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_crc32;
    __is->read(__p_crc32);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = finish(__p_crc32, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Uploader::___cancel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    cancel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__Uploader_all[] =
{
    "cancel",
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "write"
};

}

::Ice::DispatchStatus
Rpc::Uploader::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__Uploader_all, __Rpc__Uploader_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__Uploader_all)
    {
        case 0:
        {
            return ___cancel(in, current);
        }
        case 1:
        {
            return ___finish(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___write(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::Uploader::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::Uploader::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(UploaderPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::UploaderPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::Uploader::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::Downloader* p) { return p; }

namespace
{
const ::std::string __Rpc__Downloader_ids[2] =
{
    "::Ice::Object",
    "::Rpc::Downloader"
};

}

bool
Rpc::Downloader::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__Downloader_ids, __Rpc__Downloader_ids + 2, _s);
}

::std::vector< ::std::string>
Rpc::Downloader::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__Downloader_ids[0], &__Rpc__Downloader_ids[2]);
}

const ::std::string&
Rpc::Downloader::ice_id(const ::Ice::Current&) const
{
    return __Rpc__Downloader_ids[1];
}

const ::std::string&
Rpc::Downloader::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::Downloader";
    return typeId;
#else
    return __Rpc__Downloader_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::Downloader::___read(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_offset;
    ::Ice::Int __p_num;
    __is->read(__p_offset);
    __is->read(__p_num);
    __inS.endReadParams();
    ::Rpc::ByteSeq __p_bytes;
    ::Rpc::ErrorCode __ret = read(__p_offset, __p_num, __p_bytes, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_bytes);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Downloader::___finish(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ErrorCode __ret = finish(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Downloader::___cancel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    cancel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__Downloader_all[] =
{
    "cancel",
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "read"
};

}

::Ice::DispatchStatus
Rpc::Downloader::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__Downloader_all, __Rpc__Downloader_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__Downloader_all)
    {
        case 0:
        {
            return ___cancel(in, current);
        }
        case 1:
        {
            return ___finish(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___read(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::Downloader::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::Downloader::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(DownloaderPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::DownloaderPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::Downloader::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::Session* p) { return p; }

namespace
{
const ::std::string __Rpc__Session_ids[2] =
{
    "::Ice::Object",
    "::Rpc::Session"
};

}

bool
Rpc::Session::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__Session_ids, __Rpc__Session_ids + 2, _s);
}

::std::vector< ::std::string>
Rpc::Session::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__Session_ids[0], &__Rpc__Session_ids[2]);
}

const ::std::string&
Rpc::Session::ice_id(const ::Ice::Current&) const
{
    return __Rpc__Session_ids[1];
}

const ::std::string&
Rpc::Session::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::Session";
    return typeId;
#else
    return __Rpc__Session_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::Session::___destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___refresh(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    refresh(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___browseEngines(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::EngineBrowserPrx __p_browser;
    ::Rpc::ErrorCode __ret = browseEngines(__p_browser, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_browser);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___uploadEngine(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    ::std::string __p_info;
    __is->read(__p_name);
    __is->read(__p_version);
    __is->read(__p_info);
    __inS.endReadParams();
    ::Rpc::UploaderPrx __p_uploader;
    ::Rpc::ErrorCode __ret = uploadEngine(__p_name, __p_version, __p_info, __p_uploader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_uploader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___downloadEngine(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::DownloaderPrx __p_downloader;
    ::Rpc::ErrorCode __ret = downloadEngine(__p_name, __p_version, __p_downloader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_downloader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___removeEngine(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = removeEngine(__p_name, __p_version, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__Session_all[] =
{
    "browseEngines",
    "destroy",
    "downloadEngine",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "refresh",
    "removeEngine",
    "uploadEngine"
};

}

::Ice::DispatchStatus
Rpc::Session::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__Session_all, __Rpc__Session_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__Session_all)
    {
        case 0:
        {
            return ___browseEngines(in, current);
        }
        case 1:
        {
            return ___destroy(in, current);
        }
        case 2:
        {
            return ___downloadEngine(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___refresh(in, current);
        }
        case 8:
        {
            return ___removeEngine(in, current);
        }
        case 9:
        {
            return ___uploadEngine(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::Session::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::Session::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(SessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::SessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::Session::ice_staticId(), v);
    }
}
