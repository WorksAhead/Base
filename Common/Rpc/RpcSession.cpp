// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `RpcSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RpcSession.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Rpc__ContentBrowser__next_name = "next";

const ::std::string __Rpc__EngineVersionBrowser__next_name = "next";

const ::std::string __Rpc__ExtraBrowser__next_name = "next";

const ::std::string __Rpc__UserBrowser__next_name = "next";

const ::std::string __Rpc__ContentSubmitter__setTitle_name = "setTitle";

const ::std::string __Rpc__ContentSubmitter__setPage_name = "setPage";

const ::std::string __Rpc__ContentSubmitter__setCategory_name = "setCategory";

const ::std::string __Rpc__ContentSubmitter__setEngine_name = "setEngine";

const ::std::string __Rpc__ContentSubmitter__setStartup_name = "setStartup";

const ::std::string __Rpc__ContentSubmitter__setParentId_name = "setParentId";

const ::std::string __Rpc__ContentSubmitter__setVideo_name = "setVideo";

const ::std::string __Rpc__ContentSubmitter__setDescription_name = "setDescription";

const ::std::string __Rpc__ContentSubmitter__uploadImage_name = "uploadImage";

const ::std::string __Rpc__ContentSubmitter__uploadContent_name = "uploadContent";

const ::std::string __Rpc__ContentSubmitter__cancel_name = "cancel";

const ::std::string __Rpc__ContentSubmitter__finish_name = "finish";

const ::std::string __Rpc__EngineVersionSubmitter__setSetup_name = "setSetup";

const ::std::string __Rpc__EngineVersionSubmitter__setUnSetup_name = "setUnSetup";

const ::std::string __Rpc__EngineVersionSubmitter__setInfo_name = "setInfo";

const ::std::string __Rpc__EngineVersionSubmitter__uploadEngine_name = "uploadEngine";

const ::std::string __Rpc__EngineVersionSubmitter__cancel_name = "cancel";

const ::std::string __Rpc__EngineVersionSubmitter__finish_name = "finish";

const ::std::string __Rpc__ExtraSubmitter__setTitle_name = "setTitle";

const ::std::string __Rpc__ExtraSubmitter__setSetup_name = "setSetup";

const ::std::string __Rpc__ExtraSubmitter__setInfo_name = "setInfo";

const ::std::string __Rpc__ExtraSubmitter__uploadExtra_name = "uploadExtra";

const ::std::string __Rpc__ExtraSubmitter__cancel_name = "cancel";

const ::std::string __Rpc__ExtraSubmitter__finish_name = "finish";

const ::std::string __Rpc__ClientBrowser__next_name = "next";

const ::std::string __Rpc__ClientSubmitter__setInfo_name = "setInfo";

const ::std::string __Rpc__ClientSubmitter__uploadClient_name = "uploadClient";

const ::std::string __Rpc__ClientSubmitter__cancel_name = "cancel";

const ::std::string __Rpc__ClientSubmitter__finish_name = "finish";

const ::std::string __Rpc__Session__refresh_name = "refresh";

const ::std::string __Rpc__Session__getCurrentUser_name = "getCurrentUser";

const ::std::string __Rpc__Session__getCurrentUserGroup_name = "getCurrentUserGroup";

const ::std::string __Rpc__Session__setPages_name = "setPages";

const ::std::string __Rpc__Session__getPages_name = "getPages";

const ::std::string __Rpc__Session__setCategories_name = "setCategories";

const ::std::string __Rpc__Session__getCategories_name = "getCategories";

const ::std::string __Rpc__Session__browseContent_name = "browseContent";

const ::std::string __Rpc__Session__getContentInfo_name = "getContentInfo";

const ::std::string __Rpc__Session__downloadContentImage_name = "downloadContentImage";

const ::std::string __Rpc__Session__downloadContent_name = "downloadContent";

const ::std::string __Rpc__Session__submitContent_name = "submitContent";

const ::std::string __Rpc__Session__updateContent_name = "updateContent";

const ::std::string __Rpc__Session__removeContent_name = "removeContent";

const ::std::string __Rpc__Session__browseEngineVersions_name = "browseEngineVersions";

const ::std::string __Rpc__Session__downloadEngineVersion_name = "downloadEngineVersion";

const ::std::string __Rpc__Session__removeEngineVersion_name = "removeEngineVersion";

const ::std::string __Rpc__Session__submitEngineVersion_name = "submitEngineVersion";

const ::std::string __Rpc__Session__updateEngineVersion_name = "updateEngineVersion";

const ::std::string __Rpc__Session__getEngineVersion_name = "getEngineVersion";

const ::std::string __Rpc__Session__browseExtra_name = "browseExtra";

const ::std::string __Rpc__Session__getExtraInfo_name = "getExtraInfo";

const ::std::string __Rpc__Session__downloadExtra_name = "downloadExtra";

const ::std::string __Rpc__Session__submitExtra_name = "submitExtra";

const ::std::string __Rpc__Session__updateExtra_name = "updateExtra";

const ::std::string __Rpc__Session__removeExtra_name = "removeExtra";

const ::std::string __Rpc__Session__browseClient_name = "browseClient";

const ::std::string __Rpc__Session__getClientInfo_name = "getClientInfo";

const ::std::string __Rpc__Session__submitClient_name = "submitClient";

const ::std::string __Rpc__Session__updateClient_name = "updateClient";

const ::std::string __Rpc__Session__removeClient_name = "removeClient";

const ::std::string __Rpc__Session__browseUsers_name = "browseUsers";

const ::std::string __Rpc__Session__setUserGroup_name = "setUserGroup";

const ::std::string __Rpc__Session__removeUser_name = "removeUser";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::ContentBrowser* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ContentBrowser>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::ContentBrowser;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentBrowser::next(::Ice::Int __p_n, ::Rpc::ContentItemSeq& __p_items, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentBrowser__next_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentBrowser__next_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentBrowser::begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentBrowser__next_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentBrowser__next_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentBrowser__next_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentBrowser::__begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentBrowserPrx __proxy = ::Rpc::ContentBrowserPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ContentItemSeq __p_items;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_next(__p_items, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_items);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentItemSeq&)> _response;
    };
    return begin_next(__p_n, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentBrowser::end_next(::Rpc::ContentItemSeq& __p_items, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentBrowser__next_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::ContentBrowser::ice_staticId()
{
    return ::Rpc::ContentBrowser::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::ContentBrowser::__newInstance() const
{
    return new ContentBrowser;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::EngineVersionBrowser* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionBrowser>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::EngineVersionBrowser;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionBrowser::next(::Ice::Int __p_n, ::Rpc::EngineVersionSeq& __p_items, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineVersionBrowser__next_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineVersionBrowser__next_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionBrowser::begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineVersionBrowser__next_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineVersionBrowser__next_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineVersionBrowser__next_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionBrowser::__begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineVersionBrowserPrx __proxy = ::Rpc::EngineVersionBrowserPrx::uncheckedCast(__result->getProxy());
            ::Rpc::EngineVersionSeq __p_items;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_next(__p_items, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_items);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSeq&)> _response;
    };
    return begin_next(__p_n, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionBrowser::end_next(::Rpc::EngineVersionSeq& __p_items, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineVersionBrowser__next_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::EngineVersionBrowser::ice_staticId()
{
    return ::Rpc::EngineVersionBrowser::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::EngineVersionBrowser::__newInstance() const
{
    return new EngineVersionBrowser;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::ExtraBrowser* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ExtraBrowser>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::ExtraBrowser;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::ExtraBrowser::next(::Ice::Int __p_n, ::Rpc::ExtraInfoSeq& __p_items, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ExtraBrowser__next_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ExtraBrowser__next_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraBrowser::begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ExtraBrowser__next_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ExtraBrowser__next_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ExtraBrowser__next_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraBrowser::__begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ExtraBrowserPrx __proxy = ::Rpc::ExtraBrowserPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ExtraInfoSeq __p_items;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_next(__p_items, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_items);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfoSeq&)> _response;
    };
    return begin_next(__p_n, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ExtraBrowser::end_next(::Rpc::ExtraInfoSeq& __p_items, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ExtraBrowser__next_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::ExtraBrowser::ice_staticId()
{
    return ::Rpc::ExtraBrowser::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::ExtraBrowser::__newInstance() const
{
    return new ExtraBrowser;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::UserBrowser* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::UserBrowser>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::UserBrowser;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::UserBrowser::next(::Ice::Int __p_n, ::Rpc::UserSeq& __p_items, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__UserBrowser__next_name);
    ::IceInternal::Outgoing __og(this, __Rpc__UserBrowser__next_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::UserBrowser::begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__UserBrowser__next_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__UserBrowser__next_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__UserBrowser__next_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::UserBrowser::__begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UserSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::UserBrowserPrx __proxy = ::Rpc::UserBrowserPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UserSeq __p_items;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_next(__p_items, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_items);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UserSeq&)> _response;
    };
    return begin_next(__p_n, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::UserBrowser::end_next(::Rpc::UserSeq& __p_items, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__UserBrowser__next_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::UserBrowser::ice_staticId()
{
    return ::Rpc::UserBrowser::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::UserBrowser::__newInstance() const
{
    return new UserBrowser;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::ContentSubmitter* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ContentSubmitter>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::ContentSubmitter;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setTitle_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setTitle_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setTitle_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setTitle_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setTitle_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setTitle(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setTitle(__p_title, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setTitle(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setTitle_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setPage(const ::std::string& __p_page, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setPage_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setPage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_page);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setPage(const ::std::string& __p_page, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setPage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setPage_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setPage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_page);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setPage(const ::std::string& __p_page, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setPage(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setPage(__p_page, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setPage(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setPage_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setCategory(const ::std::string& __p_category, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setCategory_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setCategory_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_category);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setCategory(const ::std::string& __p_category, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setCategory_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setCategory_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setCategory_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_category);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setCategory(const ::std::string& __p_category, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setCategory(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setCategory(__p_category, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setCategory(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setCategory_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setEngine_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setEngine_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setEngine_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setEngine_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setEngine_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setEngine(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setEngine(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setEngine(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setEngine(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setEngine_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setStartup(const ::std::string& __p_startup, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setStartup_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setStartup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_startup);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setStartup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setStartup_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setStartup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_startup);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setStartup(const ::std::string& __p_startup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setStartup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setStartup(__p_startup, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setStartup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setStartup_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setParentId(const ::std::string& __p_id, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setParentId_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setParentId_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setParentId(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setParentId_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setParentId_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setParentId_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setParentId(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setParentId(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setParentId(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setParentId(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setParentId_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setVideo(const ::std::string& __p_video, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setVideo_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setVideo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_video);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setVideo(const ::std::string& __p_video, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setVideo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setVideo_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setVideo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_video);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setVideo(const ::std::string& __p_video, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setVideo(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setVideo(__p_video, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setVideo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setVideo_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::setDescription(const ::std::string& __p_description, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__setDescription_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__setDescription_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_description);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_setDescription(const ::std::string& __p_description, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__setDescription_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__setDescription_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__setDescription_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_description);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_setDescription(const ::std::string& __p_description, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setDescription(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setDescription(__p_description, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_setDescription(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__setDescription_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::uploadImage(::Ice::Int __p_index, ::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__uploadImage_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__uploadImage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_index);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__uploadImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__uploadImage_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__uploadImage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_index);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_uploadImage(::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UploaderPrx __p_uploader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_uploadImage(__p_uploader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_uploader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)> _response;
    };
    return begin_uploadImage(__p_index, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_uploadImage(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__uploadImage_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::uploadContent(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__uploadContent_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__uploadContent_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_uploadContent(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__uploadContent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__uploadContent_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__uploadContent_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_uploadContent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UploaderPrx __p_uploader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_uploadContent(__p_uploader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_uploader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)> _response;
    };
    return begin_uploadContent(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_uploadContent(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__uploadContent_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Rpc::ContentSubmitter::cancel(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__cancel_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__cancel_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__cancel_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::ContentSubmitter::end_cancel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__ContentSubmitter__cancel_name);
}

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::finish(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ContentSubmitter__finish_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ContentSubmitter__finish_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ContentSubmitter__finish_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ContentSubmitter__finish_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ContentSubmitter__finish_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ContentSubmitter::__begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ContentSubmitterPrx __proxy = ::Rpc::ContentSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_finish(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_finish(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ContentSubmitter::end_finish(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ContentSubmitter__finish_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::ContentSubmitter::ice_staticId()
{
    return ::Rpc::ContentSubmitter::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::ContentSubmitter::__newInstance() const
{
    return new ContentSubmitter;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::EngineVersionSubmitter* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::EngineVersionSubmitter>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::EngineVersionSubmitter;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineVersionSubmitter__setSetup_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineVersionSubmitter__setSetup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_setup);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineVersionSubmitter__setSetup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineVersionSubmitter__setSetup_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineVersionSubmitter__setSetup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_setup);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::__begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setSetup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setSetup(__p_setup, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::end_setSetup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineVersionSubmitter__setSetup_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineVersionSubmitter__setUnSetup_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineVersionSubmitter__setUnSetup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_unsetup);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineVersionSubmitter__setUnSetup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineVersionSubmitter__setUnSetup_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineVersionSubmitter__setUnSetup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_unsetup);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::__begin_setUnSetup(const ::std::string& __p_unsetup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setUnSetup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setUnSetup(__p_unsetup, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::end_setUnSetup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineVersionSubmitter__setUnSetup_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineVersionSubmitter__setInfo_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineVersionSubmitter__setInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineVersionSubmitter__setInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineVersionSubmitter__setInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineVersionSubmitter__setInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::__begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setInfo(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setInfo(__p_info, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::end_setInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineVersionSubmitter__setInfo_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::uploadEngine(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineVersionSubmitter__uploadEngine_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineVersionSubmitter__uploadEngine_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::begin_uploadEngine(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineVersionSubmitter__uploadEngine_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineVersionSubmitter__uploadEngine_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineVersionSubmitter__uploadEngine_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::__begin_uploadEngine(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UploaderPrx __p_uploader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_uploadEngine(__p_uploader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_uploader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)> _response;
    };
    return begin_uploadEngine(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::end_uploadEngine(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineVersionSubmitter__uploadEngine_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Rpc::EngineVersionSubmitter::cancel(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__EngineVersionSubmitter__cancel_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineVersionSubmitter__cancel_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineVersionSubmitter__cancel_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::EngineVersionSubmitter::end_cancel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__EngineVersionSubmitter__cancel_name);
}

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::finish(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__EngineVersionSubmitter__finish_name);
    ::IceInternal::Outgoing __og(this, __Rpc__EngineVersionSubmitter__finish_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__EngineVersionSubmitter__finish_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__EngineVersionSubmitter__finish_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__EngineVersionSubmitter__finish_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::EngineVersionSubmitter::__begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::EngineVersionSubmitterPrx __proxy = ::Rpc::EngineVersionSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_finish(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_finish(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::EngineVersionSubmitter::end_finish(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__EngineVersionSubmitter__finish_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::EngineVersionSubmitter::ice_staticId()
{
    return ::Rpc::EngineVersionSubmitter::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::EngineVersionSubmitter::__newInstance() const
{
    return new EngineVersionSubmitter;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::ExtraSubmitter* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ExtraSubmitter>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::ExtraSubmitter;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ExtraSubmitter__setTitle_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ExtraSubmitter__setTitle_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::begin_setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ExtraSubmitter__setTitle_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ExtraSubmitter__setTitle_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ExtraSubmitter__setTitle_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::__begin_setTitle(const ::std::string& __p_title, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setTitle(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setTitle(__p_title, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::end_setTitle(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ExtraSubmitter__setTitle_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ExtraSubmitter__setSetup_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ExtraSubmitter__setSetup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_setup);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ExtraSubmitter__setSetup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ExtraSubmitter__setSetup_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ExtraSubmitter__setSetup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_setup);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::__begin_setSetup(const ::std::string& __p_setup, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setSetup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setSetup(__p_setup, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::end_setSetup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ExtraSubmitter__setSetup_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ExtraSubmitter__setInfo_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ExtraSubmitter__setInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ExtraSubmitter__setInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ExtraSubmitter__setInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ExtraSubmitter__setInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::__begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setInfo(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setInfo(__p_info, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::end_setInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ExtraSubmitter__setInfo_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::uploadExtra(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ExtraSubmitter__uploadExtra_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ExtraSubmitter__uploadExtra_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::begin_uploadExtra(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ExtraSubmitter__uploadExtra_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ExtraSubmitter__uploadExtra_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ExtraSubmitter__uploadExtra_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::__begin_uploadExtra(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UploaderPrx __p_uploader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_uploadExtra(__p_uploader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_uploader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)> _response;
    };
    return begin_uploadExtra(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::end_uploadExtra(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ExtraSubmitter__uploadExtra_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Rpc::ExtraSubmitter::cancel(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__ExtraSubmitter__cancel_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ExtraSubmitter__cancel_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ExtraSubmitter__cancel_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::ExtraSubmitter::end_cancel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__ExtraSubmitter__cancel_name);
}

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::finish(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ExtraSubmitter__finish_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ExtraSubmitter__finish_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ExtraSubmitter__finish_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ExtraSubmitter__finish_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ExtraSubmitter__finish_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ExtraSubmitter::__begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ExtraSubmitterPrx __proxy = ::Rpc::ExtraSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_finish(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_finish(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ExtraSubmitter::end_finish(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ExtraSubmitter__finish_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::ExtraSubmitter::ice_staticId()
{
    return ::Rpc::ExtraSubmitter::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::ExtraSubmitter::__newInstance() const
{
    return new ExtraSubmitter;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::ClientBrowser* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ClientBrowser>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::ClientBrowser;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::ClientBrowser::next(::Ice::Int __p_n, ::Rpc::ClientInfoSeq& __p_items, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ClientBrowser__next_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ClientBrowser__next_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientBrowser::begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ClientBrowser__next_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ClientBrowser__next_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ClientBrowser__next_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_n);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientBrowser::__begin_next(::Ice::Int __p_n, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ClientBrowserPrx __proxy = ::Rpc::ClientBrowserPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ClientInfoSeq __p_items;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_next(__p_items, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_items);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfoSeq&)> _response;
    };
    return begin_next(__p_n, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ClientBrowser::end_next(::Rpc::ClientInfoSeq& __p_items, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ClientBrowser__next_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_items);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::ClientBrowser::ice_staticId()
{
    return ::Rpc::ClientBrowser::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::ClientBrowser::__newInstance() const
{
    return new ClientBrowser;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::ClientSubmitter* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::ClientSubmitter>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::ClientSubmitter;
        v->__copyFrom(proxy);
    }
}

::Rpc::ErrorCode
IceProxy::Rpc::ClientSubmitter::setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ClientSubmitter__setInfo_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ClientSubmitter__setInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientSubmitter::begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ClientSubmitter__setInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ClientSubmitter__setInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ClientSubmitter__setInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientSubmitter::__begin_setInfo(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setInfo(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setInfo(__p_info, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ClientSubmitter::end_setInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ClientSubmitter__setInfo_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::ClientSubmitter::uploadClient(::Rpc::UploaderPrx& __p_uploader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ClientSubmitter__uploadClient_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ClientSubmitter__uploadClient_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientSubmitter::begin_uploadClient(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ClientSubmitter__uploadClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ClientSubmitter__uploadClient_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ClientSubmitter__uploadClient_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientSubmitter::__begin_uploadClient(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UploaderPrx __p_uploader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_uploadClient(__p_uploader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_uploader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UploaderPrx&)> _response;
    };
    return begin_uploadClient(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ClientSubmitter::end_uploadClient(::Rpc::UploaderPrx& __p_uploader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ClientSubmitter__uploadClient_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_uploader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Rpc::ClientSubmitter::cancel(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__ClientSubmitter__cancel_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientSubmitter::begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ClientSubmitter__cancel_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ClientSubmitter__cancel_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::ClientSubmitter::end_cancel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__ClientSubmitter__cancel_name);
}

::Rpc::ErrorCode
IceProxy::Rpc::ClientSubmitter::finish(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__ClientSubmitter__finish_name);
    ::IceInternal::Outgoing __og(this, __Rpc__ClientSubmitter__finish_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientSubmitter::begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__ClientSubmitter__finish_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__ClientSubmitter__finish_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__ClientSubmitter__finish_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::ClientSubmitter::__begin_finish(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::ClientSubmitterPrx __proxy = ::Rpc::ClientSubmitterPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_finish(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_finish(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::ClientSubmitter::end_finish(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__ClientSubmitter__finish_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::ClientSubmitter::ice_staticId()
{
    return ::Rpc::ClientSubmitter::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::ClientSubmitter::__newInstance() const
{
    return new ClientSubmitter;
}
::IceProxy::Ice::Object* ::IceProxy::Rpc::upCast(::IceProxy::Rpc::Session* p) { return p; }

void
::IceProxy::Rpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Rpc::Session>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Rpc::Session;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Rpc::Session::refresh(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Rpc__Session__refresh_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_refresh(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__refresh_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__refresh_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Rpc::Session::end_refresh(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Rpc__Session__refresh_name);
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getCurrentUser(::std::string& __p_user, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getCurrentUser_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getCurrentUser_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_user);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getCurrentUser(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getCurrentUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getCurrentUser_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getCurrentUser_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getCurrentUser(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_user;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getCurrentUser(__p_user, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_user);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::std::string&)> _response;
    };
    return begin_getCurrentUser(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getCurrentUser(::std::string& __p_user, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getCurrentUser_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_user);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getCurrentUserGroup(::std::string& __p_group, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getCurrentUserGroup_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getCurrentUserGroup_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_group);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getCurrentUserGroup(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getCurrentUserGroup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getCurrentUserGroup_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getCurrentUserGroup_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getCurrentUserGroup(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_group;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getCurrentUserGroup(__p_group, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_group);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::std::string&)> _response;
    };
    return begin_getCurrentUserGroup(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getCurrentUserGroup(::std::string& __p_group, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getCurrentUserGroup_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_group);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__setPages_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__setPages_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pages);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__setPages_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__setPages_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__setPages_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pages);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_setPages(const ::Rpc::StringSeq& __p_pages, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setPages(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setPages(__p_pages, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_setPages(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__setPages_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getPages(::Rpc::StringSeq& __p_pages, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getPages_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getPages_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_pages);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getPages(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getPages_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getPages_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getPages_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getPages(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::StringSeq __p_pages;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getPages(__p_pages, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_pages);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)> _response;
    };
    return begin_getPages(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getPages(::Rpc::StringSeq& __p_pages, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getPages_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_pages);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::setCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__setCategories_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__setCategories_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_categories);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_setCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__setCategories_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__setCategories_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__setCategories_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_categories);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_setCategories(const ::Rpc::StringSeq& __p_categories, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setCategories(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setCategories(__p_categories, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_setCategories(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__setCategories_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getCategories(::Rpc::StringSeq& __p_categories, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getCategories_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getCategories_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_categories);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getCategories(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getCategories_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getCategories_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getCategories_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getCategories(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::StringSeq __p_categories;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getCategories(__p_categories, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_categories);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::StringSeq&)> _response;
    };
    return begin_getCategories(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getCategories(::Rpc::StringSeq& __p_categories, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getCategories_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_categories);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, ::Rpc::ContentBrowserPrx& __p_browser, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__browseContent_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__browseContent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_page);
        __os->write(__p_category);
        __os->write(__p_search);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__browseContent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__browseContent_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__browseContent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_page);
        __os->write(__p_category);
        __os->write(__p_search);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_browseContent(const ::std::string& __p_page, const ::std::string& __p_category, const ::std::string& __p_search, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ContentBrowserPrx __p_browser;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_browseContent(__p_browser, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_browser);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentBrowserPrx&)> _response;
    };
    return begin_browseContent(__p_page, __p_category, __p_search, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_browseContent(::Rpc::ContentBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__browseContent_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getContentInfo(const ::std::string& __p_id, ::Rpc::ContentInfo& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getContentInfo_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getContentInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_info);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getContentInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getContentInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getContentInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getContentInfo(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ContentInfo __p_info;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getContentInfo(__p_info, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_info);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentInfo&)> _response;
    };
    return begin_getContentInfo(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getContentInfo(::Rpc::ContentInfo& __p_info, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getContentInfo_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_info);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__downloadContentImage_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__downloadContentImage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __os->write(__p_index);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__downloadContentImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__downloadContentImage_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__downloadContentImage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __os->write(__p_index);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_downloadContentImage(const ::std::string& __p_id, ::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::DownloaderPrx __p_downloader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_downloadContentImage(__p_downloader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_downloader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)> _response;
    };
    return begin_downloadContentImage(__p_id, __p_index, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_downloadContentImage(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__downloadContentImage_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::downloadContent(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__downloadContent_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__downloadContent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__downloadContent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__downloadContent_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__downloadContent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_downloadContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::DownloaderPrx __p_downloader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_downloadContent(__p_downloader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_downloader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)> _response;
    };
    return begin_downloadContent(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_downloadContent(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__downloadContent_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::submitContent(::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__submitContent_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__submitContent_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_submitContent(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__submitContent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__submitContent_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__submitContent_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_submitContent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ContentSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_submitContent(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)> _response;
    };
    return begin_submitContent(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_submitContent(::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__submitContent_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::updateContent(const ::std::string& __p_id, ::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__updateContent_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__updateContent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_updateContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__updateContent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__updateContent_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__updateContent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_updateContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ContentSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_updateContent(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ContentSubmitterPrx&)> _response;
    };
    return begin_updateContent(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_updateContent(::Rpc::ContentSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__updateContent_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::removeContent(const ::std::string& __p_id, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__removeContent_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__removeContent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_removeContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__removeContent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__removeContent_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__removeContent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_removeContent(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_removeContent(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_removeContent(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_removeContent(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__removeContent_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::browseEngineVersions(bool __p_all, ::Rpc::EngineVersionBrowserPrx& __p_browser, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__browseEngineVersions_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__browseEngineVersions_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_all);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_browseEngineVersions(bool __p_all, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__browseEngineVersions_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__browseEngineVersions_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__browseEngineVersions_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_all);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_browseEngineVersions(bool __p_all, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::EngineVersionBrowserPrx __p_browser;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_browseEngineVersions(__p_browser, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_browser);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionBrowserPrx&)> _response;
    };
    return begin_browseEngineVersions(__p_all, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_browseEngineVersions(::Rpc::EngineVersionBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__browseEngineVersions_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__downloadEngineVersion_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__downloadEngineVersion_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__downloadEngineVersion_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__downloadEngineVersion_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__downloadEngineVersion_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_downloadEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::DownloaderPrx __p_downloader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_downloadEngineVersion(__p_downloader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_downloader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)> _response;
    };
    return begin_downloadEngineVersion(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_downloadEngineVersion(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__downloadEngineVersion_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__removeEngineVersion_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__removeEngineVersion_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__removeEngineVersion_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__removeEngineVersion_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__removeEngineVersion_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_removeEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_removeEngineVersion(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_removeEngineVersion(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_removeEngineVersion(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__removeEngineVersion_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__submitEngineVersion_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__submitEngineVersion_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__submitEngineVersion_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__submitEngineVersion_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__submitEngineVersion_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_submitEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::EngineVersionSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_submitEngineVersion(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)> _response;
    };
    return begin_submitEngineVersion(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_submitEngineVersion(::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__submitEngineVersion_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__updateEngineVersion_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__updateEngineVersion_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__updateEngineVersion_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__updateEngineVersion_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__updateEngineVersion_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_updateEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::EngineVersionSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_updateEngineVersion(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionSubmitterPrx&)> _response;
    };
    return begin_updateEngineVersion(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_updateEngineVersion(::Rpc::EngineVersionSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__updateEngineVersion_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, ::Rpc::EngineVersionInfo& __p_engineVersion, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getEngineVersion_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getEngineVersion_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_engineVersion);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getEngineVersion_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getEngineVersion_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getEngineVersion_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getEngineVersion(const ::std::string& __p_name, const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::EngineVersionInfo __p_engineVersion;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getEngineVersion(__p_engineVersion, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_engineVersion);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::EngineVersionInfo&)> _response;
    };
    return begin_getEngineVersion(__p_name, __p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getEngineVersion(::Rpc::EngineVersionInfo& __p_engineVersion, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getEngineVersion_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_engineVersion);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::browseExtra(::Rpc::ExtraBrowserPrx& __p_browser, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__browseExtra_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__browseExtra_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_browseExtra(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__browseExtra_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__browseExtra_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__browseExtra_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_browseExtra(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ExtraBrowserPrx __p_browser;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_browseExtra(__p_browser, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_browser);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraBrowserPrx&)> _response;
    };
    return begin_browseExtra(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_browseExtra(::Rpc::ExtraBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__browseExtra_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getExtraInfo(const ::std::string& __p_id, ::Rpc::ExtraInfo& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getExtraInfo_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getExtraInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_info);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getExtraInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getExtraInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getExtraInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getExtraInfo(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ExtraInfo __p_info;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getExtraInfo(__p_info, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_info);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraInfo&)> _response;
    };
    return begin_getExtraInfo(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getExtraInfo(::Rpc::ExtraInfo& __p_info, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getExtraInfo_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_info);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::downloadExtra(const ::std::string& __p_id, ::Rpc::DownloaderPrx& __p_downloader, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__downloadExtra_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__downloadExtra_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__downloadExtra_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__downloadExtra_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__downloadExtra_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_downloadExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::DownloaderPrx __p_downloader;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_downloadExtra(__p_downloader, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_downloader);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::DownloaderPrx&)> _response;
    };
    return begin_downloadExtra(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_downloadExtra(::Rpc::DownloaderPrx& __p_downloader, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__downloadExtra_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_downloader);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::submitExtra(::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__submitExtra_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__submitExtra_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_submitExtra(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__submitExtra_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__submitExtra_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__submitExtra_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_submitExtra(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ExtraSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_submitExtra(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)> _response;
    };
    return begin_submitExtra(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_submitExtra(::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__submitExtra_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::updateExtra(const ::std::string& __p_id, ::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__updateExtra_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__updateExtra_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__updateExtra_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__updateExtra_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__updateExtra_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_updateExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ExtraSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_updateExtra(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ExtraSubmitterPrx&)> _response;
    };
    return begin_updateExtra(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_updateExtra(::Rpc::ExtraSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__updateExtra_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::removeExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__removeExtra_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__removeExtra_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__removeExtra_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__removeExtra_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__removeExtra_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_removeExtra(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_removeExtra(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_removeExtra(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_removeExtra(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__removeExtra_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::browseClient(::Rpc::ClientBrowserPrx& __p_browser, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__browseClient_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__browseClient_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_browseClient(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__browseClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__browseClient_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__browseClient_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_browseClient(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ClientBrowserPrx __p_browser;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_browseClient(__p_browser, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_browser);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientBrowserPrx&)> _response;
    };
    return begin_browseClient(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_browseClient(::Rpc::ClientBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__browseClient_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::getClientInfo(const ::std::string& __p_version, ::Rpc::ClientInfo& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__getClientInfo_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__getClientInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_info);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__getClientInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__getClientInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__getClientInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_getClientInfo(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ClientInfo __p_info;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_getClientInfo(__p_info, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_info);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientInfo&)> _response;
    };
    return begin_getClientInfo(__p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_getClientInfo(::Rpc::ClientInfo& __p_info, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__getClientInfo_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_info);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::submitClient(const ::std::string& __p_version, ::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__submitClient_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__submitClient_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_submitClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__submitClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__submitClient_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__submitClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_submitClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ClientSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_submitClient(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)> _response;
    };
    return begin_submitClient(__p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_submitClient(::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__submitClient_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::updateClient(const ::std::string& __p_version, ::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__updateClient_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__updateClient_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_updateClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__updateClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__updateClient_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__updateClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_updateClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ClientSubmitterPrx __p_submitter;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_updateClient(__p_submitter, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_submitter);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::ClientSubmitterPrx&)> _response;
    };
    return begin_updateClient(__p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_updateClient(::Rpc::ClientSubmitterPrx& __p_submitter, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__updateClient_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_submitter);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::removeClient(const ::std::string& __p_version, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__removeClient_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__removeClient_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_removeClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__removeClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__removeClient_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__removeClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_version);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_removeClient(const ::std::string& __p_version, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_removeClient(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_removeClient(__p_version, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_removeClient(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__removeClient_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::browseUsers(::Rpc::UserBrowserPrx& __p_browser, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__browseUsers_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__browseUsers_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_browseUsers(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__browseUsers_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__browseUsers_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__browseUsers_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_browseUsers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::UserBrowserPrx __p_browser;
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_browseUsers(__p_browser, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_browser);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode, const ::Rpc::UserBrowserPrx&)> _response;
    };
    return begin_browseUsers(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_browseUsers(::Rpc::UserBrowserPrx& __p_browser, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__browseUsers_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_browser);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__setUserGroup_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__setUserGroup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_username);
        __os->write(__p_group);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__setUserGroup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__setUserGroup_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__setUserGroup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_username);
        __os->write(__p_group);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_setUserGroup(const ::std::string& __p_username, const ::std::string& __p_group, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_setUserGroup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_setUserGroup(__p_username, __p_group, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_setUserGroup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__setUserGroup_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Rpc::ErrorCode
IceProxy::Rpc::Session::removeUser(const ::std::string& __p_username, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Rpc__Session__removeUser_name);
    ::IceInternal::Outgoing __og(this, __Rpc__Session__removeUser_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_username);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Rpc::ErrorCode __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::begin_removeUser(const ::std::string& __p_username, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Rpc__Session__removeUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Rpc__Session__removeUser_name, __del, __cookie);
    try
    {
        __result->prepare(__Rpc__Session__removeUser_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_username);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Rpc::Session::__begin_removeUser(const ::std::string& __p_username, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Rpc::ErrorCode)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Rpc::ErrorCode)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Rpc::SessionPrx __proxy = ::Rpc::SessionPrx::uncheckedCast(__result->getProxy());
            ::Rpc::ErrorCode __ret;
            try
            {
                __ret = __proxy->end_removeUser(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Rpc::ErrorCode)> _response;
    };
    return begin_removeUser(__p_username, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Rpc::ErrorCode
IceProxy::Rpc::Session::end_removeUser(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Rpc__Session__removeUser_name);
    ::Rpc::ErrorCode __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Rpc::Session::ice_staticId()
{
    return ::Rpc::Session::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Rpc::Session::__newInstance() const
{
    return new Session;
}

::Ice::Object* Rpc::upCast(::Rpc::ContentBrowser* p) { return p; }

namespace
{
const ::std::string __Rpc__ContentBrowser_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ContentBrowser",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::ContentBrowser::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__ContentBrowser_ids, __Rpc__ContentBrowser_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::ContentBrowser::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__ContentBrowser_ids[0], &__Rpc__ContentBrowser_ids[3]);
}

const ::std::string&
Rpc::ContentBrowser::ice_id(const ::Ice::Current&) const
{
    return __Rpc__ContentBrowser_ids[1];
}

const ::std::string&
Rpc::ContentBrowser::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::ContentBrowser";
    return typeId;
#else
    return __Rpc__ContentBrowser_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::ContentBrowser::___next(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_n;
    __is->read(__p_n);
    __inS.endReadParams();
    ::Rpc::ContentItemSeq __p_items;
    ::Rpc::ErrorCode __ret = next(__p_n, __p_items, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_items);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__ContentBrowser_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "next"
};

}

::Ice::DispatchStatus
Rpc::ContentBrowser::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__ContentBrowser_all, __Rpc__ContentBrowser_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__ContentBrowser_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___next(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::ContentBrowser::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::ContentBrowser::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(ContentBrowserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::ContentBrowserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::ContentBrowser::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::EngineVersionBrowser* p) { return p; }

namespace
{
const ::std::string __Rpc__EngineVersionBrowser_ids[3] =
{
    "::Ice::Object",
    "::Rpc::EngineVersionBrowser",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::EngineVersionBrowser::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__EngineVersionBrowser_ids, __Rpc__EngineVersionBrowser_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::EngineVersionBrowser::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__EngineVersionBrowser_ids[0], &__Rpc__EngineVersionBrowser_ids[3]);
}

const ::std::string&
Rpc::EngineVersionBrowser::ice_id(const ::Ice::Current&) const
{
    return __Rpc__EngineVersionBrowser_ids[1];
}

const ::std::string&
Rpc::EngineVersionBrowser::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::EngineVersionBrowser";
    return typeId;
#else
    return __Rpc__EngineVersionBrowser_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::EngineVersionBrowser::___next(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_n;
    __is->read(__p_n);
    __inS.endReadParams();
    ::Rpc::EngineVersionSeq __p_items;
    ::Rpc::ErrorCode __ret = next(__p_n, __p_items, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_items);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__EngineVersionBrowser_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "next"
};

}

::Ice::DispatchStatus
Rpc::EngineVersionBrowser::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__EngineVersionBrowser_all, __Rpc__EngineVersionBrowser_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__EngineVersionBrowser_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___next(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::EngineVersionBrowser::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::EngineVersionBrowser::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(EngineVersionBrowserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::EngineVersionBrowserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::EngineVersionBrowser::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::ExtraBrowser* p) { return p; }

namespace
{
const ::std::string __Rpc__ExtraBrowser_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ExtraBrowser",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::ExtraBrowser::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__ExtraBrowser_ids, __Rpc__ExtraBrowser_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::ExtraBrowser::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__ExtraBrowser_ids[0], &__Rpc__ExtraBrowser_ids[3]);
}

const ::std::string&
Rpc::ExtraBrowser::ice_id(const ::Ice::Current&) const
{
    return __Rpc__ExtraBrowser_ids[1];
}

const ::std::string&
Rpc::ExtraBrowser::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::ExtraBrowser";
    return typeId;
#else
    return __Rpc__ExtraBrowser_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::ExtraBrowser::___next(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_n;
    __is->read(__p_n);
    __inS.endReadParams();
    ::Rpc::ExtraInfoSeq __p_items;
    ::Rpc::ErrorCode __ret = next(__p_n, __p_items, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_items);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__ExtraBrowser_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "next"
};

}

::Ice::DispatchStatus
Rpc::ExtraBrowser::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__ExtraBrowser_all, __Rpc__ExtraBrowser_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__ExtraBrowser_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___next(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::ExtraBrowser::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::ExtraBrowser::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(ExtraBrowserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::ExtraBrowserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::ExtraBrowser::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::UserBrowser* p) { return p; }

namespace
{
const ::std::string __Rpc__UserBrowser_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ManagedObject",
    "::Rpc::UserBrowser"
};

}

bool
Rpc::UserBrowser::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__UserBrowser_ids, __Rpc__UserBrowser_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::UserBrowser::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__UserBrowser_ids[0], &__Rpc__UserBrowser_ids[3]);
}

const ::std::string&
Rpc::UserBrowser::ice_id(const ::Ice::Current&) const
{
    return __Rpc__UserBrowser_ids[2];
}

const ::std::string&
Rpc::UserBrowser::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::UserBrowser";
    return typeId;
#else
    return __Rpc__UserBrowser_ids[2];
#endif
}

::Ice::DispatchStatus
Rpc::UserBrowser::___next(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_n;
    __is->read(__p_n);
    __inS.endReadParams();
    ::Rpc::UserSeq __p_items;
    ::Rpc::ErrorCode __ret = next(__p_n, __p_items, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_items);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__UserBrowser_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "next"
};

}

::Ice::DispatchStatus
Rpc::UserBrowser::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__UserBrowser_all, __Rpc__UserBrowser_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__UserBrowser_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___next(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::UserBrowser::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::UserBrowser::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(UserBrowserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::UserBrowserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::UserBrowser::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::ContentSubmitter* p) { return p; }

namespace
{
const ::std::string __Rpc__ContentSubmitter_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ContentSubmitter",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::ContentSubmitter::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__ContentSubmitter_ids, __Rpc__ContentSubmitter_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::ContentSubmitter::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__ContentSubmitter_ids[0], &__Rpc__ContentSubmitter_ids[3]);
}

const ::std::string&
Rpc::ContentSubmitter::ice_id(const ::Ice::Current&) const
{
    return __Rpc__ContentSubmitter_ids[1];
}

const ::std::string&
Rpc::ContentSubmitter::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::ContentSubmitter";
    return typeId;
#else
    return __Rpc__ContentSubmitter_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setTitle(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_title;
    __is->read(__p_title);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setTitle(__p_title, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setPage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_page;
    __is->read(__p_page);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setPage(__p_page, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setCategory(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_category;
    __is->read(__p_category);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setCategory(__p_category, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setEngine(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setEngine(__p_name, __p_version, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setStartup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_startup;
    __is->read(__p_startup);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setStartup(__p_startup, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setParentId(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setParentId(__p_id, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setVideo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_video;
    __is->read(__p_video);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setVideo(__p_video, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___setDescription(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_description;
    __is->read(__p_description);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setDescription(__p_description, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___uploadImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_index;
    __is->read(__p_index);
    __inS.endReadParams();
    ::Rpc::UploaderPrx __p_uploader;
    ::Rpc::ErrorCode __ret = uploadImage(__p_index, __p_uploader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_uploader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___uploadContent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::UploaderPrx __p_uploader;
    ::Rpc::ErrorCode __ret = uploadContent(__p_uploader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_uploader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___cancel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    cancel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ContentSubmitter::___finish(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ErrorCode __ret = finish(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__ContentSubmitter_all[] =
{
    "cancel",
    "destroy",
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setCategory",
    "setDescription",
    "setEngine",
    "setPage",
    "setParentId",
    "setStartup",
    "setTitle",
    "setVideo",
    "uploadContent",
    "uploadImage"
};

}

::Ice::DispatchStatus
Rpc::ContentSubmitter::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__ContentSubmitter_all, __Rpc__ContentSubmitter_all + 17, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__ContentSubmitter_all)
    {
        case 0:
        {
            return ___cancel(in, current);
        }
        case 1:
        {
            return ___destroy(in, current);
        }
        case 2:
        {
            return ___finish(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___setCategory(in, current);
        }
        case 8:
        {
            return ___setDescription(in, current);
        }
        case 9:
        {
            return ___setEngine(in, current);
        }
        case 10:
        {
            return ___setPage(in, current);
        }
        case 11:
        {
            return ___setParentId(in, current);
        }
        case 12:
        {
            return ___setStartup(in, current);
        }
        case 13:
        {
            return ___setTitle(in, current);
        }
        case 14:
        {
            return ___setVideo(in, current);
        }
        case 15:
        {
            return ___uploadContent(in, current);
        }
        case 16:
        {
            return ___uploadImage(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::ContentSubmitter::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::ContentSubmitter::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(ContentSubmitterPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::ContentSubmitterPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::ContentSubmitter::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::EngineVersionSubmitter* p) { return p; }

namespace
{
const ::std::string __Rpc__EngineVersionSubmitter_ids[3] =
{
    "::Ice::Object",
    "::Rpc::EngineVersionSubmitter",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::EngineVersionSubmitter::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__EngineVersionSubmitter_ids, __Rpc__EngineVersionSubmitter_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::EngineVersionSubmitter::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__EngineVersionSubmitter_ids[0], &__Rpc__EngineVersionSubmitter_ids[3]);
}

const ::std::string&
Rpc::EngineVersionSubmitter::ice_id(const ::Ice::Current&) const
{
    return __Rpc__EngineVersionSubmitter_ids[1];
}

const ::std::string&
Rpc::EngineVersionSubmitter::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::EngineVersionSubmitter";
    return typeId;
#else
    return __Rpc__EngineVersionSubmitter_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::EngineVersionSubmitter::___setSetup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_setup;
    __is->read(__p_setup);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setSetup(__p_setup, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::EngineVersionSubmitter::___setUnSetup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_unsetup;
    __is->read(__p_unsetup);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setUnSetup(__p_unsetup, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::EngineVersionSubmitter::___setInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_info;
    __is->read(__p_info);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setInfo(__p_info, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::EngineVersionSubmitter::___uploadEngine(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::UploaderPrx __p_uploader;
    ::Rpc::ErrorCode __ret = uploadEngine(__p_uploader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_uploader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::EngineVersionSubmitter::___cancel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    cancel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::EngineVersionSubmitter::___finish(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ErrorCode __ret = finish(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__EngineVersionSubmitter_all[] =
{
    "cancel",
    "destroy",
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setInfo",
    "setSetup",
    "setUnSetup",
    "uploadEngine"
};

}

::Ice::DispatchStatus
Rpc::EngineVersionSubmitter::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__EngineVersionSubmitter_all, __Rpc__EngineVersionSubmitter_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__EngineVersionSubmitter_all)
    {
        case 0:
        {
            return ___cancel(in, current);
        }
        case 1:
        {
            return ___destroy(in, current);
        }
        case 2:
        {
            return ___finish(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___setInfo(in, current);
        }
        case 8:
        {
            return ___setSetup(in, current);
        }
        case 9:
        {
            return ___setUnSetup(in, current);
        }
        case 10:
        {
            return ___uploadEngine(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::EngineVersionSubmitter::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::EngineVersionSubmitter::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(EngineVersionSubmitterPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::EngineVersionSubmitterPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::EngineVersionSubmitter::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::ExtraSubmitter* p) { return p; }

namespace
{
const ::std::string __Rpc__ExtraSubmitter_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ExtraSubmitter",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::ExtraSubmitter::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__ExtraSubmitter_ids, __Rpc__ExtraSubmitter_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::ExtraSubmitter::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__ExtraSubmitter_ids[0], &__Rpc__ExtraSubmitter_ids[3]);
}

const ::std::string&
Rpc::ExtraSubmitter::ice_id(const ::Ice::Current&) const
{
    return __Rpc__ExtraSubmitter_ids[1];
}

const ::std::string&
Rpc::ExtraSubmitter::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::ExtraSubmitter";
    return typeId;
#else
    return __Rpc__ExtraSubmitter_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::ExtraSubmitter::___setTitle(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_title;
    __is->read(__p_title);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setTitle(__p_title, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ExtraSubmitter::___setSetup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_setup;
    __is->read(__p_setup);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setSetup(__p_setup, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ExtraSubmitter::___setInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_info;
    __is->read(__p_info);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setInfo(__p_info, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ExtraSubmitter::___uploadExtra(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::UploaderPrx __p_uploader;
    ::Rpc::ErrorCode __ret = uploadExtra(__p_uploader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_uploader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ExtraSubmitter::___cancel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    cancel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ExtraSubmitter::___finish(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ErrorCode __ret = finish(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__ExtraSubmitter_all[] =
{
    "cancel",
    "destroy",
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setInfo",
    "setSetup",
    "setTitle",
    "uploadExtra"
};

}

::Ice::DispatchStatus
Rpc::ExtraSubmitter::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__ExtraSubmitter_all, __Rpc__ExtraSubmitter_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__ExtraSubmitter_all)
    {
        case 0:
        {
            return ___cancel(in, current);
        }
        case 1:
        {
            return ___destroy(in, current);
        }
        case 2:
        {
            return ___finish(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___setInfo(in, current);
        }
        case 8:
        {
            return ___setSetup(in, current);
        }
        case 9:
        {
            return ___setTitle(in, current);
        }
        case 10:
        {
            return ___uploadExtra(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::ExtraSubmitter::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::ExtraSubmitter::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(ExtraSubmitterPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::ExtraSubmitterPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::ExtraSubmitter::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::ClientBrowser* p) { return p; }

namespace
{
const ::std::string __Rpc__ClientBrowser_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ClientBrowser",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::ClientBrowser::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__ClientBrowser_ids, __Rpc__ClientBrowser_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::ClientBrowser::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__ClientBrowser_ids[0], &__Rpc__ClientBrowser_ids[3]);
}

const ::std::string&
Rpc::ClientBrowser::ice_id(const ::Ice::Current&) const
{
    return __Rpc__ClientBrowser_ids[1];
}

const ::std::string&
Rpc::ClientBrowser::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::ClientBrowser";
    return typeId;
#else
    return __Rpc__ClientBrowser_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::ClientBrowser::___next(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_n;
    __is->read(__p_n);
    __inS.endReadParams();
    ::Rpc::ClientInfoSeq __p_items;
    ::Rpc::ErrorCode __ret = next(__p_n, __p_items, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_items);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__ClientBrowser_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "next"
};

}

::Ice::DispatchStatus
Rpc::ClientBrowser::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__ClientBrowser_all, __Rpc__ClientBrowser_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__ClientBrowser_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___next(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::ClientBrowser::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::ClientBrowser::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(ClientBrowserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::ClientBrowserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::ClientBrowser::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::ClientSubmitter* p) { return p; }

namespace
{
const ::std::string __Rpc__ClientSubmitter_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ClientSubmitter",
    "::Rpc::ManagedObject"
};

}

bool
Rpc::ClientSubmitter::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__ClientSubmitter_ids, __Rpc__ClientSubmitter_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::ClientSubmitter::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__ClientSubmitter_ids[0], &__Rpc__ClientSubmitter_ids[3]);
}

const ::std::string&
Rpc::ClientSubmitter::ice_id(const ::Ice::Current&) const
{
    return __Rpc__ClientSubmitter_ids[1];
}

const ::std::string&
Rpc::ClientSubmitter::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::ClientSubmitter";
    return typeId;
#else
    return __Rpc__ClientSubmitter_ids[1];
#endif
}

::Ice::DispatchStatus
Rpc::ClientSubmitter::___setInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_info;
    __is->read(__p_info);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setInfo(__p_info, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ClientSubmitter::___uploadClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::UploaderPrx __p_uploader;
    ::Rpc::ErrorCode __ret = uploadClient(__p_uploader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_uploader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ClientSubmitter::___cancel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    cancel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::ClientSubmitter::___finish(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ErrorCode __ret = finish(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__ClientSubmitter_all[] =
{
    "cancel",
    "destroy",
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setInfo",
    "uploadClient"
};

}

::Ice::DispatchStatus
Rpc::ClientSubmitter::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__ClientSubmitter_all, __Rpc__ClientSubmitter_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__ClientSubmitter_all)
    {
        case 0:
        {
            return ___cancel(in, current);
        }
        case 1:
        {
            return ___destroy(in, current);
        }
        case 2:
        {
            return ___finish(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___setInfo(in, current);
        }
        case 8:
        {
            return ___uploadClient(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::ClientSubmitter::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::ClientSubmitter::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(ClientSubmitterPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::ClientSubmitterPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::ClientSubmitter::ice_staticId(), v);
    }
}

::Ice::Object* Rpc::upCast(::Rpc::Session* p) { return p; }

namespace
{
const ::std::string __Rpc__Session_ids[3] =
{
    "::Ice::Object",
    "::Rpc::ManagedObject",
    "::Rpc::Session"
};

}

bool
Rpc::Session::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Rpc__Session_ids, __Rpc__Session_ids + 3, _s);
}

::std::vector< ::std::string>
Rpc::Session::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Rpc__Session_ids[0], &__Rpc__Session_ids[3]);
}

const ::std::string&
Rpc::Session::ice_id(const ::Ice::Current&) const
{
    return __Rpc__Session_ids[2];
}

const ::std::string&
Rpc::Session::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Rpc::Session";
    return typeId;
#else
    return __Rpc__Session_ids[2];
#endif
}

::Ice::DispatchStatus
Rpc::Session::___refresh(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    refresh(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getCurrentUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __p_user;
    ::Rpc::ErrorCode __ret = getCurrentUser(__p_user, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_user);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getCurrentUserGroup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __p_group;
    ::Rpc::ErrorCode __ret = getCurrentUserGroup(__p_group, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_group);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___setPages(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Rpc::StringSeq __p_pages;
    __is->read(__p_pages);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setPages(__p_pages, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getPages(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::StringSeq __p_pages;
    ::Rpc::ErrorCode __ret = getPages(__p_pages, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_pages);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___setCategories(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Rpc::StringSeq __p_categories;
    __is->read(__p_categories);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setCategories(__p_categories, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getCategories(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::StringSeq __p_categories;
    ::Rpc::ErrorCode __ret = getCategories(__p_categories, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_categories);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___browseContent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_page;
    ::std::string __p_category;
    ::std::string __p_search;
    __is->read(__p_page);
    __is->read(__p_category);
    __is->read(__p_search);
    __inS.endReadParams();
    ::Rpc::ContentBrowserPrx __p_browser;
    ::Rpc::ErrorCode __ret = browseContent(__p_page, __p_category, __p_search, __p_browser, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_browser);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getContentInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::ContentInfo __p_info;
    ::Rpc::ErrorCode __ret = getContentInfo(__p_id, __p_info, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_info);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___downloadContentImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    ::Ice::Int __p_index;
    __is->read(__p_id);
    __is->read(__p_index);
    __inS.endReadParams();
    ::Rpc::DownloaderPrx __p_downloader;
    ::Rpc::ErrorCode __ret = downloadContentImage(__p_id, __p_index, __p_downloader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_downloader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___downloadContent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::DownloaderPrx __p_downloader;
    ::Rpc::ErrorCode __ret = downloadContent(__p_id, __p_downloader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_downloader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___submitContent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ContentSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = submitContent(__p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___updateContent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::ContentSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = updateContent(__p_id, __p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___removeContent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = removeContent(__p_id, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___browseEngineVersions(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool __p_all;
    __is->read(__p_all);
    __inS.endReadParams();
    ::Rpc::EngineVersionBrowserPrx __p_browser;
    ::Rpc::ErrorCode __ret = browseEngineVersions(__p_all, __p_browser, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_browser);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___downloadEngineVersion(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::DownloaderPrx __p_downloader;
    ::Rpc::ErrorCode __ret = downloadEngineVersion(__p_name, __p_version, __p_downloader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_downloader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___removeEngineVersion(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = removeEngineVersion(__p_name, __p_version, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___submitEngineVersion(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::EngineVersionSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = submitEngineVersion(__p_name, __p_version, __p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___updateEngineVersion(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::EngineVersionSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = updateEngineVersion(__p_name, __p_version, __p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getEngineVersion(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_version;
    __is->read(__p_name);
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::EngineVersionInfo __p_engineVersion;
    ::Rpc::ErrorCode __ret = getEngineVersion(__p_name, __p_version, __p_engineVersion, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_engineVersion);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___browseExtra(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ExtraBrowserPrx __p_browser;
    ::Rpc::ErrorCode __ret = browseExtra(__p_browser, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_browser);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getExtraInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::ExtraInfo __p_info;
    ::Rpc::ErrorCode __ret = getExtraInfo(__p_id, __p_info, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_info);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___downloadExtra(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::DownloaderPrx __p_downloader;
    ::Rpc::ErrorCode __ret = downloadExtra(__p_id, __p_downloader, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_downloader);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___submitExtra(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ExtraSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = submitExtra(__p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___updateExtra(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::ExtraSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = updateExtra(__p_id, __p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___removeExtra(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = removeExtra(__p_id, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___browseClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::ClientBrowserPrx __p_browser;
    ::Rpc::ErrorCode __ret = browseClient(__p_browser, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_browser);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___getClientInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_version;
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::ClientInfo __p_info;
    ::Rpc::ErrorCode __ret = getClientInfo(__p_version, __p_info, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_info);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___submitClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_version;
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::ClientSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = submitClient(__p_version, __p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___updateClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_version;
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::ClientSubmitterPrx __p_submitter;
    ::Rpc::ErrorCode __ret = updateClient(__p_version, __p_submitter, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_submitter);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___removeClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_version;
    __is->read(__p_version);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = removeClient(__p_version, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___browseUsers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Rpc::UserBrowserPrx __p_browser;
    ::Rpc::ErrorCode __ret = browseUsers(__p_browser, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_browser);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___setUserGroup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_username;
    ::std::string __p_group;
    __is->read(__p_username);
    __is->read(__p_group);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = setUserGroup(__p_username, __p_group, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Rpc::Session::___removeUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_username;
    __is->read(__p_username);
    __inS.endReadParams();
    ::Rpc::ErrorCode __ret = removeUser(__p_username, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Rpc__Session_all[] =
{
    "browseClient",
    "browseContent",
    "browseEngineVersions",
    "browseExtra",
    "browseUsers",
    "destroy",
    "downloadContent",
    "downloadContentImage",
    "downloadEngineVersion",
    "downloadExtra",
    "getCategories",
    "getClientInfo",
    "getContentInfo",
    "getCurrentUser",
    "getCurrentUserGroup",
    "getEngineVersion",
    "getExtraInfo",
    "getPages",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "refresh",
    "removeClient",
    "removeContent",
    "removeEngineVersion",
    "removeExtra",
    "removeUser",
    "setCategories",
    "setPages",
    "setUserGroup",
    "submitClient",
    "submitContent",
    "submitEngineVersion",
    "submitExtra",
    "updateClient",
    "updateContent",
    "updateEngineVersion",
    "updateExtra"
};

}

::Ice::DispatchStatus
Rpc::Session::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Rpc__Session_all, __Rpc__Session_all + 39, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Rpc__Session_all)
    {
        case 0:
        {
            return ___browseClient(in, current);
        }
        case 1:
        {
            return ___browseContent(in, current);
        }
        case 2:
        {
            return ___browseEngineVersions(in, current);
        }
        case 3:
        {
            return ___browseExtra(in, current);
        }
        case 4:
        {
            return ___browseUsers(in, current);
        }
        case 5:
        {
            return ___destroy(in, current);
        }
        case 6:
        {
            return ___downloadContent(in, current);
        }
        case 7:
        {
            return ___downloadContentImage(in, current);
        }
        case 8:
        {
            return ___downloadEngineVersion(in, current);
        }
        case 9:
        {
            return ___downloadExtra(in, current);
        }
        case 10:
        {
            return ___getCategories(in, current);
        }
        case 11:
        {
            return ___getClientInfo(in, current);
        }
        case 12:
        {
            return ___getContentInfo(in, current);
        }
        case 13:
        {
            return ___getCurrentUser(in, current);
        }
        case 14:
        {
            return ___getCurrentUserGroup(in, current);
        }
        case 15:
        {
            return ___getEngineVersion(in, current);
        }
        case 16:
        {
            return ___getExtraInfo(in, current);
        }
        case 17:
        {
            return ___getPages(in, current);
        }
        case 18:
        {
            return ___ice_id(in, current);
        }
        case 19:
        {
            return ___ice_ids(in, current);
        }
        case 20:
        {
            return ___ice_isA(in, current);
        }
        case 21:
        {
            return ___ice_ping(in, current);
        }
        case 22:
        {
            return ___refresh(in, current);
        }
        case 23:
        {
            return ___removeClient(in, current);
        }
        case 24:
        {
            return ___removeContent(in, current);
        }
        case 25:
        {
            return ___removeEngineVersion(in, current);
        }
        case 26:
        {
            return ___removeExtra(in, current);
        }
        case 27:
        {
            return ___removeUser(in, current);
        }
        case 28:
        {
            return ___setCategories(in, current);
        }
        case 29:
        {
            return ___setPages(in, current);
        }
        case 30:
        {
            return ___setUserGroup(in, current);
        }
        case 31:
        {
            return ___submitClient(in, current);
        }
        case 32:
        {
            return ___submitContent(in, current);
        }
        case 33:
        {
            return ___submitEngineVersion(in, current);
        }
        case 34:
        {
            return ___submitExtra(in, current);
        }
        case 35:
        {
            return ___updateClient(in, current);
        }
        case 36:
        {
            return ___updateContent(in, current);
        }
        case 37:
        {
            return ___updateEngineVersion(in, current);
        }
        case 38:
        {
            return ___updateExtra(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Rpc::Session::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Rpc::Session::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Rpc::__patch(SessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Rpc::SessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Rpc::Session::ice_staticId(), v);
    }
}
